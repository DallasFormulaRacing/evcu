
CAN_BASICS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd8  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800422c  0800422c  0000522c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004260  08004260  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004260  08004260  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004260  08004260  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004260  08004260  00005260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004264  08004264  00005264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004268  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08004274  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08004274  00006160  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6cb  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015da  00000000  00000000  0001070d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  00011ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000066c  00000000  00000000  00012588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000299c3  00000000  00000000  00012bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d44  00000000  00000000  0003c5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107eec  00000000  00000000  000462fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e1e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002364  00000000  00000000  0014e22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00150590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	08004214 	.word	0x08004214

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	08004214 	.word	0x08004214

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b5b0      	push	{r4, r5, r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029a:	f000 fb4d 	bl	8000938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029e:	f000 f837 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a2:	f000 f8f1 	bl	8000488 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 80002a6:	f000 f8a7 	bl	80003f8 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */
  startupFDCAN(&hfdcan2, &TxHeader, &Error_Handler);
 80002aa:	4a14      	ldr	r2, [pc, #80]	@ (80002fc <main+0x68>)
 80002ac:	4914      	ldr	r1, [pc, #80]	@ (8000300 <main+0x6c>)
 80002ae:	4815      	ldr	r0, [pc, #84]	@ (8000304 <main+0x70>)
 80002b0:	f000 f95a 	bl	8000568 <startupFDCAN>
  const char msgdata[] = "hello sebastian!";
 80002b4:	4b14      	ldr	r3, [pc, #80]	@ (8000308 <main+0x74>)
 80002b6:	1d3c      	adds	r4, r7, #4
 80002b8:	461d      	mov	r5, r3
 80002ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002be:	682b      	ldr	r3, [r5, #0]
 80002c0:	7023      	strb	r3, [r4, #0]
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		TxHeader.Identifier = 0x000;
 80002c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <main+0x6c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
		TxHeader.DataLength = FDCAN_DLC_BYTES_16;
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <main+0x6c>)
 80002ca:	220a      	movs	r2, #10
 80002cc:	60da      	str	r2, [r3, #12]
		memcpy(txMessageData, msgdata, sizeof(msgdata) - 1);
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2210      	movs	r2, #16
 80002d2:	4619      	mov	r1, r3
 80002d4:	480d      	ldr	r0, [pc, #52]	@ (800030c <main+0x78>)
 80002d6:	f003 ff8f 	bl	80041f8 <memcpy>
		HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2,
 80002da:	4a0c      	ldr	r2, [pc, #48]	@ (800030c <main+0x78>)
 80002dc:	4908      	ldr	r1, [pc, #32]	@ (8000300 <main+0x6c>)
 80002de:	4809      	ldr	r0, [pc, #36]	@ (8000304 <main+0x70>)
 80002e0:	f000 ff1e 	bl	8001120 <HAL_FDCAN_AddMessageToTxFifoQ>
 80002e4:	4603      	mov	r3, r0
 80002e6:	75fb      	strb	r3, [r7, #23]
				&TxHeader, txMessageData);
		if (status != HAL_OK) {
 80002e8:	7dfb      	ldrb	r3, [r7, #23]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <main+0x5e>
			Error_Handler();
 80002ee:	f000 f99b 	bl	8000628 <Error_Handler>
		}
		HAL_Delay(10);
 80002f2:	200a      	movs	r0, #10
 80002f4:	f000 fbde 	bl	8000ab4 <HAL_Delay>
	while (1) {
 80002f8:	e7e3      	b.n	80002c2 <main+0x2e>
 80002fa:	bf00      	nop
 80002fc:	08000629 	.word	0x08000629
 8000300:	2000008c 	.word	0x2000008c
 8000304:	20000028 	.word	0x20000028
 8000308:	0800422c 	.word	0x0800422c
 800030c:	200000d8 	.word	0x200000d8

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b09c      	sub	sp, #112	@ 0x70
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0320 	add.w	r3, r7, #32
 800031a:	2250      	movs	r2, #80	@ 0x50
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f003 ff3e 	bl	80041a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	f107 0308 	add.w	r3, r7, #8
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]
 8000330:	60da      	str	r2, [r3, #12]
 8000332:	611a      	str	r2, [r3, #16]
 8000334:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000336:	4b2e      	ldr	r3, [pc, #184]	@ (80003f0 <SystemClock_Config+0xe0>)
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	4a2d      	ldr	r2, [pc, #180]	@ (80003f0 <SystemClock_Config+0xe0>)
 800033c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000340:	6113      	str	r3, [r2, #16]
 8000342:	4b2b      	ldr	r3, [pc, #172]	@ (80003f0 <SystemClock_Config+0xe0>)
 8000344:	691b      	ldr	r3, [r3, #16]
 8000346:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800034e:	bf00      	nop
 8000350:	4b27      	ldr	r3, [pc, #156]	@ (80003f0 <SystemClock_Config+0xe0>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	f003 0308 	and.w	r3, r3, #8
 8000358:	2b08      	cmp	r3, #8
 800035a:	d1f9      	bne.n	8000350 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035c:	2302      	movs	r3, #2
 800035e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000360:	2301      	movs	r3, #1
 8000362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000364:	2308      	movs	r3, #8
 8000366:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000368:	2340      	movs	r3, #64	@ 0x40
 800036a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	2302      	movs	r3, #2
 800036e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 8000370:	2301      	movs	r3, #1
 8000372:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000374:	2304      	movs	r3, #4
 8000376:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000378:	233c      	movs	r3, #60	@ 0x3c
 800037a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800037c:	2302      	movs	r3, #2
 800037e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8000380:	230c      	movs	r3, #12
 8000382:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000384:	2302      	movs	r3, #2
 8000386:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000388:	230c      	movs	r3, #12
 800038a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800038c:	2300      	movs	r3, #0
 800038e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000394:	f107 0320 	add.w	r3, r7, #32
 8000398:	4618      	mov	r0, r3
 800039a:	f001 fcd9 	bl	8001d50 <HAL_RCC_OscConfig>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80003a4:	f000 f940 	bl	8000628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a8:	231f      	movs	r3, #31
 80003aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ac:	2303      	movs	r3, #3
 80003ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003c0:	f107 0308 	add.w	r3, r7, #8
 80003c4:	2105      	movs	r1, #5
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 f8fa 	bl	80025c0 <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80003d2:	f000 f929 	bl	8000628 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80003d6:	4b07      	ldr	r3, [pc, #28]	@ (80003f4 <SystemClock_Config+0xe4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80003de:	4a05      	ldr	r2, [pc, #20]	@ (80003f4 <SystemClock_Config+0xe4>)
 80003e0:	f043 0320 	orr.w	r3, r3, #32
 80003e4:	6013      	str	r3, [r2, #0]
}
 80003e6:	bf00      	nop
 80003e8:	3770      	adds	r7, #112	@ 0x70
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	44020800 	.word	0x44020800
 80003f4:	40022000 	.word	0x40022000

080003f8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80003fc:	4b20      	ldr	r3, [pc, #128]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 80003fe:	4a21      	ldr	r2, [pc, #132]	@ (8000484 <MX_FDCAN2_Init+0x8c>)
 8000400:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000402:	4b1f      	ldr	r3, [pc, #124]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 8000404:	2200      	movs	r2, #0
 8000406:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000408:	4b1d      	ldr	r3, [pc, #116]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 800040a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800040e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000410:	4b1b      	ldr	r3, [pc, #108]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000416:	4b1a      	ldr	r3, [pc, #104]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 8000418:	2200      	movs	r2, #0
 800041a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800041c:	4b18      	ldr	r3, [pc, #96]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 800041e:	2200      	movs	r2, #0
 8000420:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000422:	4b17      	ldr	r3, [pc, #92]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 8000424:	2200      	movs	r2, #0
 8000426:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 4;
 8000428:	4b15      	ldr	r3, [pc, #84]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 800042a:	2204      	movs	r2, #4
 800042c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 2;
 800042e:	4b14      	ldr	r3, [pc, #80]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 8000430:	2202      	movs	r2, #2
 8000432:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 7;
 8000434:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 8000436:	2207      	movs	r2, #7
 8000438:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800043a:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 800043c:	2202      	movs	r2, #2
 800043e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000440:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 8000442:	2201      	movs	r2, #1
 8000444:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 9;
 8000446:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 8000448:	2209      	movs	r2, #9
 800044a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 10;
 800044c:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 800044e:	220a      	movs	r2, #10
 8000450:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 9;
 8000452:	4b0b      	ldr	r3, [pc, #44]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 8000454:	2209      	movs	r2, #9
 8000456:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000458:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 800045a:	2200      	movs	r2, #0
 800045c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 800045e:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 8000460:	2200      	movs	r2, #0
 8000462:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000464:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 8000466:	2200      	movs	r2, #0
 8000468:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800046a:	4805      	ldr	r0, [pc, #20]	@ (8000480 <MX_FDCAN2_Init+0x88>)
 800046c:	f000 fcd6 	bl	8000e1c <HAL_FDCAN_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8000476:	f000 f8d7 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000028 	.word	0x20000028
 8000484:	4000a800 	.word	0x4000a800

08000488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048e:	f107 030c 	add.w	r3, r7, #12
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
 800049c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049e:	4b1e      	ldr	r3, [pc, #120]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004a4:	4a1c      	ldr	r2, [pc, #112]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004a6:	f043 0301 	orr.w	r3, r3, #1
 80004aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004bc:	4b16      	ldr	r3, [pc, #88]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004c2:	4a15      	ldr	r2, [pc, #84]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004c4:	f043 0304 	orr.w	r3, r3, #4
 80004c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004cc:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004d2:	f003 0304 	and.w	r3, r3, #4
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004e2:	f043 0302 	orr.w	r3, r3, #2
 80004e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000518 <MX_GPIO_Init+0x90>)
 80004ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004f0:	f003 0302 	and.w	r3, r3, #2
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004f8:	2310      	movs	r3, #16
 80004fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	4619      	mov	r1, r3
 800050a:	4804      	ldr	r0, [pc, #16]	@ (800051c <MX_GPIO_Init+0x94>)
 800050c:	f001 fac2 	bl	8001a94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000510:	bf00      	nop
 8000512:	3720      	adds	r7, #32
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	44020c00 	.word	0x44020c00
 800051c:	42020800 	.word	0x42020800

08000520 <configureFDCANTransmissionHeader>:

/* USER CODE BEGIN 4 */

void configureFDCANTransmissionHeader(FDCAN_TxHeaderTypeDef *tx_header) {
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	tx_header->IdType = FDCAN_STANDARD_ID;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2200      	movs	r2, #0
 800052c:	605a      	str	r2, [r3, #4]
	tx_header->TxFrameType = FDCAN_DATA_FRAME;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
	tx_header->DataLength = FDCAN_DLC_BYTES_16;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	220a      	movs	r2, #10
 8000538:	60da      	str	r2, [r3, #12]
	tx_header->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
	tx_header->BitRateSwitch = FDCAN_BRS_ON;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000546:	615a      	str	r2, [r3, #20]
	tx_header->FDFormat = FDCAN_FD_CAN;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800054e:	619a      	str	r2, [r3, #24]
	tx_header->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
	tx_header->MessageMarker = 0;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2200      	movs	r2, #0
 800055a:	621a      	str	r2, [r3, #32]
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <startupFDCAN>:

void startupFDCAN(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *tx_header,
		void (*err_handler)(void)) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (HAL_FDCAN_GetState(hfdcan) != HAL_FDCAN_STATE_READY) {
 8000574:	68f8      	ldr	r0, [r7, #12]
 8000576:	f001 f9a1 	bl	80018bc <HAL_FDCAN_GetState>
 800057a:	4603      	mov	r3, r0
 800057c:	2b01      	cmp	r3, #1
 800057e:	d001      	beq.n	8000584 <startupFDCAN+0x1c>
		err_handler();  // startupFDCAN called before hfdcan initialized.
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4798      	blx	r3
	}

	// Enable CAN transceiver & interrupts
	//stby_pin->digitalWrite(false);  // Enable the transceiver
	hal_status = HAL_FDCAN_Start(hfdcan);
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	f000 fda3 	bl	80010d0 <HAL_FDCAN_Start>
 800058a:	4603      	mov	r3, r0
 800058c:	75fb      	strb	r3, [r7, #23]
	if (hal_status != HAL_OK) {
 800058e:	7dfb      	ldrb	r3, [r7, #23]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <startupFDCAN+0x30>
		err_handler();
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4798      	blx	r3
	}

	// Activate RX interrupts
	hal_status = HAL_FDCAN_ActivateNotification(hfdcan,
 8000598:	2200      	movs	r2, #0
 800059a:	2101      	movs	r1, #1
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f000 ff0b 	bl	80013b8 <HAL_FDCAN_ActivateNotification>
 80005a2:	4603      	mov	r3, r0
 80005a4:	75fb      	strb	r3, [r7, #23]
	FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
	if (hal_status != HAL_OK) {
 80005a6:	7dfb      	ldrb	r3, [r7, #23]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <startupFDCAN+0x48>
		err_handler();
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4798      	blx	r3
	}

	configureFDCANTransmissionHeader(tx_header);
 80005b0:	68b8      	ldr	r0, [r7, #8]
 80005b2:	f7ff ffb5 	bl	8000520 <configureFDCANTransmissionHeader>

	if (HAL_FDCAN_GetState(hfdcan) == HAL_FDCAN_STATE_ERROR) {
 80005b6:	68f8      	ldr	r0, [r7, #12]
 80005b8:	f001 f980 	bl	80018bc <HAL_FDCAN_GetState>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d101      	bne.n	80005c6 <startupFDCAN+0x5e>
		err_handler(); // Make sure we're not in an error state
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4798      	blx	r3
	}
}
 80005c6:	bf00      	nop
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d017      	beq.n	8000614 <HAL_FDCAN_RxFifo0Callback+0x44>
		/* Retrieve RX messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader,
 80005e4:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80005e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000620 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80005e8:	2140      	movs	r1, #64	@ 0x40
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f000 fddc 	bl	80011a8 <HAL_FDCAN_GetRxMessage>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <HAL_FDCAN_RxFifo0Callback+0x2a>
				rxMessageData) != HAL_OK) {
			/* Reception Error */
			Error_Handler();
 80005f6:	f000 f817 	bl	8000628 <Error_Handler>
		}
		receivedFrame = 1;
 80005fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <HAL_FDCAN_RxFifo0Callback+0x54>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	601a      	str	r2, [r3, #0]
		if (HAL_FDCAN_ActivateNotification(hfdcan,
 8000600:	2200      	movs	r2, #0
 8000602:	2101      	movs	r1, #1
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 fed7 	bl	80013b8 <HAL_FDCAN_ActivateNotification>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <HAL_FDCAN_RxFifo0Callback+0x44>
		FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
			/* Notification Error */
			Error_Handler();
 8000610:	f000 f80a 	bl	8000628 <Error_Handler>
		}
	}
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000118 	.word	0x20000118
 8000620:	200000b0 	.word	0x200000b0
 8000624:	20000158 	.word	0x20000158

08000628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <Error_Handler+0x8>

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b0c0      	sub	sp, #256	@ 0x100
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800065c:	f107 0318 	add.w	r3, r7, #24
 8000660:	22d0      	movs	r2, #208	@ 0xd0
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f003 fd9b 	bl	80041a0 <memset>
  if(hfdcan->Instance==FDCAN2)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a3e      	ldr	r2, [pc, #248]	@ (8000768 <HAL_FDCAN_MspInit+0x124>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d173      	bne.n	800075c <HAL_FDCAN_MspInit+0x118>

    /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000674:	f04f 0200 	mov.w	r2, #0
 8000678:	f04f 0304 	mov.w	r3, #4
 800067c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000680:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000684:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000688:	f107 0318 	add.w	r3, r7, #24
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fa97 	bl	8002bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000698:	f7ff ffc6 	bl	8000628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800069c:	4b33      	ldr	r3, [pc, #204]	@ (800076c <HAL_FDCAN_MspInit+0x128>)
 800069e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80006a2:	4a32      	ldr	r2, [pc, #200]	@ (800076c <HAL_FDCAN_MspInit+0x128>)
 80006a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006a8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80006ac:	4b2f      	ldr	r3, [pc, #188]	@ (800076c <HAL_FDCAN_MspInit+0x128>)
 80006ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80006b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b2c      	ldr	r3, [pc, #176]	@ (800076c <HAL_FDCAN_MspInit+0x128>)
 80006bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006c0:	4a2a      	ldr	r2, [pc, #168]	@ (800076c <HAL_FDCAN_MspInit+0x128>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006ca:	4b28      	ldr	r3, [pc, #160]	@ (800076c <HAL_FDCAN_MspInit+0x128>)
 80006cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <HAL_FDCAN_MspInit+0x128>)
 80006da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006de:	4a23      	ldr	r2, [pc, #140]	@ (800076c <HAL_FDCAN_MspInit+0x128>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006e8:	4b20      	ldr	r3, [pc, #128]	@ (800076c <HAL_FDCAN_MspInit+0x128>)
 80006ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PA0     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f6:	2301      	movs	r3, #1
 80006f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	2302      	movs	r3, #2
 80006fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800070e:	2309      	movs	r3, #9
 8000710:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000718:	4619      	mov	r1, r3
 800071a:	4815      	ldr	r0, [pc, #84]	@ (8000770 <HAL_FDCAN_MspInit+0x12c>)
 800071c:	f001 f9ba 	bl	8001a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000720:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000724:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800073a:	2309      	movs	r3, #9
 800073c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000744:	4619      	mov	r1, r3
 8000746:	480b      	ldr	r0, [pc, #44]	@ (8000774 <HAL_FDCAN_MspInit+0x130>)
 8000748:	f001 f9a4 	bl	8001a94 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	206d      	movs	r0, #109	@ 0x6d
 8000752:	f000 fa8b 	bl	8000c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8000756:	206d      	movs	r0, #109	@ 0x6d
 8000758:	f000 faa2 	bl	8000ca0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 800075c:	bf00      	nop
 800075e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	4000a800 	.word	0x4000a800
 800076c:	44020c00 	.word	0x44020c00
 8000770:	42020000 	.word	0x42020000
 8000774:	42020400 	.word	0x42020400

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <NMI_Handler+0x4>

08000780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <MemManage_Handler+0x4>

08000790 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <UsageFault_Handler+0x4>

080007a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ce:	f000 f951 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80007dc:	4802      	ldr	r0, [pc, #8]	@ (80007e8 <FDCAN2_IT0_IRQHandler+0x10>)
 80007de:	f000 fed1 	bl	8001584 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000028 	.word	0x20000028

080007ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007f2:	4b35      	ldr	r3, [pc, #212]	@ (80008c8 <SystemInit+0xdc>)
 80007f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007f8:	4a33      	ldr	r2, [pc, #204]	@ (80008c8 <SystemInit+0xdc>)
 80007fa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007fe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000802:	4b32      	ldr	r3, [pc, #200]	@ (80008cc <SystemInit+0xe0>)
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000808:	4b30      	ldr	r3, [pc, #192]	@ (80008cc <SystemInit+0xe0>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800080e:	4b2f      	ldr	r3, [pc, #188]	@ (80008cc <SystemInit+0xe0>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000814:	4b2d      	ldr	r3, [pc, #180]	@ (80008cc <SystemInit+0xe0>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	492c      	ldr	r1, [pc, #176]	@ (80008cc <SystemInit+0xe0>)
 800081a:	4b2d      	ldr	r3, [pc, #180]	@ (80008d0 <SystemInit+0xe4>)
 800081c:	4013      	ands	r3, r2
 800081e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000820:	4b2a      	ldr	r3, [pc, #168]	@ (80008cc <SystemInit+0xe0>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000826:	4b29      	ldr	r3, [pc, #164]	@ (80008cc <SystemInit+0xe0>)
 8000828:	2200      	movs	r2, #0
 800082a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800082c:	4b27      	ldr	r3, [pc, #156]	@ (80008cc <SystemInit+0xe0>)
 800082e:	2200      	movs	r2, #0
 8000830:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000832:	4b26      	ldr	r3, [pc, #152]	@ (80008cc <SystemInit+0xe0>)
 8000834:	4a27      	ldr	r2, [pc, #156]	@ (80008d4 <SystemInit+0xe8>)
 8000836:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000838:	4b24      	ldr	r3, [pc, #144]	@ (80008cc <SystemInit+0xe0>)
 800083a:	2200      	movs	r2, #0
 800083c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800083e:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <SystemInit+0xe0>)
 8000840:	4a24      	ldr	r2, [pc, #144]	@ (80008d4 <SystemInit+0xe8>)
 8000842:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000844:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <SystemInit+0xe0>)
 8000846:	2200      	movs	r2, #0
 8000848:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800084a:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <SystemInit+0xe0>)
 800084c:	4a21      	ldr	r2, [pc, #132]	@ (80008d4 <SystemInit+0xe8>)
 800084e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000850:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <SystemInit+0xe0>)
 8000852:	2200      	movs	r2, #0
 8000854:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000856:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <SystemInit+0xe0>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a1c      	ldr	r2, [pc, #112]	@ (80008cc <SystemInit+0xe0>)
 800085c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000860:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000862:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <SystemInit+0xe0>)
 8000864:	2200      	movs	r2, #0
 8000866:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000868:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <SystemInit+0xdc>)
 800086a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800086e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000870:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <SystemInit+0xec>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000878:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000880:	d003      	beq.n	800088a <SystemInit+0x9e>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000888:	d117      	bne.n	80008ba <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800088a:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <SystemInit+0xec>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	2b00      	cmp	r3, #0
 8000894:	d005      	beq.n	80008a2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <SystemInit+0xec>)
 8000898:	4a10      	ldr	r2, [pc, #64]	@ (80008dc <SystemInit+0xf0>)
 800089a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800089c:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <SystemInit+0xec>)
 800089e:	4a10      	ldr	r2, [pc, #64]	@ (80008e0 <SystemInit+0xf4>)
 80008a0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <SystemInit+0xec>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	4a0c      	ldr	r2, [pc, #48]	@ (80008d8 <SystemInit+0xec>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80008ae:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <SystemInit+0xec>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a09      	ldr	r2, [pc, #36]	@ (80008d8 <SystemInit+0xec>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	61d3      	str	r3, [r2, #28]
  }
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00
 80008cc:	44020c00 	.word	0x44020c00
 80008d0:	eae2eae3 	.word	0xeae2eae3
 80008d4:	01010280 	.word	0x01010280
 80008d8:	40022000 	.word	0x40022000
 80008dc:	08192a3b 	.word	0x08192a3b
 80008e0:	4c5d6e7f 	.word	0x4c5d6e7f

080008e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008e4:	480d      	ldr	r0, [pc, #52]	@ (800091c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008e8:	f7ff ff80 	bl	80007ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ec:	480c      	ldr	r0, [pc, #48]	@ (8000920 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ee:	490d      	ldr	r1, [pc, #52]	@ (8000924 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000928 <LoopForever+0xe>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a0a      	ldr	r2, [pc, #40]	@ (800092c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000904:	4c0a      	ldr	r4, [pc, #40]	@ (8000930 <LoopForever+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000912:	f003 fc4d 	bl	80041b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000916:	f7ff fcbd 	bl	8000294 <main>

0800091a <LoopForever>:

LoopForever:
    b LoopForever
 800091a:	e7fe      	b.n	800091a <LoopForever>
  ldr   r0, =_estack
 800091c:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000924:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000928:	08004268 	.word	0x08004268
  ldr r2, =_sbss
 800092c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000930:	20000160 	.word	0x20000160

08000934 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000934:	e7fe      	b.n	8000934 <ADC1_IRQHandler>
	...

08000938 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f98a 	bl	8000c56 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000942:	f001 fff5 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8000946:	4602      	mov	r2, r0
 8000948:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <HAL_Init+0x44>)
 800094a:	6a1b      	ldr	r3, [r3, #32]
 800094c:	f003 030f 	and.w	r3, r3, #15
 8000950:	490b      	ldr	r1, [pc, #44]	@ (8000980 <HAL_Init+0x48>)
 8000952:	5ccb      	ldrb	r3, [r1, r3]
 8000954:	fa22 f303 	lsr.w	r3, r2, r3
 8000958:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <HAL_Init+0x4c>)
 800095a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800095c:	2004      	movs	r0, #4
 800095e:	f000 f9cf 	bl	8000d00 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000962:	200f      	movs	r0, #15
 8000964:	f000 f810 	bl	8000988 <HAL_InitTick>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e002      	b.n	8000978 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000972:	f7ff fe5f 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000976:	2300      	movs	r3, #0
}
 8000978:	4618      	mov	r0, r3
 800097a:	bd80      	pop	{r7, pc}
 800097c:	44020c00 	.word	0x44020c00
 8000980:	08004240 	.word	0x08004240
 8000984:	20000000 	.word	0x20000000

08000988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000994:	4b33      	ldr	r3, [pc, #204]	@ (8000a64 <HAL_InitTick+0xdc>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d101      	bne.n	80009a0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	e05c      	b.n	8000a5a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80009a0:	4b31      	ldr	r3, [pc, #196]	@ (8000a68 <HAL_InitTick+0xe0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d10c      	bne.n	80009c6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80009ac:	4b2f      	ldr	r3, [pc, #188]	@ (8000a6c <HAL_InitTick+0xe4>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a64 <HAL_InitTick+0xdc>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	e037      	b.n	8000a36 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80009c6:	f000 f9f3 	bl	8000db0 <HAL_SYSTICK_GetCLKSourceConfig>
 80009ca:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d023      	beq.n	8000a1a <HAL_InitTick+0x92>
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d82d      	bhi.n	8000a34 <HAL_InitTick+0xac>
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d003      	beq.n	80009e6 <HAL_InitTick+0x5e>
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d00d      	beq.n	8000a00 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80009e4:	e026      	b.n	8000a34 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80009e6:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <HAL_InitTick+0xe4>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000a64 <HAL_InitTick+0xdc>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4619      	mov	r1, r3
 80009f0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80009f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fc:	60fb      	str	r3, [r7, #12]
        break;
 80009fe:	e01a      	b.n	8000a36 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000a00:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <HAL_InitTick+0xdc>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a0e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	60fb      	str	r3, [r7, #12]
        break;
 8000a18:	e00d      	b.n	8000a36 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000a1a:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <HAL_InitTick+0xdc>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a24:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a30:	60fb      	str	r3, [r7, #12]
        break;
 8000a32:	e000      	b.n	8000a36 <HAL_InitTick+0xae>
        break;
 8000a34:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f000 f940 	bl	8000cbc <HAL_SYSTICK_Config>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e009      	b.n	8000a5a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a46:	2200      	movs	r2, #0
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a4e:	f000 f90d 	bl	8000c6c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000a52:	4a07      	ldr	r2, [pc, #28]	@ (8000a70 <HAL_InitTick+0xe8>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000008 	.word	0x20000008
 8000a68:	e000e010 	.word	0xe000e010
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_IncTick+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HAL_IncTick+0x24>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <HAL_IncTick+0x24>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008
 8000a98:	2000015c 	.word	0x2000015c

08000a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	@ (8000ab0 <HAL_GetTick+0x14>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	2000015c 	.word	0x2000015c

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff ffee 	bl	8000a9c <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <HAL_Delay+0x44>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffde 	bl	8000a9c <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4907      	ldr	r1, [pc, #28]	@ (8000b98 <__NVIC_EnableIRQ+0x38>)
 8000b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	@ (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	@ 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ff4c 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7a:	f7ff ff63 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000c7e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	68b9      	ldr	r1, [r7, #8]
 8000c84:	6978      	ldr	r0, [r7, #20]
 8000c86:	f7ff ffb3 	bl	8000bf0 <NVIC_EncodePriority>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff82 	bl	8000b9c <__NVIC_SetPriority>
}
 8000c98:	bf00      	nop
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff56 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ccc:	d301      	bcc.n	8000cd2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00d      	b.n	8000cee <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <HAL_SYSTICK_Config+0x40>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <HAL_SYSTICK_Config+0x40>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_SYSTICK_Config+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a05      	ldr	r2, [pc, #20]	@ (8000cfc <HAL_SYSTICK_Config+0x40>)
 8000ce6:	f043 0303 	orr.w	r3, r3, #3
 8000cea:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d844      	bhi.n	8000d98 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d14 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d14:	08000d37 	.word	0x08000d37
 8000d18:	08000d55 	.word	0x08000d55
 8000d1c:	08000d77 	.word	0x08000d77
 8000d20:	08000d99 	.word	0x08000d99
 8000d24:	08000d29 	.word	0x08000d29
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000d28:	4b1f      	ldr	r3, [pc, #124]	@ (8000da8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8000da8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6013      	str	r3, [r2, #0]
      break;
 8000d34:	e031      	b.n	8000d9a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000d36:	4b1c      	ldr	r3, [pc, #112]	@ (8000da8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8000da8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d3c:	f023 0304 	bic.w	r3, r3, #4
 8000d40:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000d42:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d48:	4a18      	ldr	r2, [pc, #96]	@ (8000dac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d4a:	f023 030c 	bic.w	r3, r3, #12
 8000d4e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000d52:	e022      	b.n	8000d9a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000d54:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a13      	ldr	r2, [pc, #76]	@ (8000da8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d5a:	f023 0304 	bic.w	r3, r3, #4
 8000d5e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d66:	f023 030c 	bic.w	r3, r3, #12
 8000d6a:	4a10      	ldr	r2, [pc, #64]	@ (8000dac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000d74:	e011      	b.n	8000d9a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000d76:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000da8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d7c:	f023 0304 	bic.w	r3, r3, #4
 8000d80:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d88:	f023 030c 	bic.w	r3, r3, #12
 8000d8c:	4a07      	ldr	r2, [pc, #28]	@ (8000dac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d8e:	f043 0308 	orr.w	r3, r3, #8
 8000d92:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000d96:	e000      	b.n	8000d9a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000d98:	bf00      	nop
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010
 8000dac:	44020c00 	.word	0x44020c00

08000db0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000db6:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	e01e      	b.n	8000e06 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000dca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000dce:	f003 030c 	and.w	r3, r3, #12
 8000dd2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	2b08      	cmp	r3, #8
 8000dd8:	d00f      	beq.n	8000dfa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	d80f      	bhi.n	8000e00 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d003      	beq.n	8000df4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000dec:	e008      	b.n	8000e00 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
        break;
 8000df2:	e008      	b.n	8000e06 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000df4:	2301      	movs	r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
        break;
 8000df8:	e005      	b.n	8000e06 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	607b      	str	r3, [r7, #4]
        break;
 8000dfe:	e002      	b.n	8000e06 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
        break;
 8000e04:	bf00      	nop
    }
  }
  return systick_source;
 8000e06:	687b      	ldr	r3, [r7, #4]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e010 	.word	0xe000e010
 8000e18:	44020c00 	.word	0x44020c00

08000e1c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e147      	b.n	80010be <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d106      	bne.n	8000e48 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fbfe 	bl	8000644 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	699a      	ldr	r2, [r3, #24]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0210 	bic.w	r2, r2, #16
 8000e56:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e58:	f7ff fe20 	bl	8000a9c <HAL_GetTick>
 8000e5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e5e:	e012      	b.n	8000e86 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e60:	f7ff fe1c 	bl	8000a9c <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b0a      	cmp	r3, #10
 8000e6c:	d90b      	bls.n	8000e86 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e72:	f043 0201 	orr.w	r2, r3, #1
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e11b      	b.n	80010be <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	2b08      	cmp	r3, #8
 8000e92:	d0e5      	beq.n	8000e60 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	699a      	ldr	r2, [r3, #24]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0201 	orr.w	r2, r2, #1
 8000ea2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ea4:	f7ff fdfa 	bl	8000a9c <HAL_GetTick>
 8000ea8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000eaa:	e012      	b.n	8000ed2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000eac:	f7ff fdf6 	bl	8000a9c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b0a      	cmp	r3, #10
 8000eb8:	d90b      	bls.n	8000ed2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ebe:	f043 0201 	orr.w	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e0f5      	b.n	80010be <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0e5      	beq.n	8000eac <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	699a      	ldr	r2, [r3, #24]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0202 	orr.w	r2, r2, #2
 8000eee:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a74      	ldr	r2, [pc, #464]	@ (80010c8 <HAL_FDCAN_Init+0x2ac>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d103      	bne.n	8000f02 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000efa:	4a74      	ldr	r2, [pc, #464]	@ (80010cc <HAL_FDCAN_Init+0x2b0>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7c1b      	ldrb	r3, [r3, #16]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d108      	bne.n	8000f1c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	699a      	ldr	r2, [r3, #24]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f18:	619a      	str	r2, [r3, #24]
 8000f1a:	e007      	b.n	8000f2c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	699a      	ldr	r2, [r3, #24]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f2a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7c5b      	ldrb	r3, [r3, #17]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d108      	bne.n	8000f46 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	699a      	ldr	r2, [r3, #24]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000f42:	619a      	str	r2, [r3, #24]
 8000f44:	e007      	b.n	8000f56 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	699a      	ldr	r2, [r3, #24]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000f54:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7c9b      	ldrb	r3, [r3, #18]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d108      	bne.n	8000f70 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	699a      	ldr	r2, [r3, #24]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000f6c:	619a      	str	r2, [r3, #24]
 8000f6e:	e007      	b.n	8000f80 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	699a      	ldr	r2, [r3, #24]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000f7e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	699a      	ldr	r2, [r3, #24]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000fa4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0210 	bic.w	r2, r2, #16
 8000fb4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d108      	bne.n	8000fd0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f042 0204 	orr.w	r2, r2, #4
 8000fcc:	619a      	str	r2, [r3, #24]
 8000fce:	e02c      	b.n	800102a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d028      	beq.n	800102a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d01c      	beq.n	800101a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000fee:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	691a      	ldr	r2, [r3, #16]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0210 	orr.w	r2, r2, #16
 8000ffe:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	2b03      	cmp	r3, #3
 8001006:	d110      	bne.n	800102a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	699a      	ldr	r2, [r3, #24]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0220 	orr.w	r2, r2, #32
 8001016:	619a      	str	r2, [r3, #24]
 8001018:	e007      	b.n	800102a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	699a      	ldr	r2, [r3, #24]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f042 0220 	orr.w	r2, r2, #32
 8001028:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	3b01      	subs	r3, #1
 8001030:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	3b01      	subs	r3, #1
 8001038:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800103a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001042:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	3b01      	subs	r3, #1
 800104c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001052:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001054:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800105e:	d115      	bne.n	800108c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001064:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106a:	3b01      	subs	r3, #1
 800106c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800106e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001074:	3b01      	subs	r3, #1
 8001076:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001078:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001080:	3b01      	subs	r3, #1
 8001082:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001088:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800108a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	430a      	orrs	r2, r1
 800109e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fc18 	bl	80018d8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	4000a400 	.word	0x4000a400
 80010cc:	4000a500 	.word	0x4000a500

080010d0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d110      	bne.n	8001106 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2202      	movs	r2, #2
 80010e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	699a      	ldr	r2, [r3, #24]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0201 	bic.w	r2, r2, #1
 80010fa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e006      	b.n	8001114 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800110a:	f043 0204 	orr.w	r2, r3, #4
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
  }
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d12c      	bne.n	8001192 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d007      	beq.n	8001158 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800114c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e023      	b.n	80011a0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001160:	0c1b      	lsrs	r3, r3, #16
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 fc14 	bl	800199c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	fa01 f202 	lsl.w	r2, r1, r2
 8001180:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001184:	2201      	movs	r2, #1
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	409a      	lsls	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e006      	b.n	80011a0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001196:	f043 0208 	orr.w	r2, r3, #8
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
  }
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b08b      	sub	sp, #44	@ 0x2c
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80011c0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80011c2:	7efb      	ldrb	r3, [r7, #27]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	f040 80e8 	bne.w	800139a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	2b40      	cmp	r3, #64	@ 0x40
 80011ce:	d137      	bne.n	8001240 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d107      	bne.n	80011f0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0db      	b.n	80013a8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001200:	d10a      	bne.n	8001218 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800120a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800120e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001212:	d101      	bne.n	8001218 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001214:	2301      	movs	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	4413      	add	r3, r2
 800122a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	4613      	mov	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
 800123e:	e036      	b.n	80012ae <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	2b00      	cmp	r3, #0
 800124e:	d107      	bne.n	8001260 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001254:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0a3      	b.n	80013a8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001268:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001270:	d10a      	bne.n	8001288 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800127a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800127e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001282:	d101      	bne.n	8001288 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001284:	2301      	movs	r3, #1
 8001286:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	69fa      	ldr	r2, [r7, #28]
 8001298:	4413      	add	r3, r2
 800129a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	4613      	mov	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4413      	add	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	440b      	add	r3, r1
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80012ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d107      	bne.n	80012d2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	0c9b      	lsrs	r3, r3, #18
 80012c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e005      	b.n	80012de <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80012de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80012ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80012f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f8:	3304      	adds	r3, #4
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80012fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	b29a      	uxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	0c1b      	lsrs	r3, r3, #16
 800130c:	f003 020f 	and.w	r2, r3, #15
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800132c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	0e1b      	lsrs	r3, r3, #24
 8001332:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800133a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	0fda      	lsrs	r2, r3, #31
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001346:	3304      	adds	r3, #4
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800134a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
 8001352:	e00a      	b.n	800136a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	441a      	add	r2, r3
 800135a:	6839      	ldr	r1, [r7, #0]
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	440b      	add	r3, r1
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	3301      	adds	r3, #1
 8001368:	623b      	str	r3, [r7, #32]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	4a11      	ldr	r2, [pc, #68]	@ (80013b4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001370:	5cd3      	ldrb	r3, [r2, r3]
 8001372:	461a      	mov	r2, r3
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	4293      	cmp	r3, r2
 8001378:	d3ec      	bcc.n	8001354 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	2b40      	cmp	r3, #64	@ 0x40
 800137e:	d105      	bne.n	800138c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800138a:	e004      	b.n	8001396 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e006      	b.n	80013a8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800139e:	f043 0208 	orr.w	r2, r3, #8
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
  }
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	372c      	adds	r7, #44	@ 0x2c
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	08004250 	.word	0x08004250

080013b8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013ca:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d003      	beq.n	80013da <HAL_FDCAN_ActivateNotification+0x22>
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	f040 80c8 	bne.w	800156a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d004      	beq.n	80013f6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d03b      	beq.n	800146e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d004      	beq.n	800140a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d031      	beq.n	800146e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001410:	2b00      	cmp	r3, #0
 8001412:	d004      	beq.n	800141e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d027      	beq.n	800146e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001424:	2b00      	cmp	r3, #0
 8001426:	d004      	beq.n	8001432 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d01d      	beq.n	800146e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001438:	2b00      	cmp	r3, #0
 800143a:	d004      	beq.n	8001446 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	2b00      	cmp	r3, #0
 8001444:	d013      	beq.n	800146e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800144c:	2b00      	cmp	r3, #0
 800144e:	d004      	beq.n	800145a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	2b00      	cmp	r3, #0
 8001458:	d009      	beq.n	800146e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00c      	beq.n	800147e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d107      	bne.n	800147e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0201 	orr.w	r2, r2, #1
 800147c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d13b      	bne.n	800150a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001498:	2b00      	cmp	r3, #0
 800149a:	d004      	beq.n	80014a6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d131      	bne.n	800150a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d004      	beq.n	80014ba <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d127      	bne.n	800150a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d11d      	bne.n	800150a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d113      	bne.n	800150a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d004      	beq.n	80014f6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	f003 0320 	and.w	r3, r3, #32
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d109      	bne.n	800150a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00c      	beq.n	800151a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001506:	2b00      	cmp	r3, #0
 8001508:	d007      	beq.n	800151a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0202 	orr.w	r2, r2, #2
 8001518:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	430a      	orrs	r2, r1
 8001534:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	430a      	orrs	r2, r1
 8001552:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	430a      	orrs	r2, r1
 8001564:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e006      	b.n	8001578 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800156e:	f043 0202 	orr.w	r2, r3, #2
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
  }
}
 8001578:	4618      	mov	r0, r3
 800157a:	371c      	adds	r7, #28
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08c      	sub	sp, #48	@ 0x30
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001592:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015a0:	4013      	ands	r3, r2
 80015a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015b8:	4013      	ands	r3, r2
 80015ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d0:	4013      	ands	r3, r2
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015da:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80015de:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e6:	6a3a      	ldr	r2, [r7, #32]
 80015e8:	4013      	ands	r3, r2
 80015ea:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015f6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	4013      	ands	r3, r2
 8001602:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800160a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001612:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	099b      	lsrs	r3, r3, #6
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00c      	beq.n	800163a <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	099b      	lsrs	r3, r3, #6
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d006      	beq.n	800163a <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2240      	movs	r2, #64	@ 0x40
 8001632:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f922 	bl	800187e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d01a      	beq.n	800167c <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d014      	beq.n	800167c <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800165a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001672:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001674:	6939      	ldr	r1, [r7, #16]
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f8e2 	bl	8001840 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800167c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001688:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800168a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f8ac 	bl	80017ea <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001694:	2b00      	cmp	r3, #0
 8001696:	d007      	beq.n	80016a8 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800169e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80016a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7fe ff94 	bl	80005d0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016b4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80016b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f8a1 	bl	8001800 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	0a5b      	lsrs	r3, r3, #9
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00d      	beq.n	80016e6 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	0a5b      	lsrs	r3, r3, #9
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f898 	bl	8001816 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	09db      	lsrs	r3, r3, #7
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d019      	beq.n	8001726 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	09db      	lsrs	r3, r3, #7
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d013      	beq.n	8001726 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001706:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4013      	ands	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2280      	movs	r2, #128	@ 0x80
 800171c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800171e:	68f9      	ldr	r1, [r7, #12]
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f882 	bl	800182a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	0b5b      	lsrs	r3, r3, #13
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00d      	beq.n	800174e <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	0b5b      	lsrs	r3, r3, #13
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d007      	beq.n	800174e <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001746:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f884 	bl	8001856 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	0bdb      	lsrs	r3, r3, #15
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00d      	beq.n	8001776 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	0bdb      	lsrs	r3, r3, #15
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800176e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f87a 	bl	800186a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	0b9b      	lsrs	r3, r3, #14
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d010      	beq.n	80017a4 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	0b9b      	lsrs	r3, r3, #14
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00a      	beq.n	80017a4 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001796:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80017b2:	69f9      	ldr	r1, [r7, #28]
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f876 	bl	80018a6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d009      	beq.n	80017d4 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6a3a      	ldr	r2, [r7, #32]
 80017c6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f858 	bl	8001892 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80017e2:	bf00      	nop
 80017e4:	3730      	adds	r7, #48	@ 0x30
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_FDCAN_GetState>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL state
  */
HAL_FDCAN_StateTypeDef HAL_FDCAN_GetState(const FDCAN_HandleTypeDef *hfdcan)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Return FDCAN state */
  return hfdcan->State;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80018ca:	b2db      	uxtb	r3, r3
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80018e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001994 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80018e2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001998 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d103      	bne.n	80018f6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80018f4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001904:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800190c:	041a      	lsls	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800192a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001932:	061a      	lsls	r2, r3, #24
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	e005      	b.n	8001978 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3304      	adds	r3, #4
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d3f3      	bcc.n	800196c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	4000ac00 	.word	0x4000ac00
 8001998:	4000a800 	.word	0x4000a800

0800199c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	@ 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10a      	bne.n	80019c8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80019ba:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e00a      	b.n	80019de <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80019d0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80019d6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80019d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80019dc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80019e8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80019ee:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80019f4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	3304      	adds	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e020      	b.n	8001a72 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3303      	adds	r3, #3
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3302      	adds	r3, #2
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	440b      	add	r3, r1
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001a48:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	440b      	add	r3, r1
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001a56:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	440a      	add	r2, r1
 8001a5e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001a60:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	4a06      	ldr	r2, [pc, #24]	@ (8001a90 <FDCAN_CopyMessageToRAM+0xf4>)
 8001a78:	5cd3      	ldrb	r3, [r2, r3]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d3d6      	bcc.n	8001a30 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001a82:	bf00      	nop
 8001a84:	bf00      	nop
 8001a86:	3724      	adds	r7, #36	@ 0x24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	08004250 	.word	0x08004250

08001a94 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001aa2:	e142      	b.n	8001d2a <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8134 	beq.w	8001d24 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x38>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b12      	cmp	r3, #18
 8001aca:	d125      	bne.n	8001b18 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3208      	adds	r2, #8
 8001ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4013      	ands	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f003 020f 	and.w	r2, r3, #15
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	08da      	lsrs	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3208      	adds	r2, #8
 8001b12:	6979      	ldr	r1, [r7, #20]
 8001b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0203 	and.w	r2, r3, #3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d00b      	beq.n	8001b6c <HAL_GPIO_Init+0xd8>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d007      	beq.n	8001b6c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b60:	2b11      	cmp	r3, #17
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b12      	cmp	r3, #18
 8001b6a:	d130      	bne.n	8001bce <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4013      	ands	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f003 0201 	and.w	r2, r3, #1
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d109      	bne.n	8001bee <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d11b      	bne.n	8001c1e <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d017      	beq.n	8001c1e <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4013      	ands	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d07c      	beq.n	8001d24 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001c2a:	4a47      	ldr	r2, [pc, #284]	@ (8001d48 <HAL_GPIO_Init+0x2b4>)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	3318      	adds	r3, #24
 8001c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c36:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	0a9a      	lsrs	r2, r3, #10
 8001c52:	4b3e      	ldr	r3, [pc, #248]	@ (8001d4c <HAL_GPIO_Init+0x2b8>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	f002 0203 	and.w	r2, r2, #3
 8001c5c:	00d2      	lsls	r2, r2, #3
 8001c5e:	4093      	lsls	r3, r2
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001c66:	4938      	ldr	r1, [pc, #224]	@ (8001d48 <HAL_GPIO_Init+0x2b4>)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3318      	adds	r3, #24
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001c74:	4b34      	ldr	r3, [pc, #208]	@ (8001d48 <HAL_GPIO_Init+0x2b4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4013      	ands	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001c98:	4a2b      	ldr	r2, [pc, #172]	@ (8001d48 <HAL_GPIO_Init+0x2b4>)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d48 <HAL_GPIO_Init+0x2b4>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	4013      	ands	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001cc2:	4a21      	ldr	r2, [pc, #132]	@ (8001d48 <HAL_GPIO_Init+0x2b4>)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <HAL_GPIO_Init+0x2b4>)
 8001cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cce:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001cee:	4a16      	ldr	r2, [pc, #88]	@ (8001d48 <HAL_GPIO_Init+0x2b4>)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <HAL_GPIO_Init+0x2b4>)
 8001cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cfc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4013      	ands	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <HAL_GPIO_Init+0x2b4>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	3301      	adds	r3, #1
 8001d28:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f47f aeb5 	bne.w	8001aa4 <HAL_GPIO_Init+0x10>
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	bf00      	nop
 8001d3e:	371c      	adds	r7, #28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	44022000 	.word	0x44022000
 8001d4c:	002f7f7f 	.word	0x002f7f7f

08001d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d102      	bne.n	8001d64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f000 bc28 	b.w	80025b4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d64:	4b94      	ldr	r3, [pc, #592]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	f003 0318 	and.w	r3, r3, #24
 8001d6c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001d6e:	4b92      	ldr	r3, [pc, #584]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d05b      	beq.n	8001e3c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x46>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	2b18      	cmp	r3, #24
 8001d8e:	d114      	bne.n	8001dba <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d111      	bne.n	8001dba <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d102      	bne.n	8001da4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f000 bc08 	b.w	80025b4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001da4:	4b84      	ldr	r3, [pc, #528]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	041b      	lsls	r3, r3, #16
 8001db2:	4981      	ldr	r1, [pc, #516]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001db8:	e040      	b.n	8001e3c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d023      	beq.n	8001e0a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001dc2:	4b7d      	ldr	r3, [pc, #500]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a7c      	ldr	r2, [pc, #496]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7fe fe65 	bl	8000a9c <HAL_GetTick>
 8001dd2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001dd6:	f7fe fe61 	bl	8000a9c <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e3e5      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001de8:	4b73      	ldr	r3, [pc, #460]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001df4:	4b70      	ldr	r3, [pc, #448]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	041b      	lsls	r3, r3, #16
 8001e02:	496d      	ldr	r1, [pc, #436]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	618b      	str	r3, [r1, #24]
 8001e08:	e018      	b.n	8001e3c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e0a:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a6a      	ldr	r2, [pc, #424]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7fe fe41 	bl	8000a9c <HAL_GetTick>
 8001e1a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001e1e:	f7fe fe3d 	bl	8000a9c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e3c1      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001e30:	4b61      	ldr	r3, [pc, #388]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f0      	bne.n	8001e1e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80a0 	beq.w	8001f8a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	2b10      	cmp	r3, #16
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_OscConfig+0x10c>
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	2b18      	cmp	r3, #24
 8001e54:	d109      	bne.n	8001e6a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f040 8092 	bne.w	8001f8a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e3a4      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e72:	d106      	bne.n	8001e82 <HAL_RCC_OscConfig+0x132>
 8001e74:	4b50      	ldr	r3, [pc, #320]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a4f      	ldr	r2, [pc, #316]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	e058      	b.n	8001f34 <HAL_RCC_OscConfig+0x1e4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d112      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x160>
 8001e8a:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a4a      	ldr	r2, [pc, #296]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001e90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b48      	ldr	r3, [pc, #288]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a47      	ldr	r2, [pc, #284]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001e9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b45      	ldr	r3, [pc, #276]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a44      	ldr	r2, [pc, #272]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001ea8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e041      	b.n	8001f34 <HAL_RCC_OscConfig+0x1e4>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eb8:	d112      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x190>
 8001eba:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a3e      	ldr	r2, [pc, #248]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a3b      	ldr	r2, [pc, #236]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001ecc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	4b39      	ldr	r3, [pc, #228]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a38      	ldr	r2, [pc, #224]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e029      	b.n	8001f34 <HAL_RCC_OscConfig+0x1e4>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001ee8:	d112      	bne.n	8001f10 <HAL_RCC_OscConfig+0x1c0>
 8001eea:	4b33      	ldr	r3, [pc, #204]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a32      	ldr	r2, [pc, #200]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	4b30      	ldr	r3, [pc, #192]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a2f      	ldr	r2, [pc, #188]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001efc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a2c      	ldr	r2, [pc, #176]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e011      	b.n	8001f34 <HAL_RCC_OscConfig+0x1e4>
 8001f10:	4b29      	ldr	r3, [pc, #164]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a28      	ldr	r2, [pc, #160]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b26      	ldr	r3, [pc, #152]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a25      	ldr	r2, [pc, #148]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b23      	ldr	r3, [pc, #140]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a22      	ldr	r2, [pc, #136]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001f2e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fdae 	bl	8000a9c <HAL_GetTick>
 8001f40:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f44:	f7fe fdaa 	bl	8000a9c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	@ 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e32e      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f56:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x1f4>
 8001f62:	e012      	b.n	8001f8a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7fe fd9a 	bl	8000a9c <HAL_GetTick>
 8001f68:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f6c:	f7fe fd96 	bl	8000a9c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	@ 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e31a      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb8 <HAL_RCC_OscConfig+0x268>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 809a 	beq.w	80020cc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_RCC_OscConfig+0x25a>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	2b18      	cmp	r3, #24
 8001fa2:	d149      	bne.n	8002038 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d146      	bne.n	8002038 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d104      	bne.n	8001fbc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e2fe      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
 8001fb6:	bf00      	nop
 8001fb8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d11c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001fc2:	4b9a      	ldr	r3, [pc, #616]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0218 	and.w	r2, r3, #24
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d014      	beq.n	8001ffc <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001fd2:	4b96      	ldr	r3, [pc, #600]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0218 	bic.w	r2, r3, #24
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	4993      	ldr	r1, [pc, #588]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001fe4:	f000 fdd0 	bl	8002b88 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fe8:	4b91      	ldr	r3, [pc, #580]	@ (8002230 <HAL_RCC_OscConfig+0x4e0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fccb 	bl	8000988 <HAL_InitTick>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e2db      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7fe fd4e 	bl	8000a9c <HAL_GetTick>
 8002000:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002004:	f7fe fd4a 	bl	8000a9c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e2ce      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002016:	4b85      	ldr	r3, [pc, #532]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002022:	4b82      	ldr	r3, [pc, #520]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	041b      	lsls	r3, r3, #16
 8002030:	497e      	ldr	r1, [pc, #504]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8002032:	4313      	orrs	r3, r2
 8002034:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002036:	e049      	b.n	80020cc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d02c      	beq.n	800209a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002040:	4b7a      	ldr	r3, [pc, #488]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f023 0218 	bic.w	r2, r3, #24
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	4977      	ldr	r1, [pc, #476]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002052:	4b76      	ldr	r3, [pc, #472]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a75      	ldr	r2, [pc, #468]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7fe fd1d 	bl	8000a9c <HAL_GetTick>
 8002062:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002066:	f7fe fd19 	bl	8000a9c <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e29d      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002078:	4b6c      	ldr	r3, [pc, #432]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002084:	4b69      	ldr	r3, [pc, #420]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	041b      	lsls	r3, r3, #16
 8002092:	4966      	ldr	r1, [pc, #408]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8002094:	4313      	orrs	r3, r2
 8002096:	610b      	str	r3, [r1, #16]
 8002098:	e018      	b.n	80020cc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209a:	4b64      	ldr	r3, [pc, #400]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a63      	ldr	r2, [pc, #396]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 80020a0:	f023 0301 	bic.w	r3, r3, #1
 80020a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7fe fcf9 	bl	8000a9c <HAL_GetTick>
 80020aa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80020ae:	f7fe fcf5 	bl	8000a9c <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e279      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020c0:	4b5a      	ldr	r3, [pc, #360]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f0      	bne.n	80020ae <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d03c      	beq.n	8002152 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01c      	beq.n	800211a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e0:	4b52      	ldr	r3, [pc, #328]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 80020e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020e6:	4a51      	ldr	r2, [pc, #324]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 80020e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80020ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7fe fcd4 	bl	8000a9c <HAL_GetTick>
 80020f4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80020f8:	f7fe fcd0 	bl	8000a9c <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e254      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800210a:	4b48      	ldr	r3, [pc, #288]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 800210c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0ef      	beq.n	80020f8 <HAL_RCC_OscConfig+0x3a8>
 8002118:	e01b      	b.n	8002152 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211a:	4b44      	ldr	r3, [pc, #272]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 800211c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002120:	4a42      	ldr	r2, [pc, #264]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8002122:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002126:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212a:	f7fe fcb7 	bl	8000a9c <HAL_GetTick>
 800212e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002132:	f7fe fcb3 	bl	8000a9c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e237      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002144:	4b39      	ldr	r3, [pc, #228]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8002146:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800214a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1ef      	bne.n	8002132 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80d2 	beq.w	8002304 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002160:	4b34      	ldr	r3, [pc, #208]	@ (8002234 <HAL_RCC_OscConfig+0x4e4>)
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d118      	bne.n	800219e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800216c:	4b31      	ldr	r3, [pc, #196]	@ (8002234 <HAL_RCC_OscConfig+0x4e4>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	4a30      	ldr	r2, [pc, #192]	@ (8002234 <HAL_RCC_OscConfig+0x4e4>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002178:	f7fe fc90 	bl	8000a9c <HAL_GetTick>
 800217c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002180:	f7fe fc8c 	bl	8000a9c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e210      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002192:	4b28      	ldr	r3, [pc, #160]	@ (8002234 <HAL_RCC_OscConfig+0x4e4>)
 8002194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d108      	bne.n	80021b8 <HAL_RCC_OscConfig+0x468>
 80021a6:	4b21      	ldr	r3, [pc, #132]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 80021a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021ac:	4a1f      	ldr	r2, [pc, #124]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021b6:	e074      	b.n	80022a2 <HAL_RCC_OscConfig+0x552>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d118      	bne.n	80021f2 <HAL_RCC_OscConfig+0x4a2>
 80021c0:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 80021c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021c6:	4a19      	ldr	r2, [pc, #100]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021d0:	4b16      	ldr	r3, [pc, #88]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 80021d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021d6:	4a15      	ldr	r2, [pc, #84]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 80021d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021e0:	4b12      	ldr	r3, [pc, #72]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 80021e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021e6:	4a11      	ldr	r2, [pc, #68]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 80021e8:	f023 0304 	bic.w	r3, r3, #4
 80021ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021f0:	e057      	b.n	80022a2 <HAL_RCC_OscConfig+0x552>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d11e      	bne.n	8002238 <HAL_RCC_OscConfig+0x4e8>
 80021fa:	4b0c      	ldr	r3, [pc, #48]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 80021fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002200:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800220a:	4b08      	ldr	r3, [pc, #32]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 800220c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002210:	4a06      	ldr	r2, [pc, #24]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8002212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002216:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800221a:	4b04      	ldr	r3, [pc, #16]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 800221c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002220:	4a02      	ldr	r2, [pc, #8]	@ (800222c <HAL_RCC_OscConfig+0x4dc>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800222a:	e03a      	b.n	80022a2 <HAL_RCC_OscConfig+0x552>
 800222c:	44020c00 	.word	0x44020c00
 8002230:	20000004 	.word	0x20000004
 8002234:	44020800 	.word	0x44020800
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b85      	cmp	r3, #133	@ 0x85
 800223e:	d118      	bne.n	8002272 <HAL_RCC_OscConfig+0x522>
 8002240:	4ba2      	ldr	r3, [pc, #648]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002242:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002246:	4aa1      	ldr	r2, [pc, #644]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002250:	4b9e      	ldr	r3, [pc, #632]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002256:	4a9d      	ldr	r2, [pc, #628]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800225c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002260:	4b9a      	ldr	r3, [pc, #616]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002266:	4a99      	ldr	r2, [pc, #612]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002270:	e017      	b.n	80022a2 <HAL_RCC_OscConfig+0x552>
 8002272:	4b96      	ldr	r3, [pc, #600]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002278:	4a94      	ldr	r2, [pc, #592]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002282:	4b92      	ldr	r3, [pc, #584]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002288:	4a90      	ldr	r2, [pc, #576]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 800228a:	f023 0304 	bic.w	r3, r3, #4
 800228e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002292:	4b8e      	ldr	r3, [pc, #568]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002298:	4a8c      	ldr	r2, [pc, #560]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 800229a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800229e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d016      	beq.n	80022d8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022aa:	f7fe fbf7 	bl	8000a9c <HAL_GetTick>
 80022ae:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b0:	e00a      	b.n	80022c8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7fe fbf3 	bl	8000a9c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e175      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c8:	4b80      	ldr	r3, [pc, #512]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 80022ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0ed      	beq.n	80022b2 <HAL_RCC_OscConfig+0x562>
 80022d6:	e015      	b.n	8002304 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d8:	f7fe fbe0 	bl	8000a9c <HAL_GetTick>
 80022dc:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e0:	f7fe fbdc 	bl	8000a9c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e15e      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f6:	4b75      	ldr	r3, [pc, #468]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 80022f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ed      	bne.n	80022e0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b00      	cmp	r3, #0
 800230e:	d036      	beq.n	800237e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002314:	2b00      	cmp	r3, #0
 8002316:	d019      	beq.n	800234c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002318:	4b6c      	ldr	r3, [pc, #432]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a6b      	ldr	r2, [pc, #428]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 800231e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002322:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7fe fbba 	bl	8000a9c <HAL_GetTick>
 8002328:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800232c:	f7fe fbb6 	bl	8000a9c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e13a      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800233e:	4b63      	ldr	r3, [pc, #396]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x5dc>
 800234a:	e018      	b.n	800237e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800234c:	4b5f      	ldr	r3, [pc, #380]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a5e      	ldr	r2, [pc, #376]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002352:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002356:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7fe fba0 	bl	8000a9c <HAL_GetTick>
 800235c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002360:	f7fe fb9c 	bl	8000a9c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e120      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002372:	4b56      	ldr	r3, [pc, #344]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 8115 	beq.w	80025b2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2b18      	cmp	r3, #24
 800238c:	f000 80af 	beq.w	80024ee <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002394:	2b02      	cmp	r3, #2
 8002396:	f040 8086 	bne.w	80024a6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800239a:	4b4c      	ldr	r3, [pc, #304]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a4b      	ldr	r2, [pc, #300]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 80023a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7fe fb79 	bl	8000a9c <HAL_GetTick>
 80023aa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80023ae:	f7fe fb75 	bl	8000a9c <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0f9      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80023c0:	4b42      	ldr	r3, [pc, #264]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80023cc:	4b3f      	ldr	r3, [pc, #252]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 80023ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80023d4:	f023 0303 	bic.w	r3, r3, #3
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023e0:	0212      	lsls	r2, r2, #8
 80023e2:	430a      	orrs	r2, r1
 80023e4:	4939      	ldr	r1, [pc, #228]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	628b      	str	r3, [r1, #40]	@ 0x28
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ee:	3b01      	subs	r3, #1
 80023f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f8:	3b01      	subs	r3, #1
 80023fa:	025b      	lsls	r3, r3, #9
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002404:	3b01      	subs	r3, #1
 8002406:	041b      	lsls	r3, r3, #16
 8002408:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	3b01      	subs	r3, #1
 8002414:	061b      	lsls	r3, r3, #24
 8002416:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800241a:	492c      	ldr	r1, [pc, #176]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 800241c:	4313      	orrs	r3, r2
 800241e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002420:	4b2a      	ldr	r3, [pc, #168]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002424:	4a29      	ldr	r2, [pc, #164]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002426:	f023 0310 	bic.w	r3, r3, #16
 800242a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002430:	4a26      	ldr	r2, [pc, #152]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002436:	4b25      	ldr	r3, [pc, #148]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243a:	4a24      	ldr	r2, [pc, #144]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 800243c:	f043 0310 	orr.w	r3, r3, #16
 8002440:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002442:	4b22      	ldr	r3, [pc, #136]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002446:	f023 020c 	bic.w	r2, r3, #12
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244e:	491f      	ldr	r1, [pc, #124]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002450:	4313      	orrs	r3, r2
 8002452:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002454:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002458:	f023 0220 	bic.w	r2, r3, #32
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002460:	491a      	ldr	r1, [pc, #104]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002462:	4313      	orrs	r3, r2
 8002464:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002466:	4b19      	ldr	r3, [pc, #100]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246a:	4a18      	ldr	r2, [pc, #96]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002470:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002472:	4b16      	ldr	r3, [pc, #88]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a15      	ldr	r2, [pc, #84]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 8002478:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800247c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247e:	f7fe fb0d 	bl	8000a9c <HAL_GetTick>
 8002482:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002486:	f7fe fb09 	bl	8000a9c <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e08d      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002498:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x736>
 80024a4:	e085      	b.n	80025b2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a08      	ldr	r2, [pc, #32]	@ (80024cc <HAL_RCC_OscConfig+0x77c>)
 80024ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe faf3 	bl	8000a9c <HAL_GetTick>
 80024b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80024b8:	e00a      	b.n	80024d0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80024ba:	f7fe faef 	bl	8000a9c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d903      	bls.n	80024d0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e073      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
 80024cc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80024d0:	4b3a      	ldr	r3, [pc, #232]	@ (80025bc <HAL_RCC_OscConfig+0x86c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1ee      	bne.n	80024ba <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80024dc:	4b37      	ldr	r3, [pc, #220]	@ (80025bc <HAL_RCC_OscConfig+0x86c>)
 80024de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e0:	4a36      	ldr	r2, [pc, #216]	@ (80025bc <HAL_RCC_OscConfig+0x86c>)
 80024e2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	6293      	str	r3, [r2, #40]	@ 0x28
 80024ec:	e061      	b.n	80025b2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80024ee:	4b33      	ldr	r3, [pc, #204]	@ (80025bc <HAL_RCC_OscConfig+0x86c>)
 80024f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024f4:	4b31      	ldr	r3, [pc, #196]	@ (80025bc <HAL_RCC_OscConfig+0x86c>)
 80024f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024f8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d031      	beq.n	8002566 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f003 0203 	and.w	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d12a      	bne.n	8002566 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d122      	bne.n	8002566 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800252a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d11a      	bne.n	8002566 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	0a5b      	lsrs	r3, r3, #9
 8002534:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800253c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d111      	bne.n	8002566 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d108      	bne.n	8002566 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	0e1b      	lsrs	r3, r3, #24
 8002558:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e024      	b.n	80025b4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800256a:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <HAL_RCC_OscConfig+0x86c>)
 800256c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256e:	08db      	lsrs	r3, r3, #3
 8002570:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002578:	429a      	cmp	r2, r3
 800257a:	d01a      	beq.n	80025b2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800257c:	4b0f      	ldr	r3, [pc, #60]	@ (80025bc <HAL_RCC_OscConfig+0x86c>)
 800257e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002580:	4a0e      	ldr	r2, [pc, #56]	@ (80025bc <HAL_RCC_OscConfig+0x86c>)
 8002582:	f023 0310 	bic.w	r3, r3, #16
 8002586:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fa88 	bl	8000a9c <HAL_GetTick>
 800258c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800258e:	bf00      	nop
 8002590:	f7fe fa84 	bl	8000a9c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	4293      	cmp	r3, r2
 800259a:	d0f9      	beq.n	8002590 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a0:	4a06      	ldr	r2, [pc, #24]	@ (80025bc <HAL_RCC_OscConfig+0x86c>)
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80025a6:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <HAL_RCC_OscConfig+0x86c>)
 80025a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025aa:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <HAL_RCC_OscConfig+0x86c>)
 80025ac:	f043 0310 	orr.w	r3, r3, #16
 80025b0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3720      	adds	r7, #32
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	44020c00 	.word	0x44020c00

080025c0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e19e      	b.n	8002912 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	4b83      	ldr	r3, [pc, #524]	@ (80027e4 <HAL_RCC_ClockConfig+0x224>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d910      	bls.n	8002604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b80      	ldr	r3, [pc, #512]	@ (80027e4 <HAL_RCC_ClockConfig+0x224>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 020f 	bic.w	r2, r3, #15
 80025ea:	497e      	ldr	r1, [pc, #504]	@ (80027e4 <HAL_RCC_ClockConfig+0x224>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b7c      	ldr	r3, [pc, #496]	@ (80027e4 <HAL_RCC_ClockConfig+0x224>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e186      	b.n	8002912 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b00      	cmp	r3, #0
 800260e:	d012      	beq.n	8002636 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	4b74      	ldr	r3, [pc, #464]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800261e:	429a      	cmp	r2, r3
 8002620:	d909      	bls.n	8002636 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002622:	4b71      	ldr	r3, [pc, #452]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	496d      	ldr	r1, [pc, #436]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 8002632:	4313      	orrs	r3, r2
 8002634:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d012      	beq.n	8002668 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	4b68      	ldr	r3, [pc, #416]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002650:	429a      	cmp	r2, r3
 8002652:	d909      	bls.n	8002668 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002654:	4b64      	ldr	r3, [pc, #400]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	4961      	ldr	r1, [pc, #388]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 8002664:	4313      	orrs	r3, r2
 8002666:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d010      	beq.n	8002696 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	4b5b      	ldr	r3, [pc, #364]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002680:	429a      	cmp	r2, r3
 8002682:	d908      	bls.n	8002696 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002684:	4b58      	ldr	r3, [pc, #352]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4955      	ldr	r1, [pc, #340]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 8002692:	4313      	orrs	r3, r2
 8002694:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d010      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	4b50      	ldr	r3, [pc, #320]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d908      	bls.n	80026c4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80026b2:	4b4d      	ldr	r3, [pc, #308]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	f023 020f 	bic.w	r2, r3, #15
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	494a      	ldr	r1, [pc, #296]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8093 	beq.w	80027f8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80026da:	4b43      	ldr	r3, [pc, #268]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d121      	bne.n	800272a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e113      	b.n	8002912 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f2:	4b3d      	ldr	r3, [pc, #244]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d115      	bne.n	800272a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e107      	b.n	8002912 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800270a:	4b37      	ldr	r3, [pc, #220]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0fb      	b.n	8002912 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800271a:	4b33      	ldr	r3, [pc, #204]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0f3      	b.n	8002912 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800272a:	4b2f      	ldr	r3, [pc, #188]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f023 0203 	bic.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	492c      	ldr	r1, [pc, #176]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 8002738:	4313      	orrs	r3, r2
 800273a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800273c:	f7fe f9ae 	bl	8000a9c <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d112      	bne.n	8002770 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274a:	e00a      	b.n	8002762 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800274c:	f7fe f9a6 	bl	8000a9c <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e0d7      	b.n	8002912 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002762:	4b21      	ldr	r3, [pc, #132]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f003 0318 	and.w	r3, r3, #24
 800276a:	2b18      	cmp	r3, #24
 800276c:	d1ee      	bne.n	800274c <HAL_RCC_ClockConfig+0x18c>
 800276e:	e043      	b.n	80027f8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d112      	bne.n	800279e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800277a:	f7fe f98f 	bl	8000a9c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0c0      	b.n	8002912 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002790:	4b15      	ldr	r3, [pc, #84]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	f003 0318 	and.w	r3, r3, #24
 8002798:	2b10      	cmp	r3, #16
 800279a:	d1ee      	bne.n	800277a <HAL_RCC_ClockConfig+0x1ba>
 800279c:	e02c      	b.n	80027f8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d122      	bne.n	80027ec <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7fe f978 	bl	8000a9c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0a9      	b.n	8002912 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80027be:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <HAL_RCC_ClockConfig+0x228>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f003 0318 	and.w	r3, r3, #24
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d1ee      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x1e8>
 80027ca:	e015      	b.n	80027f8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80027cc:	f7fe f966 	bl	8000a9c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d906      	bls.n	80027ec <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e097      	b.n	8002912 <HAL_RCC_ClockConfig+0x352>
 80027e2:	bf00      	nop
 80027e4:	40022000 	.word	0x40022000
 80027e8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ec:	4b4b      	ldr	r3, [pc, #300]	@ (800291c <HAL_RCC_ClockConfig+0x35c>)
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f003 0318 	and.w	r3, r3, #24
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e9      	bne.n	80027cc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d010      	beq.n	8002826 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	4b44      	ldr	r3, [pc, #272]	@ (800291c <HAL_RCC_ClockConfig+0x35c>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	429a      	cmp	r2, r3
 8002812:	d208      	bcs.n	8002826 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002814:	4b41      	ldr	r3, [pc, #260]	@ (800291c <HAL_RCC_ClockConfig+0x35c>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f023 020f 	bic.w	r2, r3, #15
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	493e      	ldr	r1, [pc, #248]	@ (800291c <HAL_RCC_ClockConfig+0x35c>)
 8002822:	4313      	orrs	r3, r2
 8002824:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002826:	4b3e      	ldr	r3, [pc, #248]	@ (8002920 <HAL_RCC_ClockConfig+0x360>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d210      	bcs.n	8002856 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002834:	4b3a      	ldr	r3, [pc, #232]	@ (8002920 <HAL_RCC_ClockConfig+0x360>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f023 020f 	bic.w	r2, r3, #15
 800283c:	4938      	ldr	r1, [pc, #224]	@ (8002920 <HAL_RCC_ClockConfig+0x360>)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002844:	4b36      	ldr	r3, [pc, #216]	@ (8002920 <HAL_RCC_ClockConfig+0x360>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d001      	beq.n	8002856 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e05d      	b.n	8002912 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b00      	cmp	r3, #0
 8002860:	d010      	beq.n	8002884 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	4b2d      	ldr	r3, [pc, #180]	@ (800291c <HAL_RCC_ClockConfig+0x35c>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800286e:	429a      	cmp	r2, r3
 8002870:	d208      	bcs.n	8002884 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002872:	4b2a      	ldr	r3, [pc, #168]	@ (800291c <HAL_RCC_ClockConfig+0x35c>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	4927      	ldr	r1, [pc, #156]	@ (800291c <HAL_RCC_ClockConfig+0x35c>)
 8002880:	4313      	orrs	r3, r2
 8002882:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	4b21      	ldr	r3, [pc, #132]	@ (800291c <HAL_RCC_ClockConfig+0x35c>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800289e:	429a      	cmp	r2, r3
 80028a0:	d209      	bcs.n	80028b6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80028a2:	4b1e      	ldr	r3, [pc, #120]	@ (800291c <HAL_RCC_ClockConfig+0x35c>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	491a      	ldr	r1, [pc, #104]	@ (800291c <HAL_RCC_ClockConfig+0x35c>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d012      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <HAL_RCC_ClockConfig+0x35c>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d209      	bcs.n	80028e8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80028d4:	4b11      	ldr	r3, [pc, #68]	@ (800291c <HAL_RCC_ClockConfig+0x35c>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	490e      	ldr	r1, [pc, #56]	@ (800291c <HAL_RCC_ClockConfig+0x35c>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80028e8:	f000 f822 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <HAL_RCC_ClockConfig+0x35c>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	490b      	ldr	r1, [pc, #44]	@ (8002924 <HAL_RCC_ClockConfig+0x364>)
 80028f8:	5ccb      	ldrb	r3, [r1, r3]
 80028fa:	fa22 f303 	lsr.w	r3, r2, r3
 80028fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002928 <HAL_RCC_ClockConfig+0x368>)
 8002900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002902:	4b0a      	ldr	r3, [pc, #40]	@ (800292c <HAL_RCC_ClockConfig+0x36c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe f83e 	bl	8000988 <HAL_InitTick>
 800290c:	4603      	mov	r3, r0
 800290e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002910:	7afb      	ldrb	r3, [r7, #11]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	44020c00 	.word	0x44020c00
 8002920:	40022000 	.word	0x40022000
 8002924:	08004240 	.word	0x08004240
 8002928:	20000000 	.word	0x20000000
 800292c:	20000004 	.word	0x20000004

08002930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	@ 0x24
 8002934:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002936:	4b8c      	ldr	r3, [pc, #560]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 0318 	and.w	r3, r3, #24
 800293e:	2b08      	cmp	r3, #8
 8002940:	d102      	bne.n	8002948 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002942:	4b8a      	ldr	r3, [pc, #552]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x23c>)
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	e107      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002948:	4b87      	ldr	r3, [pc, #540]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	f003 0318 	and.w	r3, r3, #24
 8002950:	2b00      	cmp	r3, #0
 8002952:	d112      	bne.n	800297a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002954:	4b84      	ldr	r3, [pc, #528]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d009      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002960:	4b81      	ldr	r3, [pc, #516]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	08db      	lsrs	r3, r3, #3
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	4a81      	ldr	r2, [pc, #516]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x240>)
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	e0f1      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002974:	4b7e      	ldr	r3, [pc, #504]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x240>)
 8002976:	61fb      	str	r3, [r7, #28]
 8002978:	e0ee      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800297a:	4b7b      	ldr	r3, [pc, #492]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f003 0318 	and.w	r3, r3, #24
 8002982:	2b10      	cmp	r3, #16
 8002984:	d102      	bne.n	800298c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002986:	4b7b      	ldr	r3, [pc, #492]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x244>)
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	e0e5      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800298c:	4b76      	ldr	r3, [pc, #472]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	f003 0318 	and.w	r3, r3, #24
 8002994:	2b18      	cmp	r3, #24
 8002996:	f040 80dd 	bne.w	8002b54 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800299a:	4b73      	ldr	r3, [pc, #460]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 800299c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80029a4:	4b70      	ldr	r3, [pc, #448]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 80029a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a8:	0a1b      	lsrs	r3, r3, #8
 80029aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80029b0:	4b6d      	ldr	r3, [pc, #436]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 80029b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80029bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 80029be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80029c0:	08db      	lsrs	r3, r3, #3
 80029c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	ee07 3a90 	vmov	s15, r3
 80029d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 80b7 	beq.w	8002b4e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d003      	beq.n	80029ee <HAL_RCC_GetSysClockFreq+0xbe>
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d056      	beq.n	8002a9a <HAL_RCC_GetSysClockFreq+0x16a>
 80029ec:	e077      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80029ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d02d      	beq.n	8002a56 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80029fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	08db      	lsrs	r3, r3, #3
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	4a5a      	ldr	r2, [pc, #360]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x240>)
 8002a06:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a24:	4b50      	ldr	r3, [pc, #320]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2c:	ee07 3a90 	vmov	s15, r3
 8002a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a34:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a38:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002b78 <HAL_RCC_GetSysClockFreq+0x248>
 8002a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a50:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002a54:	e065      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	ee07 3a90 	vmov	s15, r3
 8002a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a60:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002b7c <HAL_RCC_GetSysClockFreq+0x24c>
 8002a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a68:	4b3f      	ldr	r3, [pc, #252]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a78:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a7c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002b78 <HAL_RCC_GetSysClockFreq+0x248>
 8002a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a94:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002a98:	e043      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	ee07 3a90 	vmov	s15, r3
 8002aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002b80 <HAL_RCC_GetSysClockFreq+0x250>
 8002aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aac:	4b2e      	ldr	r3, [pc, #184]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8002aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab4:	ee07 3a90 	vmov	s15, r3
 8002ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002abc:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ac0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002b78 <HAL_RCC_GetSysClockFreq+0x248>
 8002ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002acc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002adc:	e021      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	ee07 3a90 	vmov	s15, r3
 8002ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002b84 <HAL_RCC_GetSysClockFreq+0x254>
 8002aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002af0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8002af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af8:	ee07 3a90 	vmov	s15, r3
 8002afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b00:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b04:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002b78 <HAL_RCC_GetSysClockFreq+0x248>
 8002b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002b20:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002b22:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b26:	0a5b      	lsrs	r3, r3, #9
 8002b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b3a:	edd7 6a06 	vldr	s13, [r7, #24]
 8002b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b46:	ee17 3a90 	vmov	r3, s15
 8002b4a:	61fb      	str	r3, [r7, #28]
 8002b4c:	e004      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	e001      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002b54:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x240>)
 8002b56:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002b58:	69fb      	ldr	r3, [r7, #28]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3724      	adds	r7, #36	@ 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	44020c00 	.word	0x44020c00
 8002b6c:	003d0900 	.word	0x003d0900
 8002b70:	03d09000 	.word	0x03d09000
 8002b74:	017d7840 	.word	0x017d7840
 8002b78:	46000000 	.word	0x46000000
 8002b7c:	4c742400 	.word	0x4c742400
 8002b80:	4bbebc20 	.word	0x4bbebc20
 8002b84:	4a742400 	.word	0x4a742400

08002b88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002b8c:	f7ff fed0 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b08      	ldr	r3, [pc, #32]	@ (8002bb4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002b96:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002b9a:	4907      	ldr	r1, [pc, #28]	@ (8002bb8 <HAL_RCC_GetHCLKFreq+0x30>)
 8002b9c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002b9e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba6:	4a05      	ldr	r2, [pc, #20]	@ (8002bbc <HAL_RCC_GetHCLKFreq+0x34>)
 8002ba8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002baa:	4b04      	ldr	r3, [pc, #16]	@ (8002bbc <HAL_RCC_GetHCLKFreq+0x34>)
 8002bac:	681b      	ldr	r3, [r3, #0]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	44020c00 	.word	0x44020c00
 8002bb8:	08004240 	.word	0x08004240
 8002bbc:	20000000 	.word	0x20000000

08002bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc4:	b0ba      	sub	sp, #232	@ 0xe8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002be4:	2500      	movs	r5, #0
 8002be6:	ea54 0305 	orrs.w	r3, r4, r5
 8002bea:	d00b      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002bec:	4bcd      	ldr	r3, [pc, #820]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002bee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002bf2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfc:	4ac9      	ldr	r2, [pc, #804]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002bfe:	430b      	orrs	r3, r1
 8002c00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0c:	f002 0801 	and.w	r8, r2, #1
 8002c10:	f04f 0900 	mov.w	r9, #0
 8002c14:	ea58 0309 	orrs.w	r3, r8, r9
 8002c18:	d042      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d823      	bhi.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002c24:	a201      	add	r2, pc, #4	@ (adr r2, 8002c2c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c75 	.word	0x08002c75
 8002c30:	08002c45 	.word	0x08002c45
 8002c34:	08002c59 	.word	0x08002c59
 8002c38:	08002c75 	.word	0x08002c75
 8002c3c:	08002c75 	.word	0x08002c75
 8002c40:	08002c75 	.word	0x08002c75
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c48:	3308      	adds	r3, #8
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 f978 	bl	8003f40 <RCCEx_PLL2_Config>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002c56:	e00e      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c5c:	3330      	adds	r3, #48	@ 0x30
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 fa06 	bl	8004070 <RCCEx_PLL3_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002c6a:	e004      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002c72:	e000      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c76:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002c7e:	4ba9      	ldr	r3, [pc, #676]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002c80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c84:	f023 0107 	bic.w	r1, r3, #7
 8002c88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8e:	4aa5      	ldr	r2, [pc, #660]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002c90:	430b      	orrs	r3, r1
 8002c92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002c96:	e003      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c98:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002c9c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ca0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	f002 0a02 	and.w	sl, r2, #2
 8002cac:	f04f 0b00 	mov.w	fp, #0
 8002cb0:	ea5a 030b 	orrs.w	r3, sl, fp
 8002cb4:	f000 8088 	beq.w	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002cb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cbe:	2b28      	cmp	r3, #40	@ 0x28
 8002cc0:	d868      	bhi.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002d9d 	.word	0x08002d9d
 8002ccc:	08002d95 	.word	0x08002d95
 8002cd0:	08002d95 	.word	0x08002d95
 8002cd4:	08002d95 	.word	0x08002d95
 8002cd8:	08002d95 	.word	0x08002d95
 8002cdc:	08002d95 	.word	0x08002d95
 8002ce0:	08002d95 	.word	0x08002d95
 8002ce4:	08002d95 	.word	0x08002d95
 8002ce8:	08002d6d 	.word	0x08002d6d
 8002cec:	08002d95 	.word	0x08002d95
 8002cf0:	08002d95 	.word	0x08002d95
 8002cf4:	08002d95 	.word	0x08002d95
 8002cf8:	08002d95 	.word	0x08002d95
 8002cfc:	08002d95 	.word	0x08002d95
 8002d00:	08002d95 	.word	0x08002d95
 8002d04:	08002d95 	.word	0x08002d95
 8002d08:	08002d81 	.word	0x08002d81
 8002d0c:	08002d95 	.word	0x08002d95
 8002d10:	08002d95 	.word	0x08002d95
 8002d14:	08002d95 	.word	0x08002d95
 8002d18:	08002d95 	.word	0x08002d95
 8002d1c:	08002d95 	.word	0x08002d95
 8002d20:	08002d95 	.word	0x08002d95
 8002d24:	08002d95 	.word	0x08002d95
 8002d28:	08002d9d 	.word	0x08002d9d
 8002d2c:	08002d95 	.word	0x08002d95
 8002d30:	08002d95 	.word	0x08002d95
 8002d34:	08002d95 	.word	0x08002d95
 8002d38:	08002d95 	.word	0x08002d95
 8002d3c:	08002d95 	.word	0x08002d95
 8002d40:	08002d95 	.word	0x08002d95
 8002d44:	08002d95 	.word	0x08002d95
 8002d48:	08002d9d 	.word	0x08002d9d
 8002d4c:	08002d95 	.word	0x08002d95
 8002d50:	08002d95 	.word	0x08002d95
 8002d54:	08002d95 	.word	0x08002d95
 8002d58:	08002d95 	.word	0x08002d95
 8002d5c:	08002d95 	.word	0x08002d95
 8002d60:	08002d95 	.word	0x08002d95
 8002d64:	08002d95 	.word	0x08002d95
 8002d68:	08002d9d 	.word	0x08002d9d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d70:	3308      	adds	r3, #8
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 f8e4 	bl	8003f40 <RCCEx_PLL2_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002d7e:	e00e      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d84:	3330      	adds	r3, #48	@ 0x30
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 f972 	bl	8004070 <RCCEx_PLL3_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002d92:	e004      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002d9a:	e000      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002da6:	4b5f      	ldr	r3, [pc, #380]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002da8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002dac:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002db0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002db8:	430b      	orrs	r3, r1
 8002dba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002dbe:	e003      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002dc4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	f002 0304 	and.w	r3, r2, #4
 8002dd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002dde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002de2:	460b      	mov	r3, r1
 8002de4:	4313      	orrs	r3, r2
 8002de6:	d04e      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002de8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dee:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002df2:	d02c      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002df4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002df8:	d825      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dfe:	d028      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e04:	d81f      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002e06:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e08:	d025      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002e0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e0c:	d81b      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002e0e:	2b80      	cmp	r3, #128	@ 0x80
 8002e10:	d00f      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002e12:	2b80      	cmp	r3, #128	@ 0x80
 8002e14:	d817      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01f      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002e1a:	2b40      	cmp	r3, #64	@ 0x40
 8002e1c:	d113      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e22:	3308      	adds	r3, #8
 8002e24:	4618      	mov	r0, r3
 8002e26:	f001 f88b 	bl	8003f40 <RCCEx_PLL2_Config>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002e30:	e014      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e36:	3330      	adds	r3, #48	@ 0x30
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f001 f919 	bl	8004070 <RCCEx_PLL3_Config>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002e44:	e00a      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002e4c:	e006      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002e4e:	bf00      	nop
 8002e50:	e004      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002e52:	bf00      	nop
 8002e54:	e002      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002e56:	bf00      	nop
 8002e58:	e000      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10c      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002e64:	4b2f      	ldr	r3, [pc, #188]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e6a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002e6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e74:	4a2b      	ldr	r2, [pc, #172]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e76:	430b      	orrs	r3, r1
 8002e78:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002e7c:	e003      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e82:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8e:	f002 0308 	and.w	r3, r2, #8
 8002e92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e96:	2300      	movs	r3, #0
 8002e98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	d056      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002eaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eac:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002eb0:	d031      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002eb2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002eb6:	d82a      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ebc:	d02d      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002ebe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ec2:	d824      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002ec4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002ec8:	d029      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002eca:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002ece:	d81e      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed4:	d011      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eda:	d818      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d023      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ee4:	d113      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002eea:	3308      	adds	r3, #8
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 f827 	bl	8003f40 <RCCEx_PLL2_Config>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8002ef8:	e017      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002efe:	3330      	adds	r3, #48	@ 0x30
 8002f00:	4618      	mov	r0, r3
 8002f02:	f001 f8b5 	bl	8004070 <RCCEx_PLL3_Config>
 8002f06:	4603      	mov	r3, r0
 8002f08:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8002f0c:	e00d      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002f14:	e009      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002f16:	bf00      	nop
 8002f18:	e007      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002f1a:	bf00      	nop
 8002f1c:	e005      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002f1e:	bf00      	nop
 8002f20:	e003      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002f22:	bf00      	nop
 8002f24:	44020c00 	.word	0x44020c00
        break;
 8002f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f2a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002f32:	4bb9      	ldr	r3, [pc, #740]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f38:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8002f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f42:	4ab5      	ldr	r2, [pc, #724]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f44:	430b      	orrs	r3, r1
 8002f46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002f4a:	e003      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f50:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	f002 0310 	and.w	r3, r2, #16
 8002f60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002f6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4313      	orrs	r3, r2
 8002f72:	d053      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002f74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f7a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002f7e:	d031      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002f80:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002f84:	d82a      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002f86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f8a:	d02d      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002f8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f90:	d824      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002f92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f96:	d029      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002f98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f9c:	d81e      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fa2:	d011      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002fa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fa8:	d818      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d020      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb2:	d113      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fb8:	3308      	adds	r3, #8
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 ffc0 	bl	8003f40 <RCCEx_PLL2_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002fc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fcc:	3330      	adds	r3, #48	@ 0x30
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f001 f84e 	bl	8004070 <RCCEx_PLL3_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002fe2:	e006      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002fe4:	bf00      	nop
 8002fe6:	e004      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002fe8:	bf00      	nop
 8002fea:	e002      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002fec:	bf00      	nop
 8002fee:	e000      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ff2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002ffa:	4b87      	ldr	r3, [pc, #540]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002ffc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003000:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003004:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800300a:	4a83      	ldr	r2, [pc, #524]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800300c:	430b      	orrs	r3, r1
 800300e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003012:	e003      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003014:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003018:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800301c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	f002 0320 	and.w	r3, r2, #32
 8003028:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800302c:	2300      	movs	r3, #0
 800302e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003032:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003036:	460b      	mov	r3, r1
 8003038:	4313      	orrs	r3, r2
 800303a:	d053      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800303c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003042:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003046:	d031      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003048:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800304c:	d82a      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800304e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003052:	d02d      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003054:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003058:	d824      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800305a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800305e:	d029      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003060:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003064:	d81e      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003066:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800306a:	d011      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003070:	d818      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d020      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003076:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800307a:	d113      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800307c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003080:	3308      	adds	r3, #8
 8003082:	4618      	mov	r0, r3
 8003084:	f000 ff5c 	bl	8003f40 <RCCEx_PLL2_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 800308e:	e014      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003090:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003094:	3330      	adds	r3, #48	@ 0x30
 8003096:	4618      	mov	r0, r3
 8003098:	f000 ffea 	bl	8004070 <RCCEx_PLL3_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80030a2:	e00a      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80030aa:	e006      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80030ac:	bf00      	nop
 80030ae:	e004      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80030b0:	bf00      	nop
 80030b2:	e002      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80030b4:	bf00      	nop
 80030b6:	e000      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80030b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10c      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80030c2:	4b55      	ldr	r3, [pc, #340]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80030c8:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80030cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d2:	4a51      	ldr	r2, [pc, #324]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030d4:	430b      	orrs	r3, r1
 80030d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80030da:	e003      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030e0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ec:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80030f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030fa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030fe:	460b      	mov	r3, r1
 8003100:	4313      	orrs	r3, r2
 8003102:	d053      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003104:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800310a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800310e:	d031      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003110:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003114:	d82a      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003116:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800311a:	d02d      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800311c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003120:	d824      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003122:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003126:	d029      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003128:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800312c:	d81e      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800312e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003132:	d011      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003134:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003138:	d818      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800313a:	2b00      	cmp	r3, #0
 800313c:	d020      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800313e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003142:	d113      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003144:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003148:	3308      	adds	r3, #8
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fef8 	bl	8003f40 <RCCEx_PLL2_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003156:	e014      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003158:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800315c:	3330      	adds	r3, #48	@ 0x30
 800315e:	4618      	mov	r0, r3
 8003160:	f000 ff86 	bl	8004070 <RCCEx_PLL3_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800316a:	e00a      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003172:	e006      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003174:	bf00      	nop
 8003176:	e004      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003178:	bf00      	nop
 800317a:	e002      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800317c:	bf00      	nop
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003182:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800318a:	4b23      	ldr	r3, [pc, #140]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800318c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003190:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800319a:	4a1f      	ldr	r2, [pc, #124]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800319c:	430b      	orrs	r3, r1
 800319e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031a2:	e003      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031a8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80031b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80031c2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4313      	orrs	r3, r2
 80031ca:	d03d      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80031cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031d6:	d01b      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80031d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031dc:	d814      	bhi.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80031de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031e2:	d017      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x654>
 80031e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031e8:	d80e      	bhi.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d016      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80031ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f2:	d109      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031f8:	3330      	adds	r3, #48	@ 0x30
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 ff38 	bl	8004070 <RCCEx_PLL3_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003206:	e00a      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800320e:	e006      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8003210:	bf00      	nop
 8003212:	e004      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8003214:	bf00      	nop
 8003216:	e002      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8003218:	44020c00 	.word	0x44020c00
        break;
 800321c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800321e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10c      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003226:	4b99      	ldr	r3, [pc, #612]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003228:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800322c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003230:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003234:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003236:	4a95      	ldr	r2, [pc, #596]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003238:	430b      	orrs	r3, r1
 800323a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800323e:	e003      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003240:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003244:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003248:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003254:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003258:	2300      	movs	r3, #0
 800325a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800325e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003262:	460b      	mov	r3, r1
 8003264:	4313      	orrs	r3, r2
 8003266:	d03b      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003268:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800326c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800326e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003272:	d01b      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8003274:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003278:	d814      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800327a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800327e:	d017      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8003280:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003284:	d80e      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d014      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800328a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800328e:	d109      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003294:	3330      	adds	r3, #48	@ 0x30
 8003296:	4618      	mov	r0, r3
 8003298:	f000 feea 	bl	8004070 <RCCEx_PLL3_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80032a2:	e008      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80032aa:	e004      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80032ac:	bf00      	nop
 80032ae:	e002      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80032b0:	bf00      	nop
 80032b2:	e000      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80032b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80032be:	4b73      	ldr	r3, [pc, #460]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032c4:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80032c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032ce:	4a6f      	ldr	r2, [pc, #444]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032d0:	430b      	orrs	r3, r1
 80032d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80032d6:	e003      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80032dc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80032ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032f0:	2300      	movs	r3, #0
 80032f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80032f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80032fa:	460b      	mov	r3, r1
 80032fc:	4313      	orrs	r3, r2
 80032fe:	d03d      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003300:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003308:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800330c:	d01b      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x786>
 800330e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003312:	d814      	bhi.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003314:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003318:	d017      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800331a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800331e:	d80e      	bhi.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003320:	2b00      	cmp	r3, #0
 8003322:	d014      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8003324:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003328:	d109      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800332a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800332e:	3330      	adds	r3, #48	@ 0x30
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fe9d 	bl	8004070 <RCCEx_PLL3_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 800333c:	e008      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003344:	e004      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8003346:	bf00      	nop
 8003348:	e002      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800334a:	bf00      	nop
 800334c:	e000      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800334e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003350:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10d      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003358:	4b4c      	ldr	r3, [pc, #304]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800335a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800335e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800336a:	4a48      	ldr	r2, [pc, #288]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800336c:	430b      	orrs	r3, r1
 800336e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003372:	e003      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003378:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800337c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003388:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003392:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003396:	460b      	mov	r3, r1
 8003398:	4313      	orrs	r3, r2
 800339a:	d035      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800339c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033a8:	d015      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80033aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033ae:	d80e      	bhi.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d012      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80033b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033b8:	d109      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033be:	3330      	adds	r3, #48	@ 0x30
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fe55 	bl	8004070 <RCCEx_PLL3_Config>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80033cc:	e006      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80033d4:	e002      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80033d6:	bf00      	nop
 80033d8:	e000      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80033da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80033e4:	4b29      	ldr	r3, [pc, #164]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80033ea:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80033ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033f6:	4a25      	ldr	r2, [pc, #148]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033f8:	430b      	orrs	r3, r1
 80033fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80033fe:	e003      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003400:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003404:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003410:	2100      	movs	r1, #0
 8003412:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8003416:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800341a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800341e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003422:	460b      	mov	r3, r1
 8003424:	4313      	orrs	r3, r2
 8003426:	d037      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003428:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003430:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003434:	d015      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8003436:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800343a:	d80e      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d012      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8003440:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003444:	d109      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800344a:	3330      	adds	r3, #48	@ 0x30
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fe0f 	bl	8004070 <RCCEx_PLL3_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003458:	e006      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003460:	e002      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8003462:	bf00      	nop
 8003464:	e000      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8003466:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003468:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10f      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003470:	4b06      	ldr	r3, [pc, #24]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003472:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003476:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800347a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003482:	4a02      	ldr	r2, [pc, #8]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003484:	430b      	orrs	r3, r1
 8003486:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800348a:	e005      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800348c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003490:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003494:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003498:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	2100      	movs	r1, #0
 80034a2:	67b9      	str	r1, [r7, #120]	@ 0x78
 80034a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034aa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80034ae:	460b      	mov	r3, r1
 80034b0:	4313      	orrs	r3, r2
 80034b2:	d00e      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80034b4:	4bb8      	ldr	r3, [pc, #736]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	4ab7      	ldr	r2, [pc, #732]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80034ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80034be:	61d3      	str	r3, [r2, #28]
 80034c0:	4bb5      	ldr	r3, [pc, #724]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80034c2:	69d9      	ldr	r1, [r3, #28]
 80034c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034c8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80034cc:	4ab2      	ldr	r2, [pc, #712]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80034ce:	430b      	orrs	r3, r1
 80034d0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80034de:	673b      	str	r3, [r7, #112]	@ 0x70
 80034e0:	2300      	movs	r3, #0
 80034e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80034e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80034e8:	460b      	mov	r3, r1
 80034ea:	4313      	orrs	r3, r2
 80034ec:	d055      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80034ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034f6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80034fa:	d031      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80034fc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003500:	d82a      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003506:	d02d      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8003508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800350c:	d824      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800350e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003512:	d029      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8003514:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003518:	d81e      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800351a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800351e:	d011      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003524:	d818      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d020      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 800352a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800352e:	d113      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003530:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003534:	3308      	adds	r3, #8
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fd02 	bl	8003f40 <RCCEx_PLL2_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003542:	e014      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003544:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003548:	3330      	adds	r3, #48	@ 0x30
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fd90 	bl	8004070 <RCCEx_PLL3_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003556:	e00a      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800355e:	e006      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003560:	bf00      	nop
 8003562:	e004      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003564:	bf00      	nop
 8003566:	e002      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800356c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10d      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003576:	4b88      	ldr	r3, [pc, #544]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003578:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800357c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003580:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003588:	4a83      	ldr	r2, [pc, #524]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800358a:	430b      	orrs	r3, r1
 800358c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003590:	e003      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003596:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800359a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80035a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035a8:	2300      	movs	r3, #0
 80035aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035ac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80035b0:	460b      	mov	r3, r1
 80035b2:	4313      	orrs	r3, r2
 80035b4:	d055      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80035b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035be:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80035c2:	d031      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 80035c4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80035c8:	d82a      	bhi.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80035ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035ce:	d02d      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80035d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035d4:	d824      	bhi.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80035d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035da:	d029      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80035dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035e0:	d81e      	bhi.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80035e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035e6:	d011      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80035e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ec:	d818      	bhi.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d020      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80035f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f6:	d113      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035fc:	3308      	adds	r3, #8
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fc9e 	bl	8003f40 <RCCEx_PLL2_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800360a:	e014      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800360c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003610:	3330      	adds	r3, #48	@ 0x30
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fd2c 	bl	8004070 <RCCEx_PLL3_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800361e:	e00a      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003626:	e006      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003628:	bf00      	nop
 800362a:	e004      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800362c:	bf00      	nop
 800362e:	e002      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003630:	bf00      	nop
 8003632:	e000      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003636:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10d      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800363e:	4b56      	ldr	r3, [pc, #344]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003640:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003644:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003650:	4a51      	ldr	r2, [pc, #324]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003652:	430b      	orrs	r3, r1
 8003654:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003658:	e003      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800365e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800366e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003670:	2300      	movs	r3, #0
 8003672:	667b      	str	r3, [r7, #100]	@ 0x64
 8003674:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003678:	460b      	mov	r3, r1
 800367a:	4313      	orrs	r3, r2
 800367c:	d032      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800367e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003682:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003686:	2b05      	cmp	r3, #5
 8003688:	d80f      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800368a:	2b03      	cmp	r3, #3
 800368c:	d211      	bcs.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800368e:	2b01      	cmp	r3, #1
 8003690:	d911      	bls.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8003692:	2b02      	cmp	r3, #2
 8003694:	d109      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800369a:	3308      	adds	r3, #8
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fc4f 	bl	8003f40 <RCCEx_PLL2_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80036a8:	e006      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80036b0:	e002      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80036b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10d      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80036c0:	4b35      	ldr	r3, [pc, #212]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80036c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036c6:	f023 0107 	bic.w	r1, r3, #7
 80036ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80036d2:	4a31      	ldr	r2, [pc, #196]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80036d4:	430b      	orrs	r3, r1
 80036d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80036da:	e003      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80036e0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80036e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	2100      	movs	r1, #0
 80036ee:	65b9      	str	r1, [r7, #88]	@ 0x58
 80036f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80036fa:	460b      	mov	r3, r1
 80036fc:	4313      	orrs	r3, r2
 80036fe:	d024      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003704:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 800370c:	2b08      	cmp	r3, #8
 800370e:	d005      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003716:	e002      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8003718:	bf00      	nop
 800371a:	e000      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 800371c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10d      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003726:	4b1c      	ldr	r3, [pc, #112]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800372c:	f023 0108 	bic.w	r1, r3, #8
 8003730:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003734:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003738:	4a17      	ldr	r2, [pc, #92]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800373a:	430b      	orrs	r3, r1
 800373c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003740:	e003      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003742:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003746:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800374a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003756:	653b      	str	r3, [r7, #80]	@ 0x50
 8003758:	2300      	movs	r3, #0
 800375a:	657b      	str	r3, [r7, #84]	@ 0x54
 800375c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003760:	460b      	mov	r3, r1
 8003762:	4313      	orrs	r3, r2
 8003764:	f000 80b9 	beq.w	80038da <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003768:	4b0c      	ldr	r3, [pc, #48]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	4a0b      	ldr	r2, [pc, #44]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003774:	f7fd f992 	bl	8000a9c <HAL_GetTick>
 8003778:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800377c:	e010      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377e:	f7fd f98d 	bl	8000a9c <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d908      	bls.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003794:	e00a      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8003796:	bf00      	nop
 8003798:	44020c00 	.word	0x44020c00
 800379c:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80037a0:	4bba      	ldr	r3, [pc, #744]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0e8      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 80037ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f040 808e 	bne.w	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037b6:	4bb6      	ldr	r3, [pc, #728]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80037b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80037c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d023      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80037cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037d0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80037d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d8:	4293      	cmp	r3, r2
 80037da:	d01b      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037dc:	4bac      	ldr	r3, [pc, #688]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80037de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037ea:	4ba9      	ldr	r3, [pc, #676]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80037ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037f0:	4aa7      	ldr	r2, [pc, #668]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80037f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037fa:	4ba5      	ldr	r3, [pc, #660]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80037fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003800:	4aa3      	ldr	r2, [pc, #652]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003806:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800380a:	4aa1      	ldr	r2, [pc, #644]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800380c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003810:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d019      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003820:	f7fd f93c 	bl	8000a9c <HAL_GetTick>
 8003824:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003828:	e00d      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fd f937 	bl	8000a9c <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003834:	1ad2      	subs	r2, r2, r3
 8003836:	f241 3388 	movw	r3, #5000	@ 0x1388
 800383a:	429a      	cmp	r2, r3
 800383c:	d903      	bls.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8003844:	e006      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003846:	4b92      	ldr	r3, [pc, #584]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ea      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8003854:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d135      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800385c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003860:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003864:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003868:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800386c:	d110      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 800386e:	4b88      	ldr	r3, [pc, #544]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800387a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003884:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003888:	4a81      	ldr	r2, [pc, #516]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800388a:	430b      	orrs	r3, r1
 800388c:	61d3      	str	r3, [r2, #28]
 800388e:	e005      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003890:	4b7f      	ldr	r3, [pc, #508]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	4a7e      	ldr	r2, [pc, #504]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003896:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800389a:	61d3      	str	r3, [r2, #28]
 800389c:	4b7c      	ldr	r3, [pc, #496]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800389e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038a2:	4a7b      	ldr	r2, [pc, #492]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80038a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038ac:	4b78      	ldr	r3, [pc, #480]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80038ae:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80038b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80038ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038be:	4a74      	ldr	r2, [pc, #464]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80038c0:	430b      	orrs	r3, r1
 80038c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038c6:	e008      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80038cc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80038d0:	e003      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80038d6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80038da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80038e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038e8:	2300      	movs	r3, #0
 80038ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80038f0:	460b      	mov	r3, r1
 80038f2:	4313      	orrs	r3, r2
 80038f4:	d035      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80038f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038fe:	2b30      	cmp	r3, #48	@ 0x30
 8003900:	d014      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8003902:	2b30      	cmp	r3, #48	@ 0x30
 8003904:	d80e      	bhi.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8003906:	2b20      	cmp	r3, #32
 8003908:	d012      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 800390a:	2b20      	cmp	r3, #32
 800390c:	d80a      	bhi.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800390e:	2b00      	cmp	r3, #0
 8003910:	d010      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8003912:	2b10      	cmp	r3, #16
 8003914:	d106      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003916:	4b5e      	ldr	r3, [pc, #376]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391a:	4a5d      	ldr	r2, [pc, #372]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800391c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003920:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003922:	e008      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800392a:	e004      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 800392c:	bf00      	nop
 800392e:	e002      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8003930:	bf00      	nop
 8003932:	e000      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8003934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003936:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10d      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800393e:	4b54      	ldr	r3, [pc, #336]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003944:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003948:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800394c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003950:	4a4f      	ldr	r2, [pc, #316]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003952:	430b      	orrs	r3, r1
 8003954:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003958:	e003      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800395e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800396e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003970:	2300      	movs	r3, #0
 8003972:	647b      	str	r3, [r7, #68]	@ 0x44
 8003974:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003978:	460b      	mov	r3, r1
 800397a:	4313      	orrs	r3, r2
 800397c:	d033      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800397e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003982:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 800398a:	2b40      	cmp	r3, #64	@ 0x40
 800398c:	d007      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800398e:	e010      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003990:	4b3f      	ldr	r3, [pc, #252]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003994:	4a3e      	ldr	r2, [pc, #248]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800399a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800399c:	e00d      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800399e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039a2:	3308      	adds	r3, #8
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 facb 	bl	8003f40 <RCCEx_PLL2_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80039b0:	e003      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80039b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10d      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80039c2:	4b33      	ldr	r3, [pc, #204]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80039c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80039c8:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80039cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80039d6:	430b      	orrs	r3, r1
 80039d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80039dc:	e003      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80039e2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80039e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ee:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80039f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039f4:	2300      	movs	r3, #0
 80039f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80039fc:	460b      	mov	r3, r1
 80039fe:	4313      	orrs	r3, r2
 8003a00:	d04c      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d827      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8003a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a14 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8003a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a14:	08003a29 	.word	0x08003a29
 8003a18:	08003a37 	.word	0x08003a37
 8003a1c:	08003a4b 	.word	0x08003a4b
 8003a20:	08003a67 	.word	0x08003a67
 8003a24:	08003a67 	.word	0x08003a67
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a28:	4b19      	ldr	r3, [pc, #100]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2c:	4a18      	ldr	r2, [pc, #96]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a32:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003a34:	e018      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fa7f 	bl	8003f40 <RCCEx_PLL2_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003a48:	e00e      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a4e:	3330      	adds	r3, #48	@ 0x30
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fb0d 	bl	8004070 <RCCEx_PLL3_Config>
 8003a56:	4603      	mov	r3, r0
 8003a58:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003a5c:	e004      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003a64:	e000      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8003a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d111      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003a70:	4b07      	ldr	r3, [pc, #28]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a76:	f023 0107 	bic.w	r1, r3, #7
 8003a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a82:	4a03      	ldr	r2, [pc, #12]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a84:	430b      	orrs	r3, r1
 8003a86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a8a:	e007      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8003a8c:	44020800 	.word	0x44020800
 8003a90:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a98:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003a9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aaa:	2300      	movs	r3, #0
 8003aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f000 8081 	beq.w	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003abe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d85f      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8003ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8003acc <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003b51 	.word	0x08003b51
 8003ad0:	08003b87 	.word	0x08003b87
 8003ad4:	08003b87 	.word	0x08003b87
 8003ad8:	08003b87 	.word	0x08003b87
 8003adc:	08003b87 	.word	0x08003b87
 8003ae0:	08003b87 	.word	0x08003b87
 8003ae4:	08003b87 	.word	0x08003b87
 8003ae8:	08003b87 	.word	0x08003b87
 8003aec:	08003b5f 	.word	0x08003b5f
 8003af0:	08003b87 	.word	0x08003b87
 8003af4:	08003b87 	.word	0x08003b87
 8003af8:	08003b87 	.word	0x08003b87
 8003afc:	08003b87 	.word	0x08003b87
 8003b00:	08003b87 	.word	0x08003b87
 8003b04:	08003b87 	.word	0x08003b87
 8003b08:	08003b87 	.word	0x08003b87
 8003b0c:	08003b73 	.word	0x08003b73
 8003b10:	08003b87 	.word	0x08003b87
 8003b14:	08003b87 	.word	0x08003b87
 8003b18:	08003b87 	.word	0x08003b87
 8003b1c:	08003b87 	.word	0x08003b87
 8003b20:	08003b87 	.word	0x08003b87
 8003b24:	08003b87 	.word	0x08003b87
 8003b28:	08003b87 	.word	0x08003b87
 8003b2c:	08003b8f 	.word	0x08003b8f
 8003b30:	08003b87 	.word	0x08003b87
 8003b34:	08003b87 	.word	0x08003b87
 8003b38:	08003b87 	.word	0x08003b87
 8003b3c:	08003b87 	.word	0x08003b87
 8003b40:	08003b87 	.word	0x08003b87
 8003b44:	08003b87 	.word	0x08003b87
 8003b48:	08003b87 	.word	0x08003b87
 8003b4c:	08003b8f 	.word	0x08003b8f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b50:	4bb9      	ldr	r3, [pc, #740]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b54:	4ab8      	ldr	r2, [pc, #736]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b5a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003b5c:	e018      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b62:	3308      	adds	r3, #8
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 f9eb 	bl	8003f40 <RCCEx_PLL2_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003b70:	e00e      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b76:	3330      	adds	r3, #48	@ 0x30
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fa79 	bl	8004070 <RCCEx_PLL3_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003b84:	e004      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003b8c:	e000      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8003b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b90:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10d      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003b98:	4ba7      	ldr	r3, [pc, #668]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b9e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ba6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003baa:	4aa3      	ldr	r2, [pc, #652]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003bac:	430b      	orrs	r3, r1
 8003bae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bb2:	e003      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003bb8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003bbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bca:	2300      	movs	r3, #0
 8003bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	d04e      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003be4:	d02e      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bea:	d827      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003bec:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bee:	d02b      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8003bf0:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bf2:	d823      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003bf4:	2b80      	cmp	r3, #128	@ 0x80
 8003bf6:	d017      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8003bf8:	2b80      	cmp	r3, #128	@ 0x80
 8003bfa:	d81f      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8003c00:	2b40      	cmp	r3, #64	@ 0x40
 8003c02:	d007      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8003c04:	e01a      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c06:	4b8c      	ldr	r3, [pc, #560]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0a:	4a8b      	ldr	r2, [pc, #556]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c10:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003c12:	e01a      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c18:	3308      	adds	r3, #8
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 f990 	bl	8003f40 <RCCEx_PLL2_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003c26:	e010      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c2c:	3330      	adds	r3, #48	@ 0x30
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fa1e 	bl	8004070 <RCCEx_PLL3_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003c3a:	e006      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003c42:	e002      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8003c44:	bf00      	nop
 8003c46:	e000      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8003c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10d      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003c52:	4b79      	ldr	r3, [pc, #484]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c58:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003c5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c64:	4974      	ldr	r1, [pc, #464]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003c6c:	e003      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c72:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8003c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003c82:	623b      	str	r3, [r7, #32]
 8003c84:	2300      	movs	r3, #0
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	d055      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8003c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c96:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c9a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003c9e:	d031      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8003ca0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003ca4:	d82a      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003ca6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003caa:	d02d      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8003cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cb0:	d824      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003cb2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003cb6:	d029      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8003cb8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003cbc:	d81e      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc2:	d011      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8003cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc8:	d818      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d020      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8003cce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cd2:	d113      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cd8:	3308      	adds	r3, #8
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f930 	bl	8003f40 <RCCEx_PLL2_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003ce6:	e014      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ce8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cec:	3330      	adds	r3, #48	@ 0x30
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f9be 	bl	8004070 <RCCEx_PLL3_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003d02:	e006      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003d04:	bf00      	nop
 8003d06:	e004      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003d08:	bf00      	nop
 8003d0a:	e002      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003d0c:	bf00      	nop
 8003d0e:	e000      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d12:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10d      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8003d1a:	4b47      	ldr	r3, [pc, #284]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d20:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8003d24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003d2c:	4942      	ldr	r1, [pc, #264]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003d34:	e003      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d36:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003d3a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	2100      	movs	r1, #0
 8003d48:	61b9      	str	r1, [r7, #24]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003d54:	460b      	mov	r3, r1
 8003d56:	4313      	orrs	r3, r2
 8003d58:	d03c      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8003d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d81b      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8003d66:	a201      	add	r2, pc, #4	@ (adr r2, 8003d6c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003da7 	.word	0x08003da7
 8003d70:	08003d7d 	.word	0x08003d7d
 8003d74:	08003d8b 	.word	0x08003d8b
 8003d78:	08003da7 	.word	0x08003da7
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d80:	4a2d      	ldr	r2, [pc, #180]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003d82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d86:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003d88:	e00e      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d8e:	3308      	adds	r3, #8
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 f8d5 	bl	8003f40 <RCCEx_PLL2_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8003d9c:	e004      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003da4:	e000      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8003da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10d      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003db0:	4b21      	ldr	r3, [pc, #132]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003db2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003db6:	f023 0203 	bic.w	r2, r3, #3
 8003dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003dc2:	491d      	ldr	r1, [pc, #116]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003dca:	e003      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dcc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003dd0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	2100      	movs	r1, #0
 8003dde:	6139      	str	r1, [r7, #16]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003dea:	460b      	mov	r3, r1
 8003dec:	4313      	orrs	r3, r2
 8003dee:	d03c      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003df0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dfc:	d00e      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003dfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e02:	d815      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d019      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8003e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e0c:	d110      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e12:	4a09      	ldr	r2, [pc, #36]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e18:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e1a:	e010      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e20:	3308      	adds	r3, #8
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 f88c 	bl	8003f40 <RCCEx_PLL2_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e2e:	e006      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003e36:	e002      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8003e38:	44020c00 	.word	0x44020c00
        break;
 8003e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10d      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003e46:	4b3d      	ldr	r3, [pc, #244]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e58:	4938      	ldr	r1, [pc, #224]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003e60:	e003      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e62:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e66:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	2100      	movs	r1, #0
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e80:	460b      	mov	r3, r1
 8003e82:	4313      	orrs	r3, r2
 8003e84:	d038      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e8a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003e8e:	2b30      	cmp	r3, #48	@ 0x30
 8003e90:	d01b      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8003e92:	2b30      	cmp	r3, #48	@ 0x30
 8003e94:	d815      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8003e96:	2b10      	cmp	r3, #16
 8003e98:	d002      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d007      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8003e9e:	e010      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea0:	4b26      	ldr	r3, [pc, #152]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea4:	4a25      	ldr	r2, [pc, #148]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003ea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eaa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003eac:	e00e      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eb2:	3330      	adds	r3, #48	@ 0x30
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f8db 	bl	8004070 <RCCEx_PLL3_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003ec0:	e004      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003ec8:	e000      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8003eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ecc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10d      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003ed4:	4b19      	ldr	r3, [pc, #100]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003ed6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003eda:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ee2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003ee6:	4915      	ldr	r1, [pc, #84]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003eee:	e003      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003ef4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ef8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	2100      	movs	r1, #0
 8003f02:	6039      	str	r1, [r7, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4313      	orrs	r3, r2
 8003f12:	d00c      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8003f14:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003f16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f22:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f26:	4905      	ldr	r1, [pc, #20]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8003f2e:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	37e8      	adds	r7, #232	@ 0xe8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f3c:	44020c00 	.word	0x44020c00

08003f40 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8003f48:	4b48      	ldr	r3, [pc, #288]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a47      	ldr	r2, [pc, #284]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8003f4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f52:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f54:	f7fc fda2 	bl	8000a9c <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f5a:	e008      	b.n	8003f6e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f5c:	f7fc fd9e 	bl	8000a9c <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e07a      	b.n	8004064 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8003f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8003f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6811      	ldr	r1, [r2, #0]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6852      	ldr	r2, [r2, #4]
 8003f8e:	0212      	lsls	r2, r2, #8
 8003f90:	430a      	orrs	r2, r1
 8003f92:	4936      	ldr	r1, [pc, #216]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	025b      	lsls	r3, r3, #9
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	041b      	lsls	r3, r3, #16
 8003fb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003fc8:	4928      	ldr	r1, [pc, #160]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8003fce:	4b27      	ldr	r3, [pc, #156]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd2:	f023 020c 	bic.w	r2, r3, #12
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	4924      	ldr	r1, [pc, #144]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8003fe0:	4b22      	ldr	r3, [pc, #136]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	f023 0220 	bic.w	r2, r3, #32
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	491f      	ldr	r1, [pc, #124]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8003ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	491c      	ldr	r1, [pc, #112]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8004000:	4b1a      	ldr	r3, [pc, #104]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	4a19      	ldr	r2, [pc, #100]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8004006:	f023 0310 	bic.w	r3, r3, #16
 800400a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800400c:	4b17      	ldr	r3, [pc, #92]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004014:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6a12      	ldr	r2, [r2, #32]
 800401c:	00d2      	lsls	r2, r2, #3
 800401e:	4913      	ldr	r1, [pc, #76]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8004020:	4313      	orrs	r3, r2
 8004022:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8004024:	4b11      	ldr	r3, [pc, #68]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	4a10      	ldr	r2, [pc, #64]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 800402a:	f043 0310 	orr.w	r3, r3, #16
 800402e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8004030:	4b0e      	ldr	r3, [pc, #56]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0d      	ldr	r2, [pc, #52]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8004036:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800403a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800403c:	f7fc fd2e 	bl	8000a9c <HAL_GetTick>
 8004040:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004042:	e008      	b.n	8004056 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004044:	f7fc fd2a 	bl	8000a9c <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e006      	b.n	8004064 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004056:	4b05      	ldr	r3, [pc, #20]	@ (800406c <RCCEx_PLL2_Config+0x12c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0

}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	44020c00 	.word	0x44020c00

08004070 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8004078:	4b48      	ldr	r3, [pc, #288]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a47      	ldr	r2, [pc, #284]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 800407e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004082:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004084:	f7fc fd0a 	bl	8000a9c <HAL_GetTick>
 8004088:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800408a:	e008      	b.n	800409e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800408c:	f7fc fd06 	bl	8000a9c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e07a      	b.n	8004194 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800409e:	4b3f      	ldr	r3, [pc, #252]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80040aa:	4b3c      	ldr	r3, [pc, #240]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040b2:	f023 0303 	bic.w	r3, r3, #3
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6811      	ldr	r1, [r2, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6852      	ldr	r2, [r2, #4]
 80040be:	0212      	lsls	r2, r2, #8
 80040c0:	430a      	orrs	r2, r1
 80040c2:	4936      	ldr	r1, [pc, #216]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	630b      	str	r3, [r1, #48]	@ 0x30
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	025b      	lsls	r3, r3, #9
 80040da:	b29b      	uxth	r3, r3
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	041b      	lsls	r3, r3, #16
 80040e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	061b      	lsls	r3, r3, #24
 80040f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040f8:	4928      	ldr	r1, [pc, #160]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80040fe:	4b27      	ldr	r3, [pc, #156]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	f023 020c 	bic.w	r2, r3, #12
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	4924      	ldr	r1, [pc, #144]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 800410c:	4313      	orrs	r3, r2
 800410e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8004110:	4b22      	ldr	r3, [pc, #136]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 8004112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004114:	f023 0220 	bic.w	r2, r3, #32
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	491f      	ldr	r1, [pc, #124]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 800411e:	4313      	orrs	r3, r2
 8004120:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004122:	4b1e      	ldr	r3, [pc, #120]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 8004124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	491c      	ldr	r1, [pc, #112]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 800412c:	4313      	orrs	r3, r2
 800412e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8004130:	4b1a      	ldr	r3, [pc, #104]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004134:	4a19      	ldr	r2, [pc, #100]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 8004136:	f023 0310 	bic.w	r3, r3, #16
 800413a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800413c:	4b17      	ldr	r3, [pc, #92]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 800413e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004140:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004144:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6a12      	ldr	r2, [r2, #32]
 800414c:	00d2      	lsls	r2, r2, #3
 800414e:	4913      	ldr	r1, [pc, #76]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 8004150:	4313      	orrs	r3, r2
 8004152:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8004154:	4b11      	ldr	r3, [pc, #68]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004158:	4a10      	ldr	r2, [pc, #64]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 800415a:	f043 0310 	orr.w	r3, r3, #16
 800415e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8004160:	4b0e      	ldr	r3, [pc, #56]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a0d      	ldr	r2, [pc, #52]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800416c:	f7fc fc96 	bl	8000a9c <HAL_GetTick>
 8004170:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004172:	e008      	b.n	8004186 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004174:	f7fc fc92 	bl	8000a9c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e006      	b.n	8004194 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004186:	4b05      	ldr	r3, [pc, #20]	@ (800419c <RCCEx_PLL3_Config+0x12c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	44020c00 	.word	0x44020c00

080041a0 <memset>:
 80041a0:	4402      	add	r2, r0
 80041a2:	4603      	mov	r3, r0
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d100      	bne.n	80041aa <memset+0xa>
 80041a8:	4770      	bx	lr
 80041aa:	f803 1b01 	strb.w	r1, [r3], #1
 80041ae:	e7f9      	b.n	80041a4 <memset+0x4>

080041b0 <__libc_init_array>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	4d0d      	ldr	r5, [pc, #52]	@ (80041e8 <__libc_init_array+0x38>)
 80041b4:	2600      	movs	r6, #0
 80041b6:	4c0d      	ldr	r4, [pc, #52]	@ (80041ec <__libc_init_array+0x3c>)
 80041b8:	1b64      	subs	r4, r4, r5
 80041ba:	10a4      	asrs	r4, r4, #2
 80041bc:	42a6      	cmp	r6, r4
 80041be:	d109      	bne.n	80041d4 <__libc_init_array+0x24>
 80041c0:	4d0b      	ldr	r5, [pc, #44]	@ (80041f0 <__libc_init_array+0x40>)
 80041c2:	2600      	movs	r6, #0
 80041c4:	4c0b      	ldr	r4, [pc, #44]	@ (80041f4 <__libc_init_array+0x44>)
 80041c6:	f000 f825 	bl	8004214 <_init>
 80041ca:	1b64      	subs	r4, r4, r5
 80041cc:	10a4      	asrs	r4, r4, #2
 80041ce:	42a6      	cmp	r6, r4
 80041d0:	d105      	bne.n	80041de <__libc_init_array+0x2e>
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d8:	3601      	adds	r6, #1
 80041da:	4798      	blx	r3
 80041dc:	e7ee      	b.n	80041bc <__libc_init_array+0xc>
 80041de:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e2:	3601      	adds	r6, #1
 80041e4:	4798      	blx	r3
 80041e6:	e7f2      	b.n	80041ce <__libc_init_array+0x1e>
 80041e8:	08004260 	.word	0x08004260
 80041ec:	08004260 	.word	0x08004260
 80041f0:	08004260 	.word	0x08004260
 80041f4:	08004264 	.word	0x08004264

080041f8 <memcpy>:
 80041f8:	440a      	add	r2, r1
 80041fa:	1e43      	subs	r3, r0, #1
 80041fc:	4291      	cmp	r1, r2
 80041fe:	d100      	bne.n	8004202 <memcpy+0xa>
 8004200:	4770      	bx	lr
 8004202:	b510      	push	{r4, lr}
 8004204:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004208:	4291      	cmp	r1, r2
 800420a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800420e:	d1f9      	bne.n	8004204 <memcpy+0xc>
 8004210:	bd10      	pop	{r4, pc}
	...

08004214 <_init>:
 8004214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004216:	bf00      	nop
 8004218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421a:	bc08      	pop	{r3}
 800421c:	469e      	mov	lr, r3
 800421e:	4770      	bx	lr

08004220 <_fini>:
 8004220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004222:	bf00      	nop
 8004224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004226:	bc08      	pop	{r3}
 8004228:	469e      	mov	lr, r3
 800422a:	4770      	bx	lr
