
CAN_BASICS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000406c  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080042c0  080042c0  000052c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e0  080042e0  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080042e0  080042e0  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080042e0  080042e0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e0  080042e0  000052e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042e4  080042e4  000052e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080042e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  080042f4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080042f4  0000616c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca9e  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa5  00000000  00000000  00012ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  00014588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000759  00000000  00000000  00014f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aad4  00000000  00000000  000156c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b90b  00000000  00000000  00040195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e519  00000000  00000000  0004baa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159fb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002834  00000000  00000000  00159ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0015c830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	080042a8 	.word	0x080042a8

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	080042a8 	.word	0x080042a8

08000294 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800029a:	f000 fb5d 	bl	8000958 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800029e:	f000 f82f 	bl	8000300 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002a2:	f000 f8e7 	bl	8000474 <MX_GPIO_Init>
	MX_FDCAN2_Init();
 80002a6:	f000 f89f 	bl	80003e8 <MX_FDCAN2_Init>
	/* USER CODE BEGIN 2 */
	startupFDCAN(&hfdcan2, &TxHeader, &Error_Handler);
 80002aa:	4a11      	ldr	r2, [pc, #68]	@ (80002f0 <main+0x5c>)
 80002ac:	4911      	ldr	r1, [pc, #68]	@ (80002f4 <main+0x60>)
 80002ae:	4812      	ldr	r0, [pc, #72]	@ (80002f8 <main+0x64>)
 80002b0:	f000 f94e 	bl	8000550 <startupFDCAN>
	while (1) {

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		TxHeader.Identifier = 0x456;
 80002b4:	4b0f      	ldr	r3, [pc, #60]	@ (80002f4 <main+0x60>)
 80002b6:	f240 4256 	movw	r2, #1110	@ 0x456
 80002ba:	601a      	str	r2, [r3, #0]
		TxHeader.DataLength = 2;
 80002bc:	4b0d      	ldr	r3, [pc, #52]	@ (80002f4 <main+0x60>)
 80002be:	2202      	movs	r2, #2
 80002c0:	60da      	str	r2, [r3, #12]
		txMessageData[0] = VCUREADY;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <main+0x68>)
 80002c4:	2202      	movs	r2, #2
 80002c6:	701a      	strb	r2, [r3, #0]
		txMessageData[1] = 4;
 80002c8:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <main+0x68>)
 80002ca:	2204      	movs	r2, #4
 80002cc:	705a      	strb	r2, [r3, #1]
		HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2,
 80002ce:	4a0b      	ldr	r2, [pc, #44]	@ (80002fc <main+0x68>)
 80002d0:	4908      	ldr	r1, [pc, #32]	@ (80002f4 <main+0x60>)
 80002d2:	4809      	ldr	r0, [pc, #36]	@ (80002f8 <main+0x64>)
 80002d4:	f000 ff7c 	bl	80011d0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80002d8:	4603      	mov	r3, r0
 80002da:	71fb      	strb	r3, [r7, #7]
				&TxHeader, txMessageData);
		if (status != HAL_OK) {
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <main+0x52>
			Error_Handler();
 80002e2:	f000 f995 	bl	8000610 <Error_Handler>
		}
		HAL_Delay(1000);
 80002e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ea:	f000 fbf3 	bl	8000ad4 <HAL_Delay>
	while (1) {
 80002ee:	e7e1      	b.n	80002b4 <main+0x20>
 80002f0:	08000611 	.word	0x08000611
 80002f4:	2000008c 	.word	0x2000008c
 80002f8:	20000028 	.word	0x20000028
 80002fc:	200000d8 	.word	0x200000d8

08000300 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b09c      	sub	sp, #112	@ 0x70
 8000304:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000306:	f107 0320 	add.w	r3, r7, #32
 800030a:	2250      	movs	r2, #80	@ 0x50
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f003 ff9e 	bl	8004250 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000314:	f107 0308 	add.w	r3, r7, #8
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
 8000324:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000326:	4b2e      	ldr	r3, [pc, #184]	@ (80003e0 <SystemClock_Config+0xe0>)
 8000328:	691b      	ldr	r3, [r3, #16]
 800032a:	4a2d      	ldr	r2, [pc, #180]	@ (80003e0 <SystemClock_Config+0xe0>)
 800032c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000330:	6113      	str	r3, [r2, #16]
 8000332:	4b2b      	ldr	r3, [pc, #172]	@ (80003e0 <SystemClock_Config+0xe0>)
 8000334:	691b      	ldr	r3, [r3, #16]
 8000336:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800033e:	bf00      	nop
 8000340:	4b27      	ldr	r3, [pc, #156]	@ (80003e0 <SystemClock_Config+0xe0>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f003 0308 	and.w	r3, r3, #8
 8000348:	2b08      	cmp	r3, #8
 800034a:	d1f9      	bne.n	8000340 <SystemClock_Config+0x40>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034c:	2302      	movs	r3, #2
 800034e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000350:	2301      	movs	r3, #1
 8000352:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000354:	2308      	movs	r3, #8
 8000356:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000358:	2340      	movs	r3, #64	@ 0x40
 800035a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035c:	2302      	movs	r3, #2
 800035e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 8000360:	2301      	movs	r3, #1
 8000362:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000364:	2304      	movs	r3, #4
 8000366:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 60;
 8000368:	233c      	movs	r3, #60	@ 0x3c
 800036a:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800036c:	2302      	movs	r3, #2
 800036e:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 12;
 8000370:	230c      	movs	r3, #12
 8000372:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000374:	2302      	movs	r3, #2
 8000376:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000378:	230c      	movs	r3, #12
 800037a:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800037c:	2300      	movs	r3, #0
 800037e:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000384:	f107 0320 	add.w	r3, r7, #32
 8000388:	4618      	mov	r0, r3
 800038a:	f001 fd39 	bl	8001e00 <HAL_RCC_OscConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0x98>
		Error_Handler();
 8000394:	f000 f93c 	bl	8000610 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000398:	231f      	movs	r3, #31
 800039a:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039c:	2303      	movs	r3, #3
 800039e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80003b0:	f107 0308 	add.w	r3, r7, #8
 80003b4:	2105      	movs	r1, #5
 80003b6:	4618      	mov	r0, r3
 80003b8:	f002 f95a 	bl	8002670 <HAL_RCC_ClockConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0xc6>
		Error_Handler();
 80003c2:	f000 f925 	bl	8000610 <Error_Handler>
	}

	/** Configure the programming delay
	 */
	__HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80003c6:	4b07      	ldr	r3, [pc, #28]	@ (80003e4 <SystemClock_Config+0xe4>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80003ce:	4a05      	ldr	r2, [pc, #20]	@ (80003e4 <SystemClock_Config+0xe4>)
 80003d0:	f043 0320 	orr.w	r3, r3, #32
 80003d4:	6013      	str	r3, [r2, #0]
}
 80003d6:	bf00      	nop
 80003d8:	3770      	adds	r7, #112	@ 0x70
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	44020800 	.word	0x44020800
 80003e4:	40022000 	.word	0x40022000

080003e8 <MX_FDCAN2_Init>:
/**
 * @brief FDCAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN2_Init(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN2_Init 0 */

	/* USER CODE BEGIN FDCAN2_Init 1 */

	/* USER CODE END FDCAN2_Init 1 */
	hfdcan2.Instance = FDCAN2;
 80003ec:	4b1f      	ldr	r3, [pc, #124]	@ (800046c <MX_FDCAN2_Init+0x84>)
 80003ee:	4a20      	ldr	r2, [pc, #128]	@ (8000470 <MX_FDCAN2_Init+0x88>)
 80003f0:	601a      	str	r2, [r3, #0]
	hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80003f2:	4b1e      	ldr	r3, [pc, #120]	@ (800046c <MX_FDCAN2_Init+0x84>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]
	hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80003f8:	4b1c      	ldr	r3, [pc, #112]	@ (800046c <MX_FDCAN2_Init+0x84>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
	hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80003fe:	4b1b      	ldr	r3, [pc, #108]	@ (800046c <MX_FDCAN2_Init+0x84>)
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
	hfdcan2.Init.AutoRetransmission = DISABLE;
 8000404:	4b19      	ldr	r3, [pc, #100]	@ (800046c <MX_FDCAN2_Init+0x84>)
 8000406:	2200      	movs	r2, #0
 8000408:	741a      	strb	r2, [r3, #16]
	hfdcan2.Init.TransmitPause = DISABLE;
 800040a:	4b18      	ldr	r3, [pc, #96]	@ (800046c <MX_FDCAN2_Init+0x84>)
 800040c:	2200      	movs	r2, #0
 800040e:	745a      	strb	r2, [r3, #17]
	hfdcan2.Init.ProtocolException = DISABLE;
 8000410:	4b16      	ldr	r3, [pc, #88]	@ (800046c <MX_FDCAN2_Init+0x84>)
 8000412:	2200      	movs	r2, #0
 8000414:	749a      	strb	r2, [r3, #18]
	hfdcan2.Init.NominalPrescaler = 4;
 8000416:	4b15      	ldr	r3, [pc, #84]	@ (800046c <MX_FDCAN2_Init+0x84>)
 8000418:	2204      	movs	r2, #4
 800041a:	615a      	str	r2, [r3, #20]
	hfdcan2.Init.NominalSyncJumpWidth = 2;
 800041c:	4b13      	ldr	r3, [pc, #76]	@ (800046c <MX_FDCAN2_Init+0x84>)
 800041e:	2202      	movs	r2, #2
 8000420:	619a      	str	r2, [r3, #24]
	hfdcan2.Init.NominalTimeSeg1 = 7;
 8000422:	4b12      	ldr	r3, [pc, #72]	@ (800046c <MX_FDCAN2_Init+0x84>)
 8000424:	2207      	movs	r2, #7
 8000426:	61da      	str	r2, [r3, #28]
	hfdcan2.Init.NominalTimeSeg2 = 2;
 8000428:	4b10      	ldr	r3, [pc, #64]	@ (800046c <MX_FDCAN2_Init+0x84>)
 800042a:	2202      	movs	r2, #2
 800042c:	621a      	str	r2, [r3, #32]
	hfdcan2.Init.DataPrescaler = 1;
 800042e:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <MX_FDCAN2_Init+0x84>)
 8000430:	2201      	movs	r2, #1
 8000432:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan2.Init.DataSyncJumpWidth = 2;
 8000434:	4b0d      	ldr	r3, [pc, #52]	@ (800046c <MX_FDCAN2_Init+0x84>)
 8000436:	2202      	movs	r2, #2
 8000438:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan2.Init.DataTimeSeg1 = 7;
 800043a:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <MX_FDCAN2_Init+0x84>)
 800043c:	2207      	movs	r2, #7
 800043e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan2.Init.DataTimeSeg2 = 2;
 8000440:	4b0a      	ldr	r3, [pc, #40]	@ (800046c <MX_FDCAN2_Init+0x84>)
 8000442:	2202      	movs	r2, #2
 8000444:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan2.Init.StdFiltersNbr = 0;
 8000446:	4b09      	ldr	r3, [pc, #36]	@ (800046c <MX_FDCAN2_Init+0x84>)
 8000448:	2200      	movs	r2, #0
 800044a:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan2.Init.ExtFiltersNbr = 0;
 800044c:	4b07      	ldr	r3, [pc, #28]	@ (800046c <MX_FDCAN2_Init+0x84>)
 800044e:	2200      	movs	r2, #0
 8000450:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000452:	4b06      	ldr	r3, [pc, #24]	@ (800046c <MX_FDCAN2_Init+0x84>)
 8000454:	2200      	movs	r2, #0
 8000456:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK) {
 8000458:	4804      	ldr	r0, [pc, #16]	@ (800046c <MX_FDCAN2_Init+0x84>)
 800045a:	f000 fd37 	bl	8000ecc <HAL_FDCAN_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_FDCAN2_Init+0x80>
		Error_Handler();
 8000464:	f000 f8d4 	bl	8000610 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN2_Init 2 */

	/* USER CODE END FDCAN2_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000028 	.word	0x20000028
 8000470:	4000a800 	.word	0x4000a800

08000474 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800047a:	f107 030c 	add.w	r3, r7, #12
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800048a:	4b1e      	ldr	r3, [pc, #120]	@ (8000504 <MX_GPIO_Init+0x90>)
 800048c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000490:	4a1c      	ldr	r2, [pc, #112]	@ (8000504 <MX_GPIO_Init+0x90>)
 8000492:	f043 0301 	orr.w	r3, r3, #1
 8000496:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800049a:	4b1a      	ldr	r3, [pc, #104]	@ (8000504 <MX_GPIO_Init+0x90>)
 800049c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004a0:	f003 0301 	and.w	r3, r3, #1
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004a8:	4b16      	ldr	r3, [pc, #88]	@ (8000504 <MX_GPIO_Init+0x90>)
 80004aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004ae:	4a15      	ldr	r2, [pc, #84]	@ (8000504 <MX_GPIO_Init+0x90>)
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004b8:	4b12      	ldr	r3, [pc, #72]	@ (8000504 <MX_GPIO_Init+0x90>)
 80004ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004be:	f003 0304 	and.w	r3, r3, #4
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <MX_GPIO_Init+0x90>)
 80004c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000504 <MX_GPIO_Init+0x90>)
 80004ce:	f043 0302 	orr.w	r3, r3, #2
 80004d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000504 <MX_GPIO_Init+0x90>)
 80004d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004dc:	f003 0302 	and.w	r3, r3, #2
 80004e0:	603b      	str	r3, [r7, #0]
 80004e2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : PC4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004e4:	2310      	movs	r3, #16
 80004e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	4619      	mov	r1, r3
 80004f6:	4804      	ldr	r0, [pc, #16]	@ (8000508 <MX_GPIO_Init+0x94>)
 80004f8:	f001 fb24 	bl	8001b44 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80004fc:	bf00      	nop
 80004fe:	3720      	adds	r7, #32
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	44020c00 	.word	0x44020c00
 8000508:	42020800 	.word	0x42020800

0800050c <configureFDCANTransmissionHeader>:

/* USER CODE BEGIN 4 */

void configureFDCANTransmissionHeader(FDCAN_TxHeaderTypeDef *tx_header) {
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	tx_header->IdType = FDCAN_STANDARD_ID;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2200      	movs	r2, #0
 8000518:	605a      	str	r2, [r3, #4]
	tx_header->TxFrameType = FDCAN_DATA_FRAME;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
	tx_header->DataLength = FDCAN_DLC_BYTES_1;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2201      	movs	r2, #1
 8000524:	60da      	str	r2, [r3, #12]
	tx_header->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
	tx_header->BitRateSwitch = FDCAN_BRS_OFF;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2200      	movs	r2, #0
 8000530:	615a      	str	r2, [r3, #20]
	tx_header->FDFormat = FDCAN_CLASSIC_CAN;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
	tx_header->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
	tx_header->MessageMarker = 0;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <startupFDCAN>:

void startupFDCAN(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *tx_header,
		void (*err_handler)(void)) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (HAL_FDCAN_GetState(hfdcan) != HAL_FDCAN_STATE_READY) {
 800055c:	68f8      	ldr	r0, [r7, #12]
 800055e:	f001 fa05 	bl	800196c <HAL_FDCAN_GetState>
 8000562:	4603      	mov	r3, r0
 8000564:	2b01      	cmp	r3, #1
 8000566:	d001      	beq.n	800056c <startupFDCAN+0x1c>
		err_handler();  // startupFDCAN called before hfdcan initialized.
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4798      	blx	r3
	}

	// Enable CAN transceiver & interrupts
	//stby_pin->digitalWrite(false);  // Enable the transceiver
	hal_status = HAL_FDCAN_Start(hfdcan);
 800056c:	68f8      	ldr	r0, [r7, #12]
 800056e:	f000 fe07 	bl	8001180 <HAL_FDCAN_Start>
 8000572:	4603      	mov	r3, r0
 8000574:	75fb      	strb	r3, [r7, #23]
	if (hal_status != HAL_OK) {
 8000576:	7dfb      	ldrb	r3, [r7, #23]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <startupFDCAN+0x30>
		err_handler();
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4798      	blx	r3
	}

	// Activate RX interrupts
	hal_status = HAL_FDCAN_ActivateNotification(hfdcan,
 8000580:	2200      	movs	r2, #0
 8000582:	2101      	movs	r1, #1
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	f000 ff6f 	bl	8001468 <HAL_FDCAN_ActivateNotification>
 800058a:	4603      	mov	r3, r0
 800058c:	75fb      	strb	r3, [r7, #23]
	FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
	if (hal_status != HAL_OK) {
 800058e:	7dfb      	ldrb	r3, [r7, #23]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <startupFDCAN+0x48>
		err_handler();
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4798      	blx	r3
	}

	configureFDCANTransmissionHeader(tx_header);
 8000598:	68b8      	ldr	r0, [r7, #8]
 800059a:	f7ff ffb7 	bl	800050c <configureFDCANTransmissionHeader>

	if (HAL_FDCAN_GetState(hfdcan) == HAL_FDCAN_STATE_ERROR) {
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	f001 f9e4 	bl	800196c <HAL_FDCAN_GetState>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d101      	bne.n	80005ae <startupFDCAN+0x5e>
		err_handler(); // Make sure we're not in an error state
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4798      	blx	r3
	}
}
 80005ae:	bf00      	nop
 80005b0:	3718      	adds	r7, #24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d017      	beq.n	80005fc <HAL_FDCAN_RxFifo0Callback+0x44>
		/* Retrieve RX messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader,
 80005cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80005ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000608 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80005d0:	2140      	movs	r1, #64	@ 0x40
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 fe40 	bl	8001258 <HAL_FDCAN_GetRxMessage>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_FDCAN_RxFifo0Callback+0x2a>
				rxMessageData) != HAL_OK) {
			/* Reception Error */
			Error_Handler();
 80005de:	f000 f817 	bl	8000610 <Error_Handler>
		}
		receivedFrame = 1;
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <HAL_FDCAN_RxFifo0Callback+0x54>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	601a      	str	r2, [r3, #0]
		if (HAL_FDCAN_ActivateNotification(hfdcan,
 80005e8:	2200      	movs	r2, #0
 80005ea:	2101      	movs	r1, #1
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 ff3b 	bl	8001468 <HAL_FDCAN_ActivateNotification>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <HAL_FDCAN_RxFifo0Callback+0x44>
		FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
			/* Notification Error */
			Error_Handler();
 80005f8:	f000 f80a 	bl	8000610 <Error_Handler>
		}
	}
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000118 	.word	0x20000118
 8000608:	200000b0 	.word	0x200000b0
 800060c:	20000158 	.word	0x20000158

08000610 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <Error_Handler+0x8>

0800061c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
	...

0800062c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b0c0      	sub	sp, #256	@ 0x100
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	22d0      	movs	r2, #208	@ 0xd0
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fdff 	bl	8004250 <memset>
  if(hfdcan->Instance==FDCAN2)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a3e      	ldr	r2, [pc, #248]	@ (8000750 <HAL_FDCAN_MspInit+0x124>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d173      	bne.n	8000744 <HAL_FDCAN_MspInit+0x118>

    /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800065c:	f04f 0200 	mov.w	r2, #0
 8000660:	f04f 0304 	mov.w	r3, #4
 8000664:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000668:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800066c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000670:	f107 0318 	add.w	r3, r7, #24
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fafb 	bl	8002c70 <HAL_RCCEx_PeriphCLKConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000680:	f7ff ffc6 	bl	8000610 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000684:	4b33      	ldr	r3, [pc, #204]	@ (8000754 <HAL_FDCAN_MspInit+0x128>)
 8000686:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800068a:	4a32      	ldr	r2, [pc, #200]	@ (8000754 <HAL_FDCAN_MspInit+0x128>)
 800068c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000690:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000694:	4b2f      	ldr	r3, [pc, #188]	@ (8000754 <HAL_FDCAN_MspInit+0x128>)
 8000696:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800069a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_FDCAN_MspInit+0x128>)
 80006a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006a8:	4a2a      	ldr	r2, [pc, #168]	@ (8000754 <HAL_FDCAN_MspInit+0x128>)
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006b2:	4b28      	ldr	r3, [pc, #160]	@ (8000754 <HAL_FDCAN_MspInit+0x128>)
 80006b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c0:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <HAL_FDCAN_MspInit+0x128>)
 80006c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006c6:	4a23      	ldr	r2, [pc, #140]	@ (8000754 <HAL_FDCAN_MspInit+0x128>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006d0:	4b20      	ldr	r3, [pc, #128]	@ (8000754 <HAL_FDCAN_MspInit+0x128>)
 80006d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PA0     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006de:	2301      	movs	r3, #1
 80006e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80006f6:	2309      	movs	r3, #9
 80006f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000700:	4619      	mov	r1, r3
 8000702:	4815      	ldr	r0, [pc, #84]	@ (8000758 <HAL_FDCAN_MspInit+0x12c>)
 8000704:	f001 fa1e 	bl	8001b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000708:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800070c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000722:	2309      	movs	r3, #9
 8000724:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800072c:	4619      	mov	r1, r3
 800072e:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_FDCAN_MspInit+0x130>)
 8000730:	f001 fa08 	bl	8001b44 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	206d      	movs	r0, #109	@ 0x6d
 800073a:	f000 faa7 	bl	8000c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800073e:	206d      	movs	r0, #109	@ 0x6d
 8000740:	f000 fabe 	bl	8000cc0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8000744:	bf00      	nop
 8000746:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	4000a800 	.word	0x4000a800
 8000754:	44020c00 	.word	0x44020c00
 8000758:	42020000 	.word	0x42020000
 800075c:	42020400 	.word	0x42020400

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <NMI_Handler+0x4>

08000768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <MemManage_Handler+0x4>

08000778 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <BusFault_Handler+0x4>

08000780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <UsageFault_Handler+0x4>

08000788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b6:	f000 f96d 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}

080007be <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 f8b2 	bl	800092c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80007d0:	4802      	ldr	r0, [pc, #8]	@ (80007dc <FDCAN2_IT0_IRQHandler+0x10>)
 80007d2:	f000 ff2f 	bl	8001634 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000028 	.word	0x20000028

080007e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007e6:	4b35      	ldr	r3, [pc, #212]	@ (80008bc <SystemInit+0xdc>)
 80007e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ec:	4a33      	ldr	r2, [pc, #204]	@ (80008bc <SystemInit+0xdc>)
 80007ee:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80007f6:	4b32      	ldr	r3, [pc, #200]	@ (80008c0 <SystemInit+0xe0>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80007fc:	4b30      	ldr	r3, [pc, #192]	@ (80008c0 <SystemInit+0xe0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000802:	4b2f      	ldr	r3, [pc, #188]	@ (80008c0 <SystemInit+0xe0>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000808:	4b2d      	ldr	r3, [pc, #180]	@ (80008c0 <SystemInit+0xe0>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	492c      	ldr	r1, [pc, #176]	@ (80008c0 <SystemInit+0xe0>)
 800080e:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <SystemInit+0xe4>)
 8000810:	4013      	ands	r3, r2
 8000812:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000814:	4b2a      	ldr	r3, [pc, #168]	@ (80008c0 <SystemInit+0xe0>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800081a:	4b29      	ldr	r3, [pc, #164]	@ (80008c0 <SystemInit+0xe0>)
 800081c:	2200      	movs	r2, #0
 800081e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000820:	4b27      	ldr	r3, [pc, #156]	@ (80008c0 <SystemInit+0xe0>)
 8000822:	2200      	movs	r2, #0
 8000824:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000826:	4b26      	ldr	r3, [pc, #152]	@ (80008c0 <SystemInit+0xe0>)
 8000828:	4a27      	ldr	r2, [pc, #156]	@ (80008c8 <SystemInit+0xe8>)
 800082a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800082c:	4b24      	ldr	r3, [pc, #144]	@ (80008c0 <SystemInit+0xe0>)
 800082e:	2200      	movs	r2, #0
 8000830:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000832:	4b23      	ldr	r3, [pc, #140]	@ (80008c0 <SystemInit+0xe0>)
 8000834:	4a24      	ldr	r2, [pc, #144]	@ (80008c8 <SystemInit+0xe8>)
 8000836:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000838:	4b21      	ldr	r3, [pc, #132]	@ (80008c0 <SystemInit+0xe0>)
 800083a:	2200      	movs	r2, #0
 800083c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800083e:	4b20      	ldr	r3, [pc, #128]	@ (80008c0 <SystemInit+0xe0>)
 8000840:	4a21      	ldr	r2, [pc, #132]	@ (80008c8 <SystemInit+0xe8>)
 8000842:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000844:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <SystemInit+0xe0>)
 8000846:	2200      	movs	r2, #0
 8000848:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800084a:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <SystemInit+0xe0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a1c      	ldr	r2, [pc, #112]	@ (80008c0 <SystemInit+0xe0>)
 8000850:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000854:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <SystemInit+0xe0>)
 8000858:	2200      	movs	r2, #0
 800085a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800085c:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <SystemInit+0xdc>)
 800085e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000862:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000864:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <SystemInit+0xec>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800086c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000874:	d003      	beq.n	800087e <SystemInit+0x9e>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800087c:	d117      	bne.n	80008ae <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800087e:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <SystemInit+0xec>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	2b00      	cmp	r3, #0
 8000888:	d005      	beq.n	8000896 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800088a:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <SystemInit+0xec>)
 800088c:	4a10      	ldr	r2, [pc, #64]	@ (80008d0 <SystemInit+0xf0>)
 800088e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000890:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <SystemInit+0xec>)
 8000892:	4a10      	ldr	r2, [pc, #64]	@ (80008d4 <SystemInit+0xf4>)
 8000894:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000896:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <SystemInit+0xec>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	4a0c      	ldr	r2, [pc, #48]	@ (80008cc <SystemInit+0xec>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <SystemInit+0xec>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	4a09      	ldr	r2, [pc, #36]	@ (80008cc <SystemInit+0xec>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	61d3      	str	r3, [r2, #28]
  }
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00
 80008c0:	44020c00 	.word	0x44020c00
 80008c4:	eae2eae3 	.word	0xeae2eae3
 80008c8:	01010280 	.word	0x01010280
 80008cc:	40022000 	.word	0x40022000
 80008d0:	08192a3b 	.word	0x08192a3b
 80008d4:	4c5d6e7f 	.word	0x4c5d6e7f

080008d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d8:	480d      	ldr	r0, [pc, #52]	@ (8000910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008dc:	f7ff ff80 	bl	80007e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e0:	480c      	ldr	r0, [pc, #48]	@ (8000914 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e2:	490d      	ldr	r1, [pc, #52]	@ (8000918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e4:	4a0d      	ldr	r2, [pc, #52]	@ (800091c <LoopForever+0xe>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000924 <LoopForever+0x16>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000906:	f003 fcab 	bl	8004260 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090a:	f7ff fcc3 	bl	8000294 <main>

0800090e <LoopForever>:

LoopForever:
    b LoopForever
 800090e:	e7fe      	b.n	800090e <LoopForever>
  ldr   r0, =_estack
 8000910:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800091c:	080042e8 	.word	0x080042e8
  ldr r2, =_sbss
 8000920:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000924:	2000016c 	.word	0x2000016c

08000928 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC1_IRQHandler>
	...

0800092c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000936:	79fa      	ldrb	r2, [r7, #7]
 8000938:	4613      	mov	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	4413      	add	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <BSP_PB_IRQHandler+0x28>)
 8000942:	4413      	add	r3, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fa79 	bl	8000e3c <HAL_EXTI_IRQHandler>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000015c 	.word	0x2000015c

08000958 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f98a 	bl	8000c76 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000962:	f002 f83d 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8000966:	4602      	mov	r2, r0
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <HAL_Init+0x44>)
 800096a:	6a1b      	ldr	r3, [r3, #32]
 800096c:	f003 030f 	and.w	r3, r3, #15
 8000970:	490b      	ldr	r1, [pc, #44]	@ (80009a0 <HAL_Init+0x48>)
 8000972:	5ccb      	ldrb	r3, [r1, r3]
 8000974:	fa22 f303 	lsr.w	r3, r2, r3
 8000978:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <HAL_Init+0x4c>)
 800097a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800097c:	2004      	movs	r0, #4
 800097e:	f000 f9cf 	bl	8000d20 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000982:	200f      	movs	r0, #15
 8000984:	f000 f810 	bl	80009a8 <HAL_InitTick>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e002      	b.n	8000998 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000992:	f7ff fe43 	bl	800061c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
}
 8000998:	4618      	mov	r0, r3
 800099a:	bd80      	pop	{r7, pc}
 800099c:	44020c00 	.word	0x44020c00
 80009a0:	080042c0 	.word	0x080042c0
 80009a4:	20000000 	.word	0x20000000

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80009b4:	4b33      	ldr	r3, [pc, #204]	@ (8000a84 <HAL_InitTick+0xdc>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d101      	bne.n	80009c0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	e05c      	b.n	8000a7a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80009c0:	4b31      	ldr	r3, [pc, #196]	@ (8000a88 <HAL_InitTick+0xe0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	d10c      	bne.n	80009e6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80009cc:	4b2f      	ldr	r3, [pc, #188]	@ (8000a8c <HAL_InitTick+0xe4>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a84 <HAL_InitTick+0xdc>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	e037      	b.n	8000a56 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80009e6:	f000 f9f3 	bl	8000dd0 <HAL_SYSTICK_GetCLKSourceConfig>
 80009ea:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d023      	beq.n	8000a3a <HAL_InitTick+0x92>
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d82d      	bhi.n	8000a54 <HAL_InitTick+0xac>
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <HAL_InitTick+0x5e>
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d00d      	beq.n	8000a20 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000a04:	e026      	b.n	8000a54 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000a06:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <HAL_InitTick+0xe4>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a84 <HAL_InitTick+0xdc>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000a14:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1c:	60fb      	str	r3, [r7, #12]
        break;
 8000a1e:	e01a      	b.n	8000a56 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000a20:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <HAL_InitTick+0xdc>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a2e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a36:	60fb      	str	r3, [r7, #12]
        break;
 8000a38:	e00d      	b.n	8000a56 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000a3a:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <HAL_InitTick+0xdc>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a50:	60fb      	str	r3, [r7, #12]
        break;
 8000a52:	e000      	b.n	8000a56 <HAL_InitTick+0xae>
        break;
 8000a54:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000a56:	68f8      	ldr	r0, [r7, #12]
 8000a58:	f000 f940 	bl	8000cdc <HAL_SYSTICK_Config>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e009      	b.n	8000a7a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a66:	2200      	movs	r2, #0
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a6e:	f000 f90d 	bl	8000c8c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000a72:	4a07      	ldr	r2, [pc, #28]	@ (8000a90 <HAL_InitTick+0xe8>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008
 8000a88:	e000e010 	.word	0xe000e010
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_IncTick+0x20>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_IncTick+0x24>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <HAL_IncTick+0x24>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000168 	.word	0x20000168

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	@ (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000168 	.word	0x20000168

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff ffee 	bl	8000abc <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000aec:	d005      	beq.n	8000afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aee:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <HAL_Delay+0x44>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000afa:	bf00      	nop
 8000afc:	f7ff ffde 	bl	8000abc <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d8f7      	bhi.n	8000afc <HAL_Delay+0x28>
  {
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	@ (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db0b      	blt.n	8000baa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	f003 021f 	and.w	r2, r3, #31
 8000b98:	4907      	ldr	r1, [pc, #28]	@ (8000bb8 <__NVIC_EnableIRQ+0x38>)
 8000b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	@ (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	@ (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	@ 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
         );
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	@ 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ff4c 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9a:	f7ff ff63 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000c9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	68b9      	ldr	r1, [r7, #8]
 8000ca4:	6978      	ldr	r0, [r7, #20]
 8000ca6:	f7ff ffb3 	bl	8000c10 <NVIC_EncodePriority>
 8000caa:	4602      	mov	r2, r0
 8000cac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff82 	bl	8000bbc <__NVIC_SetPriority>
}
 8000cb8:	bf00      	nop
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff56 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cec:	d301      	bcc.n	8000cf2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00d      	b.n	8000d0e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <HAL_SYSTICK_Config+0x40>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_SYSTICK_Config+0x40>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_SYSTICK_Config+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <HAL_SYSTICK_Config+0x40>)
 8000d06:	f043 0303 	orr.w	r3, r3, #3
 8000d0a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	d844      	bhi.n	8000db8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d34 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d34:	08000d57 	.word	0x08000d57
 8000d38:	08000d75 	.word	0x08000d75
 8000d3c:	08000d97 	.word	0x08000d97
 8000d40:	08000db9 	.word	0x08000db9
 8000d44:	08000d49 	.word	0x08000d49
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000d48:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6013      	str	r3, [r2, #0]
      break;
 8000d54:	e031      	b.n	8000dba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000d56:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d5c:	f023 0304 	bic.w	r3, r3, #4
 8000d60:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000d62:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d68:	4a18      	ldr	r2, [pc, #96]	@ (8000dcc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d6a:	f023 030c 	bic.w	r3, r3, #12
 8000d6e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000d72:	e022      	b.n	8000dba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000d74:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a13      	ldr	r2, [pc, #76]	@ (8000dc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d7a:	f023 0304 	bic.w	r3, r3, #4
 8000d7e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d86:	f023 030c 	bic.w	r3, r3, #12
 8000d8a:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000d94:	e011      	b.n	8000dba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000d96:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d9c:	f023 0304 	bic.w	r3, r3, #4
 8000da0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000da2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000da4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000da8:	f023 030c 	bic.w	r3, r3, #12
 8000dac:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000dae:	f043 0308 	orr.w	r3, r3, #8
 8000db2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000db6:	e000      	b.n	8000dba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000db8:	bf00      	nop
  }
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010
 8000dcc:	44020c00 	.word	0x44020c00

08000dd0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000dd6:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d002      	beq.n	8000de8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000de2:	2304      	movs	r3, #4
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	e01e      	b.n	8000e26 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000dea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000dee:	f003 030c 	and.w	r3, r3, #12
 8000df2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d00f      	beq.n	8000e1a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d80f      	bhi.n	8000e20 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	2b04      	cmp	r3, #4
 8000e0a:	d003      	beq.n	8000e14 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000e0c:	e008      	b.n	8000e20 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
        break;
 8000e12:	e008      	b.n	8000e26 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000e14:	2301      	movs	r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
        break;
 8000e18:	e005      	b.n	8000e26 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	607b      	str	r3, [r7, #4]
        break;
 8000e1e:	e002      	b.n	8000e26 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
        break;
 8000e24:	bf00      	nop
    }
  }
  return systick_source;
 8000e26:	687b      	ldr	r3, [r7, #4]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e010 	.word	0xe000e010
 8000e38:	44020c00 	.word	0x44020c00

08000e3c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	0c1b      	lsrs	r3, r3, #16
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	2201      	movs	r2, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	015a      	lsls	r2, r3, #5
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <HAL_EXTI_IRQHandler+0x88>)
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d009      	beq.n	8000e8e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d002      	beq.n	8000e8e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	015a      	lsls	r2, r3, #5
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <HAL_EXTI_IRQHandler+0x8c>)
 8000e94:	4413      	add	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d009      	beq.n	8000ebc <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	4798      	blx	r3
    }
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	4402200c 	.word	0x4402200c
 8000ec8:	44022010 	.word	0x44022010

08000ecc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e147      	b.n	800116e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d106      	bne.n	8000ef8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fb9a 	bl	800062c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	699a      	ldr	r2, [r3, #24]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0210 	bic.w	r2, r2, #16
 8000f06:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f08:	f7ff fdd8 	bl	8000abc <HAL_GetTick>
 8000f0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f0e:	e012      	b.n	8000f36 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f10:	f7ff fdd4 	bl	8000abc <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b0a      	cmp	r3, #10
 8000f1c:	d90b      	bls.n	8000f36 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f22:	f043 0201 	orr.w	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e11b      	b.n	800116e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d0e5      	beq.n	8000f10 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	699a      	ldr	r2, [r3, #24]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0201 	orr.w	r2, r2, #1
 8000f52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f54:	f7ff fdb2 	bl	8000abc <HAL_GetTick>
 8000f58:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f5a:	e012      	b.n	8000f82 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f5c:	f7ff fdae 	bl	8000abc <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b0a      	cmp	r3, #10
 8000f68:	d90b      	bls.n	8000f82 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6e:	f043 0201 	orr.w	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2203      	movs	r2, #3
 8000f7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e0f5      	b.n	800116e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0e5      	beq.n	8000f5c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	699a      	ldr	r2, [r3, #24]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0202 	orr.w	r2, r2, #2
 8000f9e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a74      	ldr	r2, [pc, #464]	@ (8001178 <HAL_FDCAN_Init+0x2ac>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d103      	bne.n	8000fb2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000faa:	4a74      	ldr	r2, [pc, #464]	@ (800117c <HAL_FDCAN_Init+0x2b0>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7c1b      	ldrb	r3, [r3, #16]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d108      	bne.n	8000fcc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	699a      	ldr	r2, [r3, #24]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fc8:	619a      	str	r2, [r3, #24]
 8000fca:	e007      	b.n	8000fdc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	699a      	ldr	r2, [r3, #24]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fda:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7c5b      	ldrb	r3, [r3, #17]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d108      	bne.n	8000ff6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	699a      	ldr	r2, [r3, #24]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000ff2:	619a      	str	r2, [r3, #24]
 8000ff4:	e007      	b.n	8001006 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	699a      	ldr	r2, [r3, #24]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001004:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7c9b      	ldrb	r3, [r3, #18]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d108      	bne.n	8001020 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	699a      	ldr	r2, [r3, #24]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800101c:	619a      	str	r2, [r3, #24]
 800101e:	e007      	b.n	8001030 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800102e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	699a      	ldr	r2, [r3, #24]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001054:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 0210 	bic.w	r2, r2, #16
 8001064:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d108      	bne.n	8001080 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	699a      	ldr	r2, [r3, #24]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f042 0204 	orr.w	r2, r2, #4
 800107c:	619a      	str	r2, [r3, #24]
 800107e:	e02c      	b.n	80010da <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d028      	beq.n	80010da <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d01c      	beq.n	80010ca <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	699a      	ldr	r2, [r3, #24]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800109e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0210 	orr.w	r2, r2, #16
 80010ae:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d110      	bne.n	80010da <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	699a      	ldr	r2, [r3, #24]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0220 	orr.w	r2, r2, #32
 80010c6:	619a      	str	r2, [r3, #24]
 80010c8:	e007      	b.n	80010da <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	699a      	ldr	r2, [r3, #24]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0220 	orr.w	r2, r2, #32
 80010d8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	3b01      	subs	r3, #1
 80010e0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010ea:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010f2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001102:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001104:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800110e:	d115      	bne.n	800113c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001114:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800111a:	3b01      	subs	r3, #1
 800111c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800111e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001124:	3b01      	subs	r3, #1
 8001126:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001128:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001130:	3b01      	subs	r3, #1
 8001132:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001138:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800113a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	430a      	orrs	r2, r1
 800114e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 fc18 	bl	8001988 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	4000a400 	.word	0x4000a400
 800117c:	4000a500 	.word	0x4000a500

08001180 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b01      	cmp	r3, #1
 8001192:	d110      	bne.n	80011b6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2202      	movs	r2, #2
 8001198:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	699a      	ldr	r2, [r3, #24]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e006      	b.n	80011c4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ba:	f043 0204 	orr.w	r2, r3, #4
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
  }
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d12c      	bne.n	8001242 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d007      	beq.n	8001208 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e023      	b.n	8001250 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001210:	0c1b      	lsrs	r3, r3, #16
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 fc14 	bl	8001a4c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2101      	movs	r1, #1
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	fa01 f202 	lsl.w	r2, r1, r2
 8001230:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001234:	2201      	movs	r2, #1
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	409a      	lsls	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e006      	b.n	8001250 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001246:	f043 0208 	orr.w	r2, r3, #8
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
  }
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001258:	b480      	push	{r7}
 800125a:	b08b      	sub	sp, #44	@ 0x2c
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001270:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001272:	7efb      	ldrb	r3, [r7, #27]
 8001274:	2b02      	cmp	r3, #2
 8001276:	f040 80e8 	bne.w	800144a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	2b40      	cmp	r3, #64	@ 0x40
 800127e:	d137      	bne.n	80012f0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	2b00      	cmp	r3, #0
 800128e:	d107      	bne.n	80012a0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001294:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e0db      	b.n	8001458 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b0:	d10a      	bne.n	80012c8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012c2:	d101      	bne.n	80012c8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80012c4:	2301      	movs	r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	4413      	add	r3, r2
 80012da:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	4613      	mov	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	4413      	add	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	440b      	add	r3, r1
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ee:	e036      	b.n	800135e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d107      	bne.n	8001310 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001304:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0a3      	b.n	8001458 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001318:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800131c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001320:	d10a      	bne.n	8001338 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800132a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001332:	d101      	bne.n	8001338 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001334:	2301      	movs	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	69fa      	ldr	r2, [r7, #28]
 8001348:	4413      	add	r3, r2
 800134a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	4613      	mov	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4413      	add	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	440b      	add	r3, r1
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d107      	bne.n	8001382 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	0c9b      	lsrs	r3, r3, #18
 8001378:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	e005      	b.n	800138e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	3304      	adds	r3, #4
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	0c1b      	lsrs	r3, r3, #16
 80013bc:	f003 020f 	and.w	r2, r3, #15
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80013dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	0e1b      	lsrs	r3, r3, #24
 80013e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	0fda      	lsrs	r2, r3, #31
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80013f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f6:	3304      	adds	r3, #4
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
 8001402:	e00a      	b.n	800141a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	441a      	add	r2, r3
 800140a:	6839      	ldr	r1, [r7, #0]
 800140c:	6a3b      	ldr	r3, [r7, #32]
 800140e:	440b      	add	r3, r1
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	3301      	adds	r3, #1
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	4a11      	ldr	r2, [pc, #68]	@ (8001464 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001420:	5cd3      	ldrb	r3, [r2, r3]
 8001422:	461a      	mov	r2, r3
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	4293      	cmp	r3, r2
 8001428:	d3ec      	bcc.n	8001404 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2b40      	cmp	r3, #64	@ 0x40
 800142e:	d105      	bne.n	800143c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800143a:	e004      	b.n	8001446 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e006      	b.n	8001458 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800144e:	f043 0208 	orr.w	r2, r3, #8
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
  }
}
 8001458:	4618      	mov	r0, r3
 800145a:	372c      	adds	r7, #44	@ 0x2c
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	080042d0 	.word	0x080042d0

08001468 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800147a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800147c:	7dfb      	ldrb	r3, [r7, #23]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d003      	beq.n	800148a <HAL_FDCAN_ActivateNotification+0x22>
 8001482:	7dfb      	ldrb	r3, [r7, #23]
 8001484:	2b02      	cmp	r3, #2
 8001486:	f040 80c8 	bne.w	800161a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001490:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	2b00      	cmp	r3, #0
 800149a:	d004      	beq.n	80014a6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d03b      	beq.n	800151e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d004      	beq.n	80014ba <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d031      	beq.n	800151e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d027      	beq.n	800151e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01d      	beq.n	800151e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d004      	beq.n	80014f6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d013      	beq.n	800151e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d004      	beq.n	800150a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00c      	beq.n	800152e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800151a:	2b00      	cmp	r3, #0
 800151c:	d107      	bne.n	800152e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0201 	orr.w	r2, r2, #1
 800152c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d13b      	bne.n	80015ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d131      	bne.n	80015ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	2b00      	cmp	r3, #0
 8001568:	d127      	bne.n	80015ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d11d      	bne.n	80015ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001584:	2b00      	cmp	r3, #0
 8001586:	d004      	beq.n	8001592 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	d113      	bne.n	80015ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00c      	beq.n	80015ca <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d007      	beq.n	80015ca <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 0202 	orr.w	r2, r2, #2
 80015c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d009      	beq.n	80015e8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	430a      	orrs	r2, r1
 8001602:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	430a      	orrs	r2, r1
 8001614:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e006      	b.n	8001628 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800161e:	f043 0202 	orr.w	r2, r3, #2
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
  }
}
 8001628:	4618      	mov	r0, r3
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08c      	sub	sp, #48	@ 0x30
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001642:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800164e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001650:	4013      	ands	r3, r2
 8001652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001666:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001668:	4013      	ands	r3, r2
 800166a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001672:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800167e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001680:	4013      	ands	r3, r2
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800168a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800168e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001696:	6a3a      	ldr	r2, [r7, #32]
 8001698:	4013      	ands	r3, r2
 800169a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016a2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80016a6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ba:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016c2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	099b      	lsrs	r3, r3, #6
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00c      	beq.n	80016ea <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	099b      	lsrs	r3, r3, #6
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2240      	movs	r2, #64	@ 0x40
 80016e2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f922 	bl	800192e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d01a      	beq.n	800172c <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d014      	beq.n	800172c <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800170a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001722:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001724:	6939      	ldr	r1, [r7, #16]
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f8e2 	bl	80018f0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800172c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001738:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800173a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f8ac 	bl	800189a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001744:	2b00      	cmp	r3, #0
 8001746:	d007      	beq.n	8001758 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800174e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001750:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7fe ff30 	bl	80005b8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	2b00      	cmp	r3, #0
 800175c:	d007      	beq.n	800176e <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001764:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001766:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f8a1 	bl	80018b0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	0a5b      	lsrs	r3, r3, #9
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00d      	beq.n	8001796 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	0a5b      	lsrs	r3, r3, #9
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800178e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f898 	bl	80018c6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	09db      	lsrs	r3, r3, #7
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d019      	beq.n	80017d6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	09db      	lsrs	r3, r3, #7
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d013      	beq.n	80017d6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017b6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4013      	ands	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2280      	movs	r2, #128	@ 0x80
 80017cc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80017ce:	68f9      	ldr	r1, [r7, #12]
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f882 	bl	80018da <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	0b5b      	lsrs	r3, r3, #13
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00d      	beq.n	80017fe <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	0b5b      	lsrs	r3, r3, #13
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017f6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f884 	bl	8001906 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	0bdb      	lsrs	r3, r3, #15
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00d      	beq.n	8001826 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	0bdb      	lsrs	r3, r3, #15
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800181e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f87a 	bl	800191a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	0b9b      	lsrs	r3, r3, #14
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d010      	beq.n	8001854 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	0b9b      	lsrs	r3, r3, #14
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00a      	beq.n	8001854 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001846:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001862:	69f9      	ldr	r1, [r7, #28]
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f876 	bl	8001956 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d009      	beq.n	8001884 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6a3a      	ldr	r2, [r7, #32]
 8001876:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f858 	bl	8001942 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001892:	bf00      	nop
 8001894:	3730      	adds	r7, #48	@ 0x30
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_FDCAN_GetState>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL state
  */
HAL_FDCAN_StateTypeDef HAL_FDCAN_GetState(const FDCAN_HandleTypeDef *hfdcan)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Return FDCAN state */
  return hfdcan->State;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800197a:	b2db      	uxtb	r3, r3
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001990:	4b2c      	ldr	r3, [pc, #176]	@ (8001a44 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001992:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a2b      	ldr	r2, [pc, #172]	@ (8001a48 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d103      	bne.n	80019a6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80019a4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019b4:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019bc:	041a      	lsls	r2, r3, #16
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019da:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e2:	061a      	lsls	r2, r3, #24
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	e005      	b.n	8001a28 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3304      	adds	r3, #4
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d3f3      	bcc.n	8001a1c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	4000ac00 	.word	0x4000ac00
 8001a48:	4000a800 	.word	0x4000a800

08001a4c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	@ 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10a      	bne.n	8001a78 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001a6a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	e00a      	b.n	8001a8e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001a80:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001a86:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a8c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001a98:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001a9e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001aa4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	3304      	adds	r3, #4
 8001acc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e020      	b.n	8001b22 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	3303      	adds	r3, #3
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3302      	adds	r3, #2
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	440b      	add	r3, r1
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001af8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	440b      	add	r3, r1
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001b06:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	440a      	add	r2, r1
 8001b0e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001b10:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3304      	adds	r3, #4
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4a06      	ldr	r2, [pc, #24]	@ (8001b40 <FDCAN_CopyMessageToRAM+0xf4>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d3d6      	bcc.n	8001ae0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001b32:	bf00      	nop
 8001b34:	bf00      	nop
 8001b36:	3724      	adds	r7, #36	@ 0x24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	080042d0 	.word	0x080042d0

08001b44 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b52:	e142      	b.n	8001dda <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8134 	beq.w	8001dd4 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x38>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b12      	cmp	r3, #18
 8001b7a:	d125      	bne.n	8001bc8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3208      	adds	r2, #8
 8001b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b88:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	f003 020f 	and.w	r2, r3, #15
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	08da      	lsrs	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3208      	adds	r2, #8
 8001bc2:	6979      	ldr	r1, [r7, #20]
 8001bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d00b      	beq.n	8001c1c <HAL_GPIO_Init+0xd8>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d007      	beq.n	8001c1c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c10:	2b11      	cmp	r3, #17
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b12      	cmp	r3, #18
 8001c1a:	d130      	bne.n	8001c7e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4013      	ands	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c52:	2201      	movs	r2, #1
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	091b      	lsrs	r3, r3, #4
 8001c68:	f003 0201 	and.w	r2, r3, #1
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d109      	bne.n	8001c9e <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d11b      	bne.n	8001cce <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d017      	beq.n	8001cce <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d07c      	beq.n	8001dd4 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001cda:	4a47      	ldr	r2, [pc, #284]	@ (8001df8 <HAL_GPIO_Init+0x2b4>)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3318      	adds	r3, #24
 8001ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	0a9a      	lsrs	r2, r3, #10
 8001d02:	4b3e      	ldr	r3, [pc, #248]	@ (8001dfc <HAL_GPIO_Init+0x2b8>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	f002 0203 	and.w	r2, r2, #3
 8001d0c:	00d2      	lsls	r2, r2, #3
 8001d0e:	4093      	lsls	r3, r2
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001d16:	4938      	ldr	r1, [pc, #224]	@ (8001df8 <HAL_GPIO_Init+0x2b4>)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3318      	adds	r3, #24
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001d24:	4b34      	ldr	r3, [pc, #208]	@ (8001df8 <HAL_GPIO_Init+0x2b4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4013      	ands	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001d48:	4a2b      	ldr	r2, [pc, #172]	@ (8001df8 <HAL_GPIO_Init+0x2b4>)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001df8 <HAL_GPIO_Init+0x2b4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001d72:	4a21      	ldr	r2, [pc, #132]	@ (8001df8 <HAL_GPIO_Init+0x2b4>)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001d78:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <HAL_GPIO_Init+0x2b4>)
 8001d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d7e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	4013      	ands	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001d9e:	4a16      	ldr	r2, [pc, #88]	@ (8001df8 <HAL_GPIO_Init+0x2b4>)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001da6:	4b14      	ldr	r3, [pc, #80]	@ (8001df8 <HAL_GPIO_Init+0x2b4>)
 8001da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dac:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4013      	ands	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <HAL_GPIO_Init+0x2b4>)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f47f aeb5 	bne.w	8001b54 <HAL_GPIO_Init+0x10>
  }
}
 8001dea:	bf00      	nop
 8001dec:	bf00      	nop
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	44022000 	.word	0x44022000
 8001dfc:	002f7f7f 	.word	0x002f7f7f

08001e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f000 bc28 	b.w	8002664 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e14:	4b94      	ldr	r3, [pc, #592]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	f003 0318 	and.w	r3, r3, #24
 8001e1c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001e1e:	4b92      	ldr	r3, [pc, #584]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d05b      	beq.n	8001eec <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d005      	beq.n	8001e46 <HAL_RCC_OscConfig+0x46>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	2b18      	cmp	r3, #24
 8001e3e:	d114      	bne.n	8001e6a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d111      	bne.n	8001e6a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d102      	bne.n	8001e54 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f000 bc08 	b.w	8002664 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001e54:	4b84      	ldr	r3, [pc, #528]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	4981      	ldr	r1, [pc, #516]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001e68:	e040      	b.n	8001eec <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d023      	beq.n	8001eba <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e72:	4b7d      	ldr	r3, [pc, #500]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a7c      	ldr	r2, [pc, #496]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7fe fe1d 	bl	8000abc <HAL_GetTick>
 8001e82:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001e86:	f7fe fe19 	bl	8000abc <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e3e5      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001e98:	4b73      	ldr	r3, [pc, #460]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001ea4:	4b70      	ldr	r3, [pc, #448]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	041b      	lsls	r3, r3, #16
 8001eb2:	496d      	ldr	r1, [pc, #436]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	618b      	str	r3, [r1, #24]
 8001eb8:	e018      	b.n	8001eec <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001eba:	4b6b      	ldr	r3, [pc, #428]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a6a      	ldr	r2, [pc, #424]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001ec0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7fe fdf9 	bl	8000abc <HAL_GetTick>
 8001eca:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001ece:	f7fe fdf5 	bl	8000abc <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e3c1      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001ee0:	4b61      	ldr	r3, [pc, #388]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80a0 	beq.w	800203a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	2b10      	cmp	r3, #16
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_OscConfig+0x10c>
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2b18      	cmp	r3, #24
 8001f04:	d109      	bne.n	8001f1a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f040 8092 	bne.w	800203a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e3a4      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x132>
 8001f24:	4b50      	ldr	r3, [pc, #320]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a4f      	ldr	r2, [pc, #316]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	e058      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1e4>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d112      	bne.n	8001f60 <HAL_RCC_OscConfig+0x160>
 8001f3a:	4b4b      	ldr	r3, [pc, #300]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a4a      	ldr	r2, [pc, #296]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b48      	ldr	r3, [pc, #288]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a47      	ldr	r2, [pc, #284]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001f4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b45      	ldr	r3, [pc, #276]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a44      	ldr	r2, [pc, #272]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001f58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e041      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1e4>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f68:	d112      	bne.n	8001f90 <HAL_RCC_OscConfig+0x190>
 8001f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a3e      	ldr	r2, [pc, #248]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001f70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b3c      	ldr	r3, [pc, #240]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001f7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	4b39      	ldr	r3, [pc, #228]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a38      	ldr	r2, [pc, #224]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e029      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1e4>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001f98:	d112      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x1c0>
 8001f9a:	4b33      	ldr	r3, [pc, #204]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a32      	ldr	r2, [pc, #200]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001fa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4b30      	ldr	r3, [pc, #192]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a2f      	ldr	r2, [pc, #188]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001fac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a2c      	ldr	r2, [pc, #176]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e011      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1e4>
 8001fc0:	4b29      	ldr	r3, [pc, #164]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a28      	ldr	r2, [pc, #160]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b26      	ldr	r3, [pc, #152]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a25      	ldr	r2, [pc, #148]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	4b23      	ldr	r3, [pc, #140]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a22      	ldr	r2, [pc, #136]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8001fde:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d013      	beq.n	8002014 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7fe fd66 	bl	8000abc <HAL_GetTick>
 8001ff0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001ff4:	f7fe fd62 	bl	8000abc <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	@ 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e32e      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002006:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x1f4>
 8002012:	e012      	b.n	800203a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7fe fd52 	bl	8000abc <HAL_GetTick>
 8002018:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800201c:	f7fe fd4e 	bl	8000abc <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	@ 0x64
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e31a      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800202e:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <HAL_RCC_OscConfig+0x268>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 809a 	beq.w	800217c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x25a>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	2b18      	cmp	r3, #24
 8002052:	d149      	bne.n	80020e8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d146      	bne.n	80020e8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d104      	bne.n	800206c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e2fe      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
 8002066:	bf00      	nop
 8002068:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d11c      	bne.n	80020ac <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002072:	4b9a      	ldr	r3, [pc, #616]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0218 	and.w	r2, r3, #24
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	429a      	cmp	r2, r3
 8002080:	d014      	beq.n	80020ac <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002082:	4b96      	ldr	r3, [pc, #600]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 0218 	bic.w	r2, r3, #24
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	4993      	ldr	r1, [pc, #588]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002094:	f000 fdd0 	bl	8002c38 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002098:	4b91      	ldr	r3, [pc, #580]	@ (80022e0 <HAL_RCC_OscConfig+0x4e0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fc83 	bl	80009a8 <HAL_InitTick>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e2db      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7fe fd06 	bl	8000abc <HAL_GetTick>
 80020b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80020b4:	f7fe fd02 	bl	8000abc <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e2ce      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c6:	4b85      	ldr	r3, [pc, #532]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80020d2:	4b82      	ldr	r3, [pc, #520]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	041b      	lsls	r3, r3, #16
 80020e0:	497e      	ldr	r1, [pc, #504]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80020e6:	e049      	b.n	800217c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d02c      	beq.n	800214a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80020f0:	4b7a      	ldr	r3, [pc, #488]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 0218 	bic.w	r2, r3, #24
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	4977      	ldr	r1, [pc, #476]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002102:	4b76      	ldr	r3, [pc, #472]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a75      	ldr	r2, [pc, #468]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7fe fcd5 	bl	8000abc <HAL_GetTick>
 8002112:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002116:	f7fe fcd1 	bl	8000abc <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e29d      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002128:	4b6c      	ldr	r3, [pc, #432]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002134:	4b69      	ldr	r3, [pc, #420]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	041b      	lsls	r3, r3, #16
 8002142:	4966      	ldr	r1, [pc, #408]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	610b      	str	r3, [r1, #16]
 8002148:	e018      	b.n	800217c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214a:	4b64      	ldr	r3, [pc, #400]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a63      	ldr	r2, [pc, #396]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7fe fcb1 	bl	8000abc <HAL_GetTick>
 800215a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800215e:	f7fe fcad 	bl	8000abc <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e279      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002170:	4b5a      	ldr	r3, [pc, #360]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d03c      	beq.n	8002202 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01c      	beq.n	80021ca <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002190:	4b52      	ldr	r3, [pc, #328]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002196:	4a51      	ldr	r2, [pc, #324]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002198:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800219c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7fe fc8c 	bl	8000abc <HAL_GetTick>
 80021a4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80021a8:	f7fe fc88 	bl	8000abc <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e254      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80021ba:	4b48      	ldr	r3, [pc, #288]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 80021bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ef      	beq.n	80021a8 <HAL_RCC_OscConfig+0x3a8>
 80021c8:	e01b      	b.n	8002202 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ca:	4b44      	ldr	r3, [pc, #272]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 80021cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021d0:	4a42      	ldr	r2, [pc, #264]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 80021d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80021d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7fe fc6f 	bl	8000abc <HAL_GetTick>
 80021de:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80021e2:	f7fe fc6b 	bl	8000abc <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e237      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80021f4:	4b39      	ldr	r3, [pc, #228]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 80021f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ef      	bne.n	80021e2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80d2 	beq.w	80023b4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002210:	4b34      	ldr	r3, [pc, #208]	@ (80022e4 <HAL_RCC_OscConfig+0x4e4>)
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d118      	bne.n	800224e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800221c:	4b31      	ldr	r3, [pc, #196]	@ (80022e4 <HAL_RCC_OscConfig+0x4e4>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002220:	4a30      	ldr	r2, [pc, #192]	@ (80022e4 <HAL_RCC_OscConfig+0x4e4>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002228:	f7fe fc48 	bl	8000abc <HAL_GetTick>
 800222c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002230:	f7fe fc44 	bl	8000abc <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e210      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002242:	4b28      	ldr	r3, [pc, #160]	@ (80022e4 <HAL_RCC_OscConfig+0x4e4>)
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d108      	bne.n	8002268 <HAL_RCC_OscConfig+0x468>
 8002256:	4b21      	ldr	r3, [pc, #132]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800225c:	4a1f      	ldr	r2, [pc, #124]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002266:	e074      	b.n	8002352 <HAL_RCC_OscConfig+0x552>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d118      	bne.n	80022a2 <HAL_RCC_OscConfig+0x4a2>
 8002270:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002276:	4a19      	ldr	r2, [pc, #100]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002280:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002286:	4a15      	ldr	r2, [pc, #84]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002288:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800228c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002290:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002296:	4a11      	ldr	r2, [pc, #68]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022a0:	e057      	b.n	8002352 <HAL_RCC_OscConfig+0x552>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b05      	cmp	r3, #5
 80022a8:	d11e      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4e8>
 80022aa:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 80022ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022b0:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022ba:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 80022bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022c0:	4a06      	ldr	r2, [pc, #24]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 80022c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022ca:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 80022cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022d0:	4a02      	ldr	r2, [pc, #8]	@ (80022dc <HAL_RCC_OscConfig+0x4dc>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022da:	e03a      	b.n	8002352 <HAL_RCC_OscConfig+0x552>
 80022dc:	44020c00 	.word	0x44020c00
 80022e0:	20000004 	.word	0x20000004
 80022e4:	44020800 	.word	0x44020800
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b85      	cmp	r3, #133	@ 0x85
 80022ee:	d118      	bne.n	8002322 <HAL_RCC_OscConfig+0x522>
 80022f0:	4ba2      	ldr	r3, [pc, #648]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 80022f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022f6:	4aa1      	ldr	r2, [pc, #644]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002300:	4b9e      	ldr	r3, [pc, #632]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002306:	4a9d      	ldr	r2, [pc, #628]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800230c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002310:	4b9a      	ldr	r3, [pc, #616]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002316:	4a99      	ldr	r2, [pc, #612]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002320:	e017      	b.n	8002352 <HAL_RCC_OscConfig+0x552>
 8002322:	4b96      	ldr	r3, [pc, #600]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002328:	4a94      	ldr	r2, [pc, #592]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002332:	4b92      	ldr	r3, [pc, #584]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002338:	4a90      	ldr	r2, [pc, #576]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 800233a:	f023 0304 	bic.w	r3, r3, #4
 800233e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002342:	4b8e      	ldr	r3, [pc, #568]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002348:	4a8c      	ldr	r2, [pc, #560]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 800234a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800234e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d016      	beq.n	8002388 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7fe fbaf 	bl	8000abc <HAL_GetTick>
 800235e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe fbab 	bl	8000abc <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e175      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002378:	4b80      	ldr	r3, [pc, #512]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 800237a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0ed      	beq.n	8002362 <HAL_RCC_OscConfig+0x562>
 8002386:	e015      	b.n	80023b4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002388:	f7fe fb98 	bl	8000abc <HAL_GetTick>
 800238c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002390:	f7fe fb94 	bl	8000abc <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e15e      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023a6:	4b75      	ldr	r3, [pc, #468]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 80023a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ed      	bne.n	8002390 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d036      	beq.n	800242e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d019      	beq.n	80023fc <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023c8:	4b6c      	ldr	r3, [pc, #432]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a6b      	ldr	r2, [pc, #428]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 80023ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7fe fb72 	bl	8000abc <HAL_GetTick>
 80023d8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80023dc:	f7fe fb6e 	bl	8000abc <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e13a      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80023ee:	4b63      	ldr	r3, [pc, #396]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x5dc>
 80023fa:	e018      	b.n	800242e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023fc:	4b5f      	ldr	r3, [pc, #380]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a5e      	ldr	r2, [pc, #376]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002402:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002406:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7fe fb58 	bl	8000abc <HAL_GetTick>
 800240c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002410:	f7fe fb54 	bl	8000abc <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e120      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002422:	4b56      	ldr	r3, [pc, #344]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8115 	beq.w	8002662 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b18      	cmp	r3, #24
 800243c:	f000 80af 	beq.w	800259e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	2b02      	cmp	r3, #2
 8002446:	f040 8086 	bne.w	8002556 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800244a:	4b4c      	ldr	r3, [pc, #304]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a4b      	ldr	r2, [pc, #300]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002450:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7fe fb31 	bl	8000abc <HAL_GetTick>
 800245a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800245e:	f7fe fb2d 	bl	8000abc <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e0f9      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002470:	4b42      	ldr	r3, [pc, #264]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1f0      	bne.n	800245e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800247c:	4b3f      	ldr	r3, [pc, #252]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 800247e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002480:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002484:	f023 0303 	bic.w	r3, r3, #3
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002490:	0212      	lsls	r2, r2, #8
 8002492:	430a      	orrs	r2, r1
 8002494:	4939      	ldr	r1, [pc, #228]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002496:	4313      	orrs	r3, r2
 8002498:	628b      	str	r3, [r1, #40]	@ 0x28
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800249e:	3b01      	subs	r3, #1
 80024a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a8:	3b01      	subs	r3, #1
 80024aa:	025b      	lsls	r3, r3, #9
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b4:	3b01      	subs	r3, #1
 80024b6:	041b      	lsls	r3, r3, #16
 80024b8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	3b01      	subs	r3, #1
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80024ca:	492c      	ldr	r1, [pc, #176]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80024d0:	4b2a      	ldr	r3, [pc, #168]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	4a29      	ldr	r2, [pc, #164]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 80024d6:	f023 0310 	bic.w	r3, r3, #16
 80024da:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e0:	4a26      	ldr	r2, [pc, #152]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80024e6:	4b25      	ldr	r3, [pc, #148]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	4a24      	ldr	r2, [pc, #144]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 80024ec:	f043 0310 	orr.w	r3, r3, #16
 80024f0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80024f2:	4b22      	ldr	r3, [pc, #136]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 80024f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f6:	f023 020c 	bic.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	491f      	ldr	r1, [pc, #124]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002500:	4313      	orrs	r3, r2
 8002502:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002504:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	f023 0220 	bic.w	r2, r3, #32
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002510:	491a      	ldr	r1, [pc, #104]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002512:	4313      	orrs	r3, r2
 8002514:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002516:	4b19      	ldr	r3, [pc, #100]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251a:	4a18      	ldr	r2, [pc, #96]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002520:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002522:	4b16      	ldr	r3, [pc, #88]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a15      	ldr	r2, [pc, #84]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002528:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800252c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7fe fac5 	bl	8000abc <HAL_GetTick>
 8002532:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002536:	f7fe fac1 	bl	8000abc <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e08d      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002548:	4b0c      	ldr	r3, [pc, #48]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x736>
 8002554:	e085      	b.n	8002662 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002556:	4b09      	ldr	r3, [pc, #36]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a08      	ldr	r2, [pc, #32]	@ (800257c <HAL_RCC_OscConfig+0x77c>)
 800255c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7fe faab 	bl	8000abc <HAL_GetTick>
 8002566:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002568:	e00a      	b.n	8002580 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800256a:	f7fe faa7 	bl	8000abc <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d903      	bls.n	8002580 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e073      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
 800257c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002580:	4b3a      	ldr	r3, [pc, #232]	@ (800266c <HAL_RCC_OscConfig+0x86c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1ee      	bne.n	800256a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800258c:	4b37      	ldr	r3, [pc, #220]	@ (800266c <HAL_RCC_OscConfig+0x86c>)
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	4a36      	ldr	r2, [pc, #216]	@ (800266c <HAL_RCC_OscConfig+0x86c>)
 8002592:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002596:	f023 0303 	bic.w	r3, r3, #3
 800259a:	6293      	str	r3, [r2, #40]	@ 0x28
 800259c:	e061      	b.n	8002662 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800259e:	4b33      	ldr	r3, [pc, #204]	@ (800266c <HAL_RCC_OscConfig+0x86c>)
 80025a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80025a4:	4b31      	ldr	r3, [pc, #196]	@ (800266c <HAL_RCC_OscConfig+0x86c>)
 80025a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d031      	beq.n	8002616 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f003 0203 	and.w	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d12a      	bne.n	8002616 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d122      	bne.n	8002616 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025da:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80025dc:	429a      	cmp	r2, r3
 80025de:	d11a      	bne.n	8002616 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	0a5b      	lsrs	r3, r3, #9
 80025e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ec:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d111      	bne.n	8002616 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	0c1b      	lsrs	r3, r3, #16
 80025f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fe:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d108      	bne.n	8002616 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	0e1b      	lsrs	r3, r3, #24
 8002608:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002610:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d001      	beq.n	800261a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e024      	b.n	8002664 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800261a:	4b14      	ldr	r3, [pc, #80]	@ (800266c <HAL_RCC_OscConfig+0x86c>)
 800261c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800261e:	08db      	lsrs	r3, r3, #3
 8002620:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002628:	429a      	cmp	r2, r3
 800262a:	d01a      	beq.n	8002662 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800262c:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <HAL_RCC_OscConfig+0x86c>)
 800262e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002630:	4a0e      	ldr	r2, [pc, #56]	@ (800266c <HAL_RCC_OscConfig+0x86c>)
 8002632:	f023 0310 	bic.w	r3, r3, #16
 8002636:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe fa40 	bl	8000abc <HAL_GetTick>
 800263c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800263e:	bf00      	nop
 8002640:	f7fe fa3c 	bl	8000abc <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	4293      	cmp	r3, r2
 800264a:	d0f9      	beq.n	8002640 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002650:	4a06      	ldr	r2, [pc, #24]	@ (800266c <HAL_RCC_OscConfig+0x86c>)
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_RCC_OscConfig+0x86c>)
 8002658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265a:	4a04      	ldr	r2, [pc, #16]	@ (800266c <HAL_RCC_OscConfig+0x86c>)
 800265c:	f043 0310 	orr.w	r3, r3, #16
 8002660:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3720      	adds	r7, #32
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	44020c00 	.word	0x44020c00

08002670 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e19e      	b.n	80029c2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b83      	ldr	r3, [pc, #524]	@ (8002894 <HAL_RCC_ClockConfig+0x224>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d910      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b80      	ldr	r3, [pc, #512]	@ (8002894 <HAL_RCC_ClockConfig+0x224>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 020f 	bic.w	r2, r3, #15
 800269a:	497e      	ldr	r1, [pc, #504]	@ (8002894 <HAL_RCC_ClockConfig+0x224>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002894 <HAL_RCC_ClockConfig+0x224>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e186      	b.n	80029c2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d012      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	4b74      	ldr	r3, [pc, #464]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d909      	bls.n	80026e6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80026d2:	4b71      	ldr	r3, [pc, #452]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	496d      	ldr	r1, [pc, #436]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d012      	beq.n	8002718 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	4b68      	ldr	r3, [pc, #416]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002700:	429a      	cmp	r2, r3
 8002702:	d909      	bls.n	8002718 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002704:	4b64      	ldr	r3, [pc, #400]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	4961      	ldr	r1, [pc, #388]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 8002714:	4313      	orrs	r3, r2
 8002716:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d010      	beq.n	8002746 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	4b5b      	ldr	r3, [pc, #364]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002730:	429a      	cmp	r2, r3
 8002732:	d908      	bls.n	8002746 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002734:	4b58      	ldr	r3, [pc, #352]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4955      	ldr	r1, [pc, #340]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 8002742:	4313      	orrs	r3, r2
 8002744:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d010      	beq.n	8002774 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	4b50      	ldr	r3, [pc, #320]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	429a      	cmp	r2, r3
 8002760:	d908      	bls.n	8002774 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002762:	4b4d      	ldr	r3, [pc, #308]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	f023 020f 	bic.w	r2, r3, #15
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	494a      	ldr	r1, [pc, #296]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 8002770:	4313      	orrs	r3, r2
 8002772:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8093 	beq.w	80028a8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800278a:	4b43      	ldr	r3, [pc, #268]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d121      	bne.n	80027da <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e113      	b.n	80029c2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d115      	bne.n	80027da <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e107      	b.n	80029c2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80027ba:	4b37      	ldr	r3, [pc, #220]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e0fb      	b.n	80029c2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ca:	4b33      	ldr	r3, [pc, #204]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0f3      	b.n	80029c2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80027da:	4b2f      	ldr	r3, [pc, #188]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f023 0203 	bic.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	492c      	ldr	r1, [pc, #176]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ec:	f7fe f966 	bl	8000abc <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d112      	bne.n	8002820 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80027fc:	f7fe f95e 	bl	8000abc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0d7      	b.n	80029c2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002812:	4b21      	ldr	r3, [pc, #132]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f003 0318 	and.w	r3, r3, #24
 800281a:	2b18      	cmp	r3, #24
 800281c:	d1ee      	bne.n	80027fc <HAL_RCC_ClockConfig+0x18c>
 800281e:	e043      	b.n	80028a8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d112      	bne.n	800284e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800282a:	f7fe f947 	bl	8000abc <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0c0      	b.n	80029c2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002840:	4b15      	ldr	r3, [pc, #84]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	f003 0318 	and.w	r3, r3, #24
 8002848:	2b10      	cmp	r3, #16
 800284a:	d1ee      	bne.n	800282a <HAL_RCC_ClockConfig+0x1ba>
 800284c:	e02c      	b.n	80028a8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d122      	bne.n	800289c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002856:	e00a      	b.n	800286e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002858:	f7fe f930 	bl	8000abc <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e0a9      	b.n	80029c2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800286e:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <HAL_RCC_ClockConfig+0x228>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 0318 	and.w	r3, r3, #24
 8002876:	2b08      	cmp	r3, #8
 8002878:	d1ee      	bne.n	8002858 <HAL_RCC_ClockConfig+0x1e8>
 800287a:	e015      	b.n	80028a8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800287c:	f7fe f91e 	bl	8000abc <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288a:	4293      	cmp	r3, r2
 800288c:	d906      	bls.n	800289c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e097      	b.n	80029c2 <HAL_RCC_ClockConfig+0x352>
 8002892:	bf00      	nop
 8002894:	40022000 	.word	0x40022000
 8002898:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800289c:	4b4b      	ldr	r3, [pc, #300]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	f003 0318 	and.w	r3, r3, #24
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1e9      	bne.n	800287c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d010      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	4b44      	ldr	r3, [pc, #272]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d208      	bcs.n	80028d6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80028c4:	4b41      	ldr	r3, [pc, #260]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f023 020f 	bic.w	r2, r3, #15
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	493e      	ldr	r1, [pc, #248]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028d6:	4b3e      	ldr	r3, [pc, #248]	@ (80029d0 <HAL_RCC_ClockConfig+0x360>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d210      	bcs.n	8002906 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e4:	4b3a      	ldr	r3, [pc, #232]	@ (80029d0 <HAL_RCC_ClockConfig+0x360>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f023 020f 	bic.w	r2, r3, #15
 80028ec:	4938      	ldr	r1, [pc, #224]	@ (80029d0 <HAL_RCC_ClockConfig+0x360>)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f4:	4b36      	ldr	r3, [pc, #216]	@ (80029d0 <HAL_RCC_ClockConfig+0x360>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d001      	beq.n	8002906 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e05d      	b.n	80029c2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d010      	beq.n	8002934 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	4b2d      	ldr	r3, [pc, #180]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800291e:	429a      	cmp	r2, r3
 8002920:	d208      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002922:	4b2a      	ldr	r3, [pc, #168]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	4927      	ldr	r1, [pc, #156]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 8002930:	4313      	orrs	r3, r2
 8002932:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d012      	beq.n	8002966 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	4b21      	ldr	r3, [pc, #132]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800294e:	429a      	cmp	r2, r3
 8002950:	d209      	bcs.n	8002966 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002952:	4b1e      	ldr	r3, [pc, #120]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	491a      	ldr	r1, [pc, #104]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 8002962:	4313      	orrs	r3, r2
 8002964:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b00      	cmp	r3, #0
 8002970:	d012      	beq.n	8002998 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002980:	429a      	cmp	r2, r3
 8002982:	d209      	bcs.n	8002998 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	490e      	ldr	r1, [pc, #56]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 8002994:	4313      	orrs	r3, r2
 8002996:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002998:	f000 f822 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b0b      	ldr	r3, [pc, #44]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	490b      	ldr	r1, [pc, #44]	@ (80029d4 <HAL_RCC_ClockConfig+0x364>)
 80029a8:	5ccb      	ldrb	r3, [r1, r3]
 80029aa:	fa22 f303 	lsr.w	r3, r2, r3
 80029ae:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <HAL_RCC_ClockConfig+0x368>)
 80029b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80029b2:	4b0a      	ldr	r3, [pc, #40]	@ (80029dc <HAL_RCC_ClockConfig+0x36c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fff6 	bl	80009a8 <HAL_InitTick>
 80029bc:	4603      	mov	r3, r0
 80029be:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80029c0:	7afb      	ldrb	r3, [r7, #11]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	44020c00 	.word	0x44020c00
 80029d0:	40022000 	.word	0x40022000
 80029d4:	080042c0 	.word	0x080042c0
 80029d8:	20000000 	.word	0x20000000
 80029dc:	20000004 	.word	0x20000004

080029e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b089      	sub	sp, #36	@ 0x24
 80029e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80029e6:	4b8c      	ldr	r3, [pc, #560]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f003 0318 	and.w	r3, r3, #24
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d102      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80029f2:	4b8a      	ldr	r3, [pc, #552]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x23c>)
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	e107      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029f8:	4b87      	ldr	r3, [pc, #540]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f003 0318 	and.w	r3, r3, #24
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d112      	bne.n	8002a2a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002a04:	4b84      	ldr	r3, [pc, #528]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d009      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002a10:	4b81      	ldr	r3, [pc, #516]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	08db      	lsrs	r3, r3, #3
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	4a81      	ldr	r2, [pc, #516]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x240>)
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	e0f1      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002a24:	4b7e      	ldr	r3, [pc, #504]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x240>)
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	e0ee      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 0318 	and.w	r3, r3, #24
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d102      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a36:	4b7b      	ldr	r3, [pc, #492]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x244>)
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	e0e5      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a3c:	4b76      	ldr	r3, [pc, #472]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	f003 0318 	and.w	r3, r3, #24
 8002a44:	2b18      	cmp	r3, #24
 8002a46:	f040 80dd 	bne.w	8002c04 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002a4a:	4b73      	ldr	r3, [pc, #460]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002a54:	4b70      	ldr	r3, [pc, #448]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002a60:	4b6d      	ldr	r3, [pc, #436]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002a6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002a70:	08db      	lsrs	r3, r3, #3
 8002a72:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	fb02 f303 	mul.w	r3, r2, r3
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a84:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80b7 	beq.w	8002bfe <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d003      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0xbe>
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d056      	beq.n	8002b4a <HAL_RCC_GetSysClockFreq+0x16a>
 8002a9c:	e077      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002a9e:	4b5e      	ldr	r3, [pc, #376]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d02d      	beq.n	8002b06 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	08db      	lsrs	r3, r3, #3
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	4a5a      	ldr	r2, [pc, #360]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x240>)
 8002ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aba:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ad4:	4b50      	ldr	r3, [pc, #320]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002adc:	ee07 3a90 	vmov	s15, r3
 8002ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ae4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ae8:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002c28 <HAL_RCC_GetSysClockFreq+0x248>
 8002aec:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002af0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002af4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002af8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b00:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002b04:	e065      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	ee07 3a90 	vmov	s15, r3
 8002b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b10:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002c2c <HAL_RCC_GetSysClockFreq+0x24c>
 8002b14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b18:	4b3f      	ldr	r3, [pc, #252]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b20:	ee07 3a90 	vmov	s15, r3
 8002b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b28:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b2c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002c28 <HAL_RCC_GetSysClockFreq+0x248>
 8002b30:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b34:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b44:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002b48:	e043      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	ee07 3a90 	vmov	s15, r3
 8002b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b54:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002c30 <HAL_RCC_GetSysClockFreq+0x250>
 8002b58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b64:	ee07 3a90 	vmov	s15, r3
 8002b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b70:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002c28 <HAL_RCC_GetSysClockFreq+0x248>
 8002b74:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b78:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b80:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b88:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002b8c:	e021      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	ee07 3a90 	vmov	s15, r3
 8002b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b98:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002c34 <HAL_RCC_GetSysClockFreq+0x254>
 8002b9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bb4:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002c28 <HAL_RCC_GetSysClockFreq+0x248>
 8002bb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bcc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002bd0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002bd2:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x238>)
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd6:	0a5b      	lsrs	r3, r3, #9
 8002bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bdc:	3301      	adds	r3, #1
 8002bde:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	ee07 3a90 	vmov	s15, r3
 8002be6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bea:	edd7 6a06 	vldr	s13, [r7, #24]
 8002bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bf6:	ee17 3a90 	vmov	r3, s15
 8002bfa:	61fb      	str	r3, [r7, #28]
 8002bfc:	e004      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	e001      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002c04:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c06:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002c08:	69fb      	ldr	r3, [r7, #28]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3724      	adds	r7, #36	@ 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	44020c00 	.word	0x44020c00
 8002c1c:	003d0900 	.word	0x003d0900
 8002c20:	03d09000 	.word	0x03d09000
 8002c24:	017d7840 	.word	0x017d7840
 8002c28:	46000000 	.word	0x46000000
 8002c2c:	4c742400 	.word	0x4c742400
 8002c30:	4bbebc20 	.word	0x4bbebc20
 8002c34:	4a742400 	.word	0x4a742400

08002c38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002c3c:	f7ff fed0 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b08      	ldr	r3, [pc, #32]	@ (8002c64 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002c44:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002c46:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002c4a:	4907      	ldr	r1, [pc, #28]	@ (8002c68 <HAL_RCC_GetHCLKFreq+0x30>)
 8002c4c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002c4e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002c52:	fa22 f303 	lsr.w	r3, r2, r3
 8002c56:	4a05      	ldr	r2, [pc, #20]	@ (8002c6c <HAL_RCC_GetHCLKFreq+0x34>)
 8002c58:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002c5a:	4b04      	ldr	r3, [pc, #16]	@ (8002c6c <HAL_RCC_GetHCLKFreq+0x34>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	44020c00 	.word	0x44020c00
 8002c68:	080042c0 	.word	0x080042c0
 8002c6c:	20000000 	.word	0x20000000

08002c70 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c74:	b0ba      	sub	sp, #232	@ 0xe8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002c88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c90:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002c94:	2500      	movs	r5, #0
 8002c96:	ea54 0305 	orrs.w	r3, r4, r5
 8002c9a:	d00b      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002c9c:	4bcd      	ldr	r3, [pc, #820]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002c9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ca2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cac:	4ac9      	ldr	r2, [pc, #804]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f002 0801 	and.w	r8, r2, #1
 8002cc0:	f04f 0900 	mov.w	r9, #0
 8002cc4:	ea58 0309 	orrs.w	r3, r8, r9
 8002cc8:	d042      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d823      	bhi.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cdc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002d25 	.word	0x08002d25
 8002ce0:	08002cf5 	.word	0x08002cf5
 8002ce4:	08002d09 	.word	0x08002d09
 8002ce8:	08002d25 	.word	0x08002d25
 8002cec:	08002d25 	.word	0x08002d25
 8002cf0:	08002d25 	.word	0x08002d25
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 f978 	bl	8003ff0 <RCCEx_PLL2_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002d06:	e00e      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d0c:	3330      	adds	r3, #48	@ 0x30
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f001 fa06 	bl	8004120 <RCCEx_PLL3_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002d1a:	e004      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002d22:	e000      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d26:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002d2e:	4ba9      	ldr	r3, [pc, #676]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002d30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d34:	f023 0107 	bic.w	r1, r3, #7
 8002d38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3e:	4aa5      	ldr	r2, [pc, #660]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002d40:	430b      	orrs	r3, r1
 8002d42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002d46:	e003      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d48:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d4c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d58:	f002 0a02 	and.w	sl, r2, #2
 8002d5c:	f04f 0b00 	mov.w	fp, #0
 8002d60:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d64:	f000 8088 	beq.w	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002d68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6e:	2b28      	cmp	r3, #40	@ 0x28
 8002d70:	d868      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002d72:	a201      	add	r2, pc, #4	@ (adr r2, 8002d78 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002e4d 	.word	0x08002e4d
 8002d7c:	08002e45 	.word	0x08002e45
 8002d80:	08002e45 	.word	0x08002e45
 8002d84:	08002e45 	.word	0x08002e45
 8002d88:	08002e45 	.word	0x08002e45
 8002d8c:	08002e45 	.word	0x08002e45
 8002d90:	08002e45 	.word	0x08002e45
 8002d94:	08002e45 	.word	0x08002e45
 8002d98:	08002e1d 	.word	0x08002e1d
 8002d9c:	08002e45 	.word	0x08002e45
 8002da0:	08002e45 	.word	0x08002e45
 8002da4:	08002e45 	.word	0x08002e45
 8002da8:	08002e45 	.word	0x08002e45
 8002dac:	08002e45 	.word	0x08002e45
 8002db0:	08002e45 	.word	0x08002e45
 8002db4:	08002e45 	.word	0x08002e45
 8002db8:	08002e31 	.word	0x08002e31
 8002dbc:	08002e45 	.word	0x08002e45
 8002dc0:	08002e45 	.word	0x08002e45
 8002dc4:	08002e45 	.word	0x08002e45
 8002dc8:	08002e45 	.word	0x08002e45
 8002dcc:	08002e45 	.word	0x08002e45
 8002dd0:	08002e45 	.word	0x08002e45
 8002dd4:	08002e45 	.word	0x08002e45
 8002dd8:	08002e4d 	.word	0x08002e4d
 8002ddc:	08002e45 	.word	0x08002e45
 8002de0:	08002e45 	.word	0x08002e45
 8002de4:	08002e45 	.word	0x08002e45
 8002de8:	08002e45 	.word	0x08002e45
 8002dec:	08002e45 	.word	0x08002e45
 8002df0:	08002e45 	.word	0x08002e45
 8002df4:	08002e45 	.word	0x08002e45
 8002df8:	08002e4d 	.word	0x08002e4d
 8002dfc:	08002e45 	.word	0x08002e45
 8002e00:	08002e45 	.word	0x08002e45
 8002e04:	08002e45 	.word	0x08002e45
 8002e08:	08002e45 	.word	0x08002e45
 8002e0c:	08002e45 	.word	0x08002e45
 8002e10:	08002e45 	.word	0x08002e45
 8002e14:	08002e45 	.word	0x08002e45
 8002e18:	08002e4d 	.word	0x08002e4d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e20:	3308      	adds	r3, #8
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 f8e4 	bl	8003ff0 <RCCEx_PLL2_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002e2e:	e00e      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e34:	3330      	adds	r3, #48	@ 0x30
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 f972 	bl	8004120 <RCCEx_PLL3_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002e42:	e004      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002e4a:	e000      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002e56:	4b5f      	ldr	r3, [pc, #380]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e5c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002e60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e66:	4a5b      	ldr	r2, [pc, #364]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002e6e:	e003      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e70:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e74:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f002 0304 	and.w	r3, r2, #4
 8002e84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002e92:	460b      	mov	r3, r1
 8002e94:	4313      	orrs	r3, r2
 8002e96:	d04e      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e9e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002ea2:	d02c      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002ea4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002ea8:	d825      	bhi.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eae:	d028      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb4:	d81f      	bhi.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002eb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002eb8:	d025      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002eba:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ebc:	d81b      	bhi.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002ebe:	2b80      	cmp	r3, #128	@ 0x80
 8002ec0:	d00f      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002ec2:	2b80      	cmp	r3, #128	@ 0x80
 8002ec4:	d817      	bhi.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d01f      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002eca:	2b40      	cmp	r3, #64	@ 0x40
 8002ecc:	d113      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f001 f88b 	bl	8003ff0 <RCCEx_PLL2_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002ee0:	e014      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ee6:	3330      	adds	r3, #48	@ 0x30
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f001 f919 	bl	8004120 <RCCEx_PLL3_Config>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002efc:	e006      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002efe:	bf00      	nop
 8002f00:	e004      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002f02:	bf00      	nop
 8002f04:	e002      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10c      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002f14:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f1a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f24:	4a2b      	ldr	r2, [pc, #172]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f26:	430b      	orrs	r3, r1
 8002f28:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002f2c:	e003      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f32:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	f002 0308 	and.w	r3, r2, #8
 8002f42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f46:	2300      	movs	r3, #0
 8002f48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4313      	orrs	r3, r2
 8002f54:	d056      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f5c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002f60:	d031      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002f62:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002f66:	d82a      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002f68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f6c:	d02d      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002f6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f72:	d824      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002f74:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002f78:	d029      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002f7a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002f7e:	d81e      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f84:	d011      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f8a:	d818      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d023      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f94:	d113      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 f827 	bl	8003ff0 <RCCEx_PLL2_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8002fa8:	e017      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fae:	3330      	adds	r3, #48	@ 0x30
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f001 f8b5 	bl	8004120 <RCCEx_PLL3_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8002fbc:	e00d      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002fc4:	e009      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002fc6:	bf00      	nop
 8002fc8:	e007      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002fca:	bf00      	nop
 8002fcc:	e005      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002fce:	bf00      	nop
 8002fd0:	e003      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002fd2:	bf00      	nop
 8002fd4:	44020c00 	.word	0x44020c00
        break;
 8002fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fda:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002fe2:	4bb9      	ldr	r3, [pc, #740]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002fe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002fe8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8002fec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ff0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ff2:	4ab5      	ldr	r2, [pc, #724]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002ffa:	e003      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003000:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003004:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f002 0310 	and.w	r3, r2, #16
 8003010:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800301a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800301e:	460b      	mov	r3, r1
 8003020:	4313      	orrs	r3, r2
 8003022:	d053      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003024:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003028:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800302a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800302e:	d031      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003030:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003034:	d82a      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003036:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800303a:	d02d      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800303c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003040:	d824      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003042:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003046:	d029      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003048:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800304c:	d81e      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800304e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003052:	d011      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003058:	d818      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d020      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800305e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003062:	d113      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003064:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003068:	3308      	adds	r3, #8
 800306a:	4618      	mov	r0, r3
 800306c:	f000 ffc0 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8003076:	e014      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003078:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800307c:	3330      	adds	r3, #48	@ 0x30
 800307e:	4618      	mov	r0, r3
 8003080:	f001 f84e 	bl	8004120 <RCCEx_PLL3_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800308a:	e00a      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003092:	e006      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003094:	bf00      	nop
 8003096:	e004      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003098:	bf00      	nop
 800309a:	e002      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800309c:	bf00      	nop
 800309e:	e000      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80030a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80030aa:	4b87      	ldr	r3, [pc, #540]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80030b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80030b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ba:	4a83      	ldr	r2, [pc, #524]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030bc:	430b      	orrs	r3, r1
 80030be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80030c2:	e003      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030c8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f002 0320 	and.w	r3, r2, #32
 80030d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4313      	orrs	r3, r2
 80030ea:	d053      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80030ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80030f6:	d031      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80030f8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80030fc:	d82a      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80030fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003102:	d02d      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003104:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003108:	d824      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800310a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800310e:	d029      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003110:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003114:	d81e      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003116:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800311a:	d011      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003120:	d818      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d020      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003126:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800312a:	d113      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800312c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003130:	3308      	adds	r3, #8
 8003132:	4618      	mov	r0, r3
 8003134:	f000 ff5c 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 800313e:	e014      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003140:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003144:	3330      	adds	r3, #48	@ 0x30
 8003146:	4618      	mov	r0, r3
 8003148:	f000 ffea 	bl	8004120 <RCCEx_PLL3_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8003152:	e00a      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800315a:	e006      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800315c:	bf00      	nop
 800315e:	e004      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003160:	bf00      	nop
 8003162:	e002      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003164:	bf00      	nop
 8003166:	e000      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800316a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10c      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003172:	4b55      	ldr	r3, [pc, #340]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003174:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003178:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800317c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003182:	4a51      	ldr	r2, [pc, #324]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003184:	430b      	orrs	r3, r1
 8003186:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800318a:	e003      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800318c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003190:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80031a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031a4:	2300      	movs	r3, #0
 80031a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80031aa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80031ae:	460b      	mov	r3, r1
 80031b0:	4313      	orrs	r3, r2
 80031b2:	d053      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80031b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ba:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80031be:	d031      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80031c0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80031c4:	d82a      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80031c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031ca:	d02d      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80031cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031d0:	d824      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80031d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031d6:	d029      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80031d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031dc:	d81e      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80031de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031e2:	d011      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80031e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031e8:	d818      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d020      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80031ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031f2:	d113      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031f8:	3308      	adds	r3, #8
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fef8 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003206:	e014      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800320c:	3330      	adds	r3, #48	@ 0x30
 800320e:	4618      	mov	r0, r3
 8003210:	f000 ff86 	bl	8004120 <RCCEx_PLL3_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800321a:	e00a      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003222:	e006      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003224:	bf00      	nop
 8003226:	e004      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003228:	bf00      	nop
 800322a:	e002      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800322c:	bf00      	nop
 800322e:	e000      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003232:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10c      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800323a:	4b23      	ldr	r3, [pc, #140]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800323c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003240:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800324a:	4a1f      	ldr	r2, [pc, #124]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800324c:	430b      	orrs	r3, r1
 800324e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003252:	e003      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003254:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003258:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800325c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003268:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800326c:	2300      	movs	r3, #0
 800326e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003272:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003276:	460b      	mov	r3, r1
 8003278:	4313      	orrs	r3, r2
 800327a:	d03d      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800327c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003280:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003282:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003286:	d01b      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8003288:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800328c:	d814      	bhi.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800328e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003292:	d017      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8003294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003298:	d80e      	bhi.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d016      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800329e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a2:	d109      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032a8:	3330      	adds	r3, #48	@ 0x30
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 ff38 	bl	8004120 <RCCEx_PLL3_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80032b6:	e00a      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80032be:	e006      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80032c0:	bf00      	nop
 80032c2:	e004      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80032c4:	bf00      	nop
 80032c6:	e002      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80032c8:	44020c00 	.word	0x44020c00
        break;
 80032cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80032d6:	4b99      	ldr	r3, [pc, #612]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032dc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80032e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032e6:	4a95      	ldr	r2, [pc, #596]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032e8:	430b      	orrs	r3, r1
 80032ea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80032ee:	e003      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80032f4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003304:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003308:	2300      	movs	r3, #0
 800330a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800330e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003312:	460b      	mov	r3, r1
 8003314:	4313      	orrs	r3, r2
 8003316:	d03b      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003318:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800331c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800331e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003322:	d01b      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8003324:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003328:	d814      	bhi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800332a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800332e:	d017      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8003330:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003334:	d80e      	bhi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8003336:	2b00      	cmp	r3, #0
 8003338:	d014      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800333a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800333e:	d109      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003344:	3330      	adds	r3, #48	@ 0x30
 8003346:	4618      	mov	r0, r3
 8003348:	f000 feea 	bl	8004120 <RCCEx_PLL3_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003352:	e008      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800335a:	e004      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 800335c:	bf00      	nop
 800335e:	e002      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8003360:	bf00      	nop
 8003362:	e000      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8003364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003366:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800336e:	4b73      	ldr	r3, [pc, #460]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003370:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003374:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003378:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800337c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800337e:	4a6f      	ldr	r2, [pc, #444]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003380:	430b      	orrs	r3, r1
 8003382:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003386:	e003      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003388:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800338c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800339c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80033aa:	460b      	mov	r3, r1
 80033ac:	4313      	orrs	r3, r2
 80033ae:	d03d      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80033b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033bc:	d01b      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x786>
 80033be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033c2:	d814      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80033c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033c8:	d017      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80033ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033ce:	d80e      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d014      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80033d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033d8:	d109      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033de:	3330      	adds	r3, #48	@ 0x30
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fe9d 	bl	8004120 <RCCEx_PLL3_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 80033ec:	e008      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80033f4:	e004      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80033f6:	bf00      	nop
 80033f8:	e002      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80033fa:	bf00      	nop
 80033fc:	e000      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80033fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003400:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10d      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003408:	4b4c      	ldr	r3, [pc, #304]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800340a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800340e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800341a:	4a48      	ldr	r2, [pc, #288]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800341c:	430b      	orrs	r3, r1
 800341e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003422:	e003      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003428:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800342c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800343c:	2300      	movs	r3, #0
 800343e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003442:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003446:	460b      	mov	r3, r1
 8003448:	4313      	orrs	r3, r2
 800344a:	d035      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800344c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003454:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003458:	d015      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800345a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800345e:	d80e      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d012      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003468:	d109      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800346a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800346e:	3330      	adds	r3, #48	@ 0x30
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fe55 	bl	8004120 <RCCEx_PLL3_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800347c:	e006      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003484:	e002      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8003486:	bf00      	nop
 8003488:	e000      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800348a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800348c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10d      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003494:	4b29      	ldr	r3, [pc, #164]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003496:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800349a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800349e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034a6:	4a25      	ldr	r2, [pc, #148]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80034a8:	430b      	orrs	r3, r1
 80034aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80034ae:	e003      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80034b4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80034b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	2100      	movs	r1, #0
 80034c2:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80034c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80034d2:	460b      	mov	r3, r1
 80034d4:	4313      	orrs	r3, r2
 80034d6:	d037      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80034d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034e4:	d015      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80034e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034ea:	d80e      	bhi.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d012      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80034f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034f4:	d109      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034fa:	3330      	adds	r3, #48	@ 0x30
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fe0f 	bl	8004120 <RCCEx_PLL3_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003508:	e006      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003510:	e002      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8003516:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003518:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10f      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003520:	4b06      	ldr	r3, [pc, #24]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003522:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003526:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800352a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003532:	4a02      	ldr	r2, [pc, #8]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003534:	430b      	orrs	r3, r1
 8003536:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800353a:	e005      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800353c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003540:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003544:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003548:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	2100      	movs	r1, #0
 8003552:	67b9      	str	r1, [r7, #120]	@ 0x78
 8003554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003558:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800355a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800355e:	460b      	mov	r3, r1
 8003560:	4313      	orrs	r3, r2
 8003562:	d00e      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003564:	4bb8      	ldr	r3, [pc, #736]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	4ab7      	ldr	r2, [pc, #732]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800356a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800356e:	61d3      	str	r3, [r2, #28]
 8003570:	4bb5      	ldr	r3, [pc, #724]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003572:	69d9      	ldr	r1, [r3, #28]
 8003574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003578:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800357c:	4ab2      	ldr	r2, [pc, #712]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800357e:	430b      	orrs	r3, r1
 8003580:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800358e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003590:	2300      	movs	r3, #0
 8003592:	677b      	str	r3, [r7, #116]	@ 0x74
 8003594:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003598:	460b      	mov	r3, r1
 800359a:	4313      	orrs	r3, r2
 800359c:	d055      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800359e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035a6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80035aa:	d031      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80035ac:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80035b0:	d82a      	bhi.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80035b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b6:	d02d      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80035b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035bc:	d824      	bhi.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80035be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035c2:	d029      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80035c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035c8:	d81e      	bhi.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80035ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035ce:	d011      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80035d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035d4:	d818      	bhi.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d020      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80035da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035de:	d113      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035e4:	3308      	adds	r3, #8
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fd02 	bl	8003ff0 <RCCEx_PLL2_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80035f2:	e014      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035f8:	3330      	adds	r3, #48	@ 0x30
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fd90 	bl	8004120 <RCCEx_PLL3_Config>
 8003600:	4603      	mov	r3, r0
 8003602:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003606:	e00a      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800360e:	e006      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003610:	bf00      	nop
 8003612:	e004      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003614:	bf00      	nop
 8003616:	e002      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800361c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003626:	4b88      	ldr	r3, [pc, #544]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003628:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800362c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003638:	4a83      	ldr	r2, [pc, #524]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800363a:	430b      	orrs	r3, r1
 800363c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003640:	e003      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003642:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003646:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800364a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003656:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003658:	2300      	movs	r3, #0
 800365a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800365c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003660:	460b      	mov	r3, r1
 8003662:	4313      	orrs	r3, r2
 8003664:	d055      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003672:	d031      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8003674:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003678:	d82a      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800367a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800367e:	d02d      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8003680:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003684:	d824      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8003686:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800368a:	d029      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800368c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003690:	d81e      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8003692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003696:	d011      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800369c:	d818      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d020      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80036a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a6:	d113      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036ac:	3308      	adds	r3, #8
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fc9e 	bl	8003ff0 <RCCEx_PLL2_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80036ba:	e014      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036c0:	3330      	adds	r3, #48	@ 0x30
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fd2c 	bl	8004120 <RCCEx_PLL3_Config>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80036ce:	e00a      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80036d6:	e006      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80036d8:	bf00      	nop
 80036da:	e004      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80036dc:	bf00      	nop
 80036de:	e002      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80036e0:	bf00      	nop
 80036e2:	e000      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80036e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10d      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80036ee:	4b56      	ldr	r3, [pc, #344]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80036f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80036f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80036f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003700:	4a51      	ldr	r2, [pc, #324]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003702:	430b      	orrs	r3, r1
 8003704:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003708:	e003      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800370e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800371e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003720:	2300      	movs	r3, #0
 8003722:	667b      	str	r3, [r7, #100]	@ 0x64
 8003724:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003728:	460b      	mov	r3, r1
 800372a:	4313      	orrs	r3, r2
 800372c:	d032      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800372e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003732:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003736:	2b05      	cmp	r3, #5
 8003738:	d80f      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800373a:	2b03      	cmp	r3, #3
 800373c:	d211      	bcs.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800373e:	2b01      	cmp	r3, #1
 8003740:	d911      	bls.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8003742:	2b02      	cmp	r3, #2
 8003744:	d109      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800374a:	3308      	adds	r3, #8
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fc4f 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003758:	e006      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003760:	e002      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8003762:	bf00      	nop
 8003764:	e000      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8003766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003768:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10d      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003770:	4b35      	ldr	r3, [pc, #212]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003772:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003776:	f023 0107 	bic.w	r1, r3, #7
 800377a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800377e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003782:	4a31      	ldr	r2, [pc, #196]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003784:	430b      	orrs	r3, r1
 8003786:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800378a:	e003      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003790:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003794:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	2100      	movs	r1, #0
 800379e:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80037aa:	460b      	mov	r3, r1
 80037ac:	4313      	orrs	r3, r2
 80037ae:	d024      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80037b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d005      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80037c6:	e002      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80037c8:	bf00      	nop
 80037ca:	e000      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80037cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10d      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80037d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80037d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037dc:	f023 0108 	bic.w	r1, r3, #8
 80037e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037e8:	4a17      	ldr	r2, [pc, #92]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80037ea:	430b      	orrs	r3, r1
 80037ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80037f0:	e003      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80037f6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003806:	653b      	str	r3, [r7, #80]	@ 0x50
 8003808:	2300      	movs	r3, #0
 800380a:	657b      	str	r3, [r7, #84]	@ 0x54
 800380c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003810:	460b      	mov	r3, r1
 8003812:	4313      	orrs	r3, r2
 8003814:	f000 80b9 	beq.w	800398a <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003818:	4b0c      	ldr	r3, [pc, #48]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	4a0b      	ldr	r2, [pc, #44]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003824:	f7fd f94a 	bl	8000abc <HAL_GetTick>
 8003828:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800382c:	e010      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382e:	f7fd f945 	bl	8000abc <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d908      	bls.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003844:	e00a      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8003846:	bf00      	nop
 8003848:	44020c00 	.word	0x44020c00
 800384c:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003850:	4bba      	ldr	r3, [pc, #744]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0e8      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 800385c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003860:	2b00      	cmp	r3, #0
 8003862:	f040 808e 	bne.w	8003982 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003866:	4bb6      	ldr	r3, [pc, #728]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800386c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003870:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d023      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800387c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003880:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003888:	4293      	cmp	r3, r2
 800388a:	d01b      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800388c:	4bac      	ldr	r3, [pc, #688]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800388e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003896:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800389a:	4ba9      	ldr	r3, [pc, #676]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800389c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038a0:	4aa7      	ldr	r2, [pc, #668]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80038a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038aa:	4ba5      	ldr	r3, [pc, #660]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80038ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038b0:	4aa3      	ldr	r2, [pc, #652]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80038b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038ba:	4aa1      	ldr	r2, [pc, #644]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80038bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d019      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7fd f8f4 	bl	8000abc <HAL_GetTick>
 80038d4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d8:	e00d      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fd f8ef 	bl	8000abc <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038e4:	1ad2      	subs	r2, r2, r3
 80038e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d903      	bls.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 80038f4:	e006      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f6:	4b92      	ldr	r3, [pc, #584]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80038f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0ea      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8003904:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d135      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800390c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003910:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003914:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003918:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800391c:	d110      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 800391e:	4b88      	ldr	r3, [pc, #544]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800392a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003934:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003938:	4a81      	ldr	r2, [pc, #516]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800393a:	430b      	orrs	r3, r1
 800393c:	61d3      	str	r3, [r2, #28]
 800393e:	e005      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003940:	4b7f      	ldr	r3, [pc, #508]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	4a7e      	ldr	r2, [pc, #504]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003946:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800394a:	61d3      	str	r3, [r2, #28]
 800394c:	4b7c      	ldr	r3, [pc, #496]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800394e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003952:	4a7b      	ldr	r2, [pc, #492]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003958:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800395c:	4b78      	ldr	r3, [pc, #480]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800395e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003966:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800396a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396e:	4a74      	ldr	r2, [pc, #464]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003970:	430b      	orrs	r3, r1
 8003972:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003976:	e008      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003978:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800397c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8003980:	e003      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003982:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003986:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800398a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003996:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003998:	2300      	movs	r3, #0
 800399a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800399c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80039a0:	460b      	mov	r3, r1
 80039a2:	4313      	orrs	r3, r2
 80039a4:	d035      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80039a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039ae:	2b30      	cmp	r3, #48	@ 0x30
 80039b0:	d014      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 80039b2:	2b30      	cmp	r3, #48	@ 0x30
 80039b4:	d80e      	bhi.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d012      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d80a      	bhi.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d010      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80039c2:	2b10      	cmp	r3, #16
 80039c4:	d106      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c6:	4b5e      	ldr	r3, [pc, #376]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80039c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ca:	4a5d      	ldr	r2, [pc, #372]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80039cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80039d2:	e008      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80039da:	e004      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80039dc:	bf00      	nop
 80039de:	e002      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80039e0:	bf00      	nop
 80039e2:	e000      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80039e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10d      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80039ee:	4b54      	ldr	r3, [pc, #336]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80039f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80039f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a00:	4a4f      	ldr	r2, [pc, #316]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a02:	430b      	orrs	r3, r1
 8003a04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003a08:	e003      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a0e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a20:	2300      	movs	r3, #0
 8003a22:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a24:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	d033      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8003a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8003a3a:	2b40      	cmp	r3, #64	@ 0x40
 8003a3c:	d007      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003a3e:	e010      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a40:	4b3f      	ldr	r3, [pc, #252]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a44:	4a3e      	ldr	r2, [pc, #248]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a4a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003a4c:	e00d      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a52:	3308      	adds	r3, #8
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 facb 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003a60:	e003      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a6a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10d      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8003a72:	4b33      	ldr	r3, [pc, #204]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a78:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8003a7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a84:	4a2e      	ldr	r2, [pc, #184]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a86:	430b      	orrs	r3, r1
 8003a88:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003a8c:	e003      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a92:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aa8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003aac:	460b      	mov	r3, r1
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	d04c      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ab6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d827      	bhi.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8003abe:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003ad9 	.word	0x08003ad9
 8003ac8:	08003ae7 	.word	0x08003ae7
 8003acc:	08003afb 	.word	0x08003afb
 8003ad0:	08003b17 	.word	0x08003b17
 8003ad4:	08003b17 	.word	0x08003b17
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad8:	4b19      	ldr	r3, [pc, #100]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	4a18      	ldr	r2, [pc, #96]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003ae4:	e018      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aea:	3308      	adds	r3, #8
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fa7f 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003af8:	e00e      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003afe:	3330      	adds	r3, #48	@ 0x30
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fb0d 	bl	8004120 <RCCEx_PLL3_Config>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003b0c:	e004      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003b14:	e000      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8003b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b18:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d111      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003b20:	4b07      	ldr	r3, [pc, #28]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b26:	f023 0107 	bic.w	r1, r3, #7
 8003b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b32:	4a03      	ldr	r2, [pc, #12]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003b34:	430b      	orrs	r3, r1
 8003b36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b3a:	e007      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8003b3c:	44020800 	.word	0x44020800
 8003b40:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b48:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003b4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003b58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003b62:	460b      	mov	r3, r1
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f000 8081 	beq.w	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d85f      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8003b76:	a201      	add	r2, pc, #4	@ (adr r2, 8003b7c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003c01 	.word	0x08003c01
 8003b80:	08003c37 	.word	0x08003c37
 8003b84:	08003c37 	.word	0x08003c37
 8003b88:	08003c37 	.word	0x08003c37
 8003b8c:	08003c37 	.word	0x08003c37
 8003b90:	08003c37 	.word	0x08003c37
 8003b94:	08003c37 	.word	0x08003c37
 8003b98:	08003c37 	.word	0x08003c37
 8003b9c:	08003c0f 	.word	0x08003c0f
 8003ba0:	08003c37 	.word	0x08003c37
 8003ba4:	08003c37 	.word	0x08003c37
 8003ba8:	08003c37 	.word	0x08003c37
 8003bac:	08003c37 	.word	0x08003c37
 8003bb0:	08003c37 	.word	0x08003c37
 8003bb4:	08003c37 	.word	0x08003c37
 8003bb8:	08003c37 	.word	0x08003c37
 8003bbc:	08003c23 	.word	0x08003c23
 8003bc0:	08003c37 	.word	0x08003c37
 8003bc4:	08003c37 	.word	0x08003c37
 8003bc8:	08003c37 	.word	0x08003c37
 8003bcc:	08003c37 	.word	0x08003c37
 8003bd0:	08003c37 	.word	0x08003c37
 8003bd4:	08003c37 	.word	0x08003c37
 8003bd8:	08003c37 	.word	0x08003c37
 8003bdc:	08003c3f 	.word	0x08003c3f
 8003be0:	08003c37 	.word	0x08003c37
 8003be4:	08003c37 	.word	0x08003c37
 8003be8:	08003c37 	.word	0x08003c37
 8003bec:	08003c37 	.word	0x08003c37
 8003bf0:	08003c37 	.word	0x08003c37
 8003bf4:	08003c37 	.word	0x08003c37
 8003bf8:	08003c37 	.word	0x08003c37
 8003bfc:	08003c3f 	.word	0x08003c3f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c00:	4bb9      	ldr	r3, [pc, #740]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c04:	4ab8      	ldr	r2, [pc, #736]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c0a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003c0c:	e018      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c12:	3308      	adds	r3, #8
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 f9eb 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003c20:	e00e      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c26:	3330      	adds	r3, #48	@ 0x30
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fa79 	bl	8004120 <RCCEx_PLL3_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003c34:	e004      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003c3c:	e000      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8003c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c40:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10d      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003c48:	4ba7      	ldr	r3, [pc, #668]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c4e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c5a:	4aa3      	ldr	r2, [pc, #652]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c62:	e003      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c68:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003c6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c7e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003c82:	460b      	mov	r3, r1
 8003c84:	4313      	orrs	r3, r2
 8003c86:	d04e      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003c88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c94:	d02e      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c9a:	d827      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003c9c:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c9e:	d02b      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8003ca0:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ca2:	d823      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003ca4:	2b80      	cmp	r3, #128	@ 0x80
 8003ca6:	d017      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8003ca8:	2b80      	cmp	r3, #128	@ 0x80
 8003caa:	d81f      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8003cb0:	2b40      	cmp	r3, #64	@ 0x40
 8003cb2:	d007      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8003cb4:	e01a      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb6:	4b8c      	ldr	r3, [pc, #560]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	4a8b      	ldr	r2, [pc, #556]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003cc2:	e01a      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cc8:	3308      	adds	r3, #8
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 f990 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003cd6:	e010      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cdc:	3330      	adds	r3, #48	@ 0x30
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fa1e 	bl	8004120 <RCCEx_PLL3_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003cea:	e006      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003cf2:	e002      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8003cf4:	bf00      	nop
 8003cf6:	e000      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8003cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cfa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003d02:	4b79      	ldr	r3, [pc, #484]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d08:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003d0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d14:	4974      	ldr	r1, [pc, #464]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003d1c:	e003      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003d22:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8003d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003d32:	623b      	str	r3, [r7, #32]
 8003d34:	2300      	movs	r3, #0
 8003d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d38:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	d055      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8003d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003d4a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003d4e:	d031      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8003d50:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003d54:	d82a      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003d56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d5a:	d02d      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8003d5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d60:	d824      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003d62:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d66:	d029      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8003d68:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d6c:	d81e      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d72:	d011      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8003d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d78:	d818      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d020      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8003d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d82:	d113      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d88:	3308      	adds	r3, #8
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f930 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003d96:	e014      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d9c:	3330      	adds	r3, #48	@ 0x30
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f9be 	bl	8004120 <RCCEx_PLL3_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003db2:	e006      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003db4:	bf00      	nop
 8003db6:	e004      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003db8:	bf00      	nop
 8003dba:	e002      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003dbc:	bf00      	nop
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10d      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8003dca:	4b47      	ldr	r3, [pc, #284]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dd0:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8003dd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dd8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003ddc:	4942      	ldr	r1, [pc, #264]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003de4:	e003      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003dea:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	2100      	movs	r1, #0
 8003df8:	61b9      	str	r1, [r7, #24]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e04:	460b      	mov	r3, r1
 8003e06:	4313      	orrs	r3, r2
 8003e08:	d03c      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8003e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d81b      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8003e16:	a201      	add	r2, pc, #4	@ (adr r2, 8003e1c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8003e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1c:	08003e57 	.word	0x08003e57
 8003e20:	08003e2d 	.word	0x08003e2d
 8003e24:	08003e3b 	.word	0x08003e3b
 8003e28:	08003e57 	.word	0x08003e57
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	4a2d      	ldr	r2, [pc, #180]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e36:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003e38:	e00e      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e3e:	3308      	adds	r3, #8
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 f8d5 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8003e4c:	e004      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003e54:	e000      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8003e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e58:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10d      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003e60:	4b21      	ldr	r3, [pc, #132]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003e62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e66:	f023 0203 	bic.w	r2, r3, #3
 8003e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e72:	491d      	ldr	r1, [pc, #116]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003e7a:	e003      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e80:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	6139      	str	r1, [r7, #16]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	d03c      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003ea0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eac:	d00e      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003eae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eb2:	d815      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d019      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8003eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ebc:	d110      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec2:	4a09      	ldr	r2, [pc, #36]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ec8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003eca:	e010      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ecc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f88c 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003ede:	e006      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003ee6:	e002      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8003ee8:	44020c00 	.word	0x44020c00
        break;
 8003eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10d      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003ef6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003efc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f08:	4938      	ldr	r1, [pc, #224]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003f10:	e003      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f12:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f16:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f22:	2100      	movs	r1, #0
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f30:	460b      	mov	r3, r1
 8003f32:	4313      	orrs	r3, r2
 8003f34:	d038      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003f3e:	2b30      	cmp	r3, #48	@ 0x30
 8003f40:	d01b      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8003f42:	2b30      	cmp	r3, #48	@ 0x30
 8003f44:	d815      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8003f46:	2b10      	cmp	r3, #16
 8003f48:	d002      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d007      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8003f4e:	e010      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f50:	4b26      	ldr	r3, [pc, #152]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f54:	4a25      	ldr	r2, [pc, #148]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f5a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f5c:	e00e      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f62:	3330      	adds	r3, #48	@ 0x30
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 f8db 	bl	8004120 <RCCEx_PLL3_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003f70:	e004      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003f78:	e000      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8003f7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10d      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003f84:	4b19      	ldr	r3, [pc, #100]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003f86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f8a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f92:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003f96:	4915      	ldr	r1, [pc, #84]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003f9e:	e003      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003fa4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	6039      	str	r1, [r7, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	d00c      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8003fc4:	4b09      	ldr	r3, [pc, #36]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003fca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fd2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003fd6:	4905      	ldr	r1, [pc, #20]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8003fde:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	37e8      	adds	r7, #232	@ 0xe8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fec:	44020c00 	.word	0x44020c00

08003ff0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8003ff8:	4b48      	ldr	r3, [pc, #288]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a47      	ldr	r2, [pc, #284]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 8003ffe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004002:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004004:	f7fc fd5a 	bl	8000abc <HAL_GetTick>
 8004008:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800400a:	e008      	b.n	800401e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800400c:	f7fc fd56 	bl	8000abc <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e07a      	b.n	8004114 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800401e:	4b3f      	ldr	r3, [pc, #252]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800402a:	4b3c      	ldr	r3, [pc, #240]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 800402c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6811      	ldr	r1, [r2, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6852      	ldr	r2, [r2, #4]
 800403e:	0212      	lsls	r2, r2, #8
 8004040:	430a      	orrs	r2, r1
 8004042:	4936      	ldr	r1, [pc, #216]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 8004044:	4313      	orrs	r3, r2
 8004046:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	3b01      	subs	r3, #1
 800404e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	3b01      	subs	r3, #1
 8004058:	025b      	lsls	r3, r3, #9
 800405a:	b29b      	uxth	r3, r3
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	3b01      	subs	r3, #1
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	3b01      	subs	r3, #1
 8004072:	061b      	lsls	r3, r3, #24
 8004074:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004078:	4928      	ldr	r1, [pc, #160]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 800407a:	4313      	orrs	r3, r2
 800407c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800407e:	4b27      	ldr	r3, [pc, #156]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 8004080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004082:	f023 020c 	bic.w	r2, r3, #12
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	4924      	ldr	r1, [pc, #144]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 800408c:	4313      	orrs	r3, r2
 800408e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8004090:	4b22      	ldr	r3, [pc, #136]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004094:	f023 0220 	bic.w	r2, r3, #32
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	491f      	ldr	r1, [pc, #124]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80040a2:	4b1e      	ldr	r3, [pc, #120]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 80040a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	491c      	ldr	r1, [pc, #112]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80040b0:	4b1a      	ldr	r3, [pc, #104]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	4a19      	ldr	r2, [pc, #100]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 80040b6:	f023 0310 	bic.w	r3, r3, #16
 80040ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80040bc:	4b17      	ldr	r3, [pc, #92]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040c4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6a12      	ldr	r2, [r2, #32]
 80040cc:	00d2      	lsls	r2, r2, #3
 80040ce:	4913      	ldr	r1, [pc, #76]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80040d4:	4b11      	ldr	r3, [pc, #68]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	4a10      	ldr	r2, [pc, #64]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 80040da:	f043 0310 	orr.w	r3, r3, #16
 80040de:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80040e0:	4b0e      	ldr	r3, [pc, #56]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a0d      	ldr	r2, [pc, #52]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 80040e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040ea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80040ec:	f7fc fce6 	bl	8000abc <HAL_GetTick>
 80040f0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040f2:	e008      	b.n	8004106 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80040f4:	f7fc fce2 	bl	8000abc <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e006      	b.n	8004114 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004106:	4b05      	ldr	r3, [pc, #20]	@ (800411c <RCCEx_PLL2_Config+0x12c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8004112:	2300      	movs	r3, #0

}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	44020c00 	.word	0x44020c00

08004120 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8004128:	4b48      	ldr	r3, [pc, #288]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a47      	ldr	r2, [pc, #284]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 800412e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004132:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004134:	f7fc fcc2 	bl	8000abc <HAL_GetTick>
 8004138:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800413a:	e008      	b.n	800414e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800413c:	f7fc fcbe 	bl	8000abc <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e07a      	b.n	8004244 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800414e:	4b3f      	ldr	r3, [pc, #252]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800415a:	4b3c      	ldr	r3, [pc, #240]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004162:	f023 0303 	bic.w	r3, r3, #3
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6811      	ldr	r1, [r2, #0]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6852      	ldr	r2, [r2, #4]
 800416e:	0212      	lsls	r2, r2, #8
 8004170:	430a      	orrs	r2, r1
 8004172:	4936      	ldr	r1, [pc, #216]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 8004174:	4313      	orrs	r3, r2
 8004176:	630b      	str	r3, [r1, #48]	@ 0x30
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	3b01      	subs	r3, #1
 800417e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	3b01      	subs	r3, #1
 8004188:	025b      	lsls	r3, r3, #9
 800418a:	b29b      	uxth	r3, r3
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	3b01      	subs	r3, #1
 8004194:	041b      	lsls	r3, r3, #16
 8004196:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	061b      	lsls	r3, r3, #24
 80041a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80041a8:	4928      	ldr	r1, [pc, #160]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80041ae:	4b27      	ldr	r3, [pc, #156]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b2:	f023 020c 	bic.w	r2, r3, #12
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	4924      	ldr	r1, [pc, #144]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80041c0:	4b22      	ldr	r3, [pc, #136]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 80041c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c4:	f023 0220 	bic.w	r2, r3, #32
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	491f      	ldr	r1, [pc, #124]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80041d2:	4b1e      	ldr	r3, [pc, #120]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 80041d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041da:	491c      	ldr	r1, [pc, #112]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80041e0:	4b1a      	ldr	r3, [pc, #104]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 80041e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e4:	4a19      	ldr	r2, [pc, #100]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 80041e6:	f023 0310 	bic.w	r3, r3, #16
 80041ea:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80041ec:	4b17      	ldr	r3, [pc, #92]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 80041ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041f4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6a12      	ldr	r2, [r2, #32]
 80041fc:	00d2      	lsls	r2, r2, #3
 80041fe:	4913      	ldr	r1, [pc, #76]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 8004200:	4313      	orrs	r3, r2
 8004202:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8004204:	4b11      	ldr	r3, [pc, #68]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 8004206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004208:	4a10      	ldr	r2, [pc, #64]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 800420a:	f043 0310 	orr.w	r3, r3, #16
 800420e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8004210:	4b0e      	ldr	r3, [pc, #56]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0d      	ldr	r2, [pc, #52]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 8004216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800421a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800421c:	f7fc fc4e 	bl	8000abc <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004222:	e008      	b.n	8004236 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004224:	f7fc fc4a 	bl	8000abc <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e006      	b.n	8004244 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004236:	4b05      	ldr	r3, [pc, #20]	@ (800424c <RCCEx_PLL3_Config+0x12c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	44020c00 	.word	0x44020c00

08004250 <memset>:
 8004250:	4402      	add	r2, r0
 8004252:	4603      	mov	r3, r0
 8004254:	4293      	cmp	r3, r2
 8004256:	d100      	bne.n	800425a <memset+0xa>
 8004258:	4770      	bx	lr
 800425a:	f803 1b01 	strb.w	r1, [r3], #1
 800425e:	e7f9      	b.n	8004254 <memset+0x4>

08004260 <__libc_init_array>:
 8004260:	b570      	push	{r4, r5, r6, lr}
 8004262:	4d0d      	ldr	r5, [pc, #52]	@ (8004298 <__libc_init_array+0x38>)
 8004264:	2600      	movs	r6, #0
 8004266:	4c0d      	ldr	r4, [pc, #52]	@ (800429c <__libc_init_array+0x3c>)
 8004268:	1b64      	subs	r4, r4, r5
 800426a:	10a4      	asrs	r4, r4, #2
 800426c:	42a6      	cmp	r6, r4
 800426e:	d109      	bne.n	8004284 <__libc_init_array+0x24>
 8004270:	4d0b      	ldr	r5, [pc, #44]	@ (80042a0 <__libc_init_array+0x40>)
 8004272:	2600      	movs	r6, #0
 8004274:	4c0b      	ldr	r4, [pc, #44]	@ (80042a4 <__libc_init_array+0x44>)
 8004276:	f000 f817 	bl	80042a8 <_init>
 800427a:	1b64      	subs	r4, r4, r5
 800427c:	10a4      	asrs	r4, r4, #2
 800427e:	42a6      	cmp	r6, r4
 8004280:	d105      	bne.n	800428e <__libc_init_array+0x2e>
 8004282:	bd70      	pop	{r4, r5, r6, pc}
 8004284:	f855 3b04 	ldr.w	r3, [r5], #4
 8004288:	3601      	adds	r6, #1
 800428a:	4798      	blx	r3
 800428c:	e7ee      	b.n	800426c <__libc_init_array+0xc>
 800428e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004292:	3601      	adds	r6, #1
 8004294:	4798      	blx	r3
 8004296:	e7f2      	b.n	800427e <__libc_init_array+0x1e>
 8004298:	080042e0 	.word	0x080042e0
 800429c:	080042e0 	.word	0x080042e0
 80042a0:	080042e0 	.word	0x080042e0
 80042a4:	080042e4 	.word	0x080042e4

080042a8 <_init>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	bf00      	nop
 80042ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ae:	bc08      	pop	{r3}
 80042b0:	469e      	mov	lr, r3
 80042b2:	4770      	bx	lr

080042b4 <_fini>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr
